
printf_swd_itm_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fd0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08007270  08007270  00017270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007364  08007364  00017364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800736c  0800736c  0001736c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007370  08007370  00017370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  08007374  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000074  080073e8  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d4  08007448  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c0  24000134  080074a8  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240007f4  080074a8  000207f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001974d  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029c3  00000000  00000000  000398af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  0003c278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f10  00000000  00000000  0003d280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038200  00000000  00000000  0003e190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014403  00000000  00000000  00076390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001610af  00000000  00000000  0008a793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001eb842  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bb4  00000000  00000000  001eb894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000134 	.word	0x24000134
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007258 	.word	0x08007258

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000138 	.word	0x24000138
 80002dc:	08007258 	.word	0x08007258

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068a:	f000 fdc5 	bl	8001218 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068e:	f000 f827 	bl	80006e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000692:	f000 f96f 	bl	8000974 <MX_GPIO_Init>
  MX_ETH_Init();
 8000696:	f000 f8a3 	bl	80007e0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800069a:	f000 f8ed 	bl	8000878 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800069e:	f000 f937 	bl	8000910 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello, World!!!\r\n"); //Carriage Return + New Line Characters are needed to signal end of line
 80006a2:	480c      	ldr	r0, [pc, #48]	; (80006d4 <main+0x50>)
 80006a4:	f006 f8f4 	bl	8006890 <puts>
  int a, b, c;
  a = 10;
 80006a8:	230a      	movs	r3, #10
 80006aa:	60fb      	str	r3, [r7, #12]
  b = 20;
 80006ac:	2314      	movs	r3, #20
 80006ae:	60bb      	str	r3, [r7, #8]
  c = a + b;
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	4413      	add	r3, r2
 80006b6:	607b      	str	r3, [r7, #4]
  printf("%d + %d = %d", a, b, c); //If Carriage Return + New Line Characters if not present then we need to add fflush
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	68f9      	ldr	r1, [r7, #12]
 80006be:	4806      	ldr	r0, [pc, #24]	; (80006d8 <main+0x54>)
 80006c0:	f006 f860 	bl	8006784 <iprintf>
  fflush(stdout);
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <main+0x58>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	689b      	ldr	r3, [r3, #8]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f005 fe42 	bl	8006354 <fflush>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <main+0x4c>
 80006d2:	bf00      	nop
 80006d4:	08007270 	.word	0x08007270
 80006d8:	08007284 	.word	0x08007284
 80006dc:	24000010 	.word	0x24000010

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b09c      	sub	sp, #112	; 0x70
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ea:	224c      	movs	r2, #76	; 0x4c
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f005 ff5f 	bl	80065b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2220      	movs	r2, #32
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f005 ff59 	bl	80065b2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000700:	2002      	movs	r0, #2
 8000702:	f001 fe79 	bl	80023f8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000706:	2300      	movs	r3, #0
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	4b33      	ldr	r3, [pc, #204]	; (80007d8 <SystemClock_Config+0xf8>)
 800070c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800070e:	4a32      	ldr	r2, [pc, #200]	; (80007d8 <SystemClock_Config+0xf8>)
 8000710:	f023 0301 	bic.w	r3, r3, #1
 8000714:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000716:	4b30      	ldr	r3, [pc, #192]	; (80007d8 <SystemClock_Config+0xf8>)
 8000718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	4b2e      	ldr	r3, [pc, #184]	; (80007dc <SystemClock_Config+0xfc>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000728:	4a2c      	ldr	r2, [pc, #176]	; (80007dc <SystemClock_Config+0xfc>)
 800072a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800072e:	6193      	str	r3, [r2, #24]
 8000730:	4b2a      	ldr	r3, [pc, #168]	; (80007dc <SystemClock_Config+0xfc>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800073c:	bf00      	nop
 800073e:	4b27      	ldr	r3, [pc, #156]	; (80007dc <SystemClock_Config+0xfc>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800074a:	d1f8      	bne.n	800073e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800074c:	2303      	movs	r3, #3
 800074e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000750:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000754:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000756:	2301      	movs	r3, #1
 8000758:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800075a:	2340      	movs	r3, #64	; 0x40
 800075c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075e:	2302      	movs	r3, #2
 8000760:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000762:	2302      	movs	r3, #2
 8000764:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000766:	2301      	movs	r3, #1
 8000768:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800076a:	2318      	movs	r3, #24
 800076c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800076e:	2302      	movs	r3, #2
 8000770:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000772:	2304      	movs	r3, #4
 8000774:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000776:	2302      	movs	r3, #2
 8000778:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800077a:	230c      	movs	r3, #12
 800077c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800077e:	2300      	movs	r3, #0
 8000780:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078a:	4618      	mov	r0, r3
 800078c:	f001 fe7e 	bl	800248c <HAL_RCC_OscConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000796:	f000 f9c9 	bl	8000b2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079a:	233f      	movs	r3, #63	; 0x3f
 800079c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2101      	movs	r1, #1
 80007be:	4618      	mov	r0, r3
 80007c0:	f002 fa92 	bl	8002ce8 <HAL_RCC_ClockConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0xee>
  {
    Error_Handler();
 80007ca:	f000 f9af 	bl	8000b2c <Error_Handler>
  }
}
 80007ce:	bf00      	nop
 80007d0:	3770      	adds	r7, #112	; 0x70
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	58000400 	.word	0x58000400
 80007dc:	58024800 	.word	0x58024800

080007e0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007e4:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <MX_ETH_Init+0x80>)
 80007e6:	4a1f      	ldr	r2, [pc, #124]	; (8000864 <MX_ETH_Init+0x84>)
 80007e8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007ea:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <MX_ETH_Init+0x88>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007f0:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <MX_ETH_Init+0x88>)
 80007f2:	2280      	movs	r2, #128	; 0x80
 80007f4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007f6:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <MX_ETH_Init+0x88>)
 80007f8:	22e1      	movs	r2, #225	; 0xe1
 80007fa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007fc:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_ETH_Init+0x88>)
 80007fe:	2200      	movs	r2, #0
 8000800:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000802:	4b19      	ldr	r3, [pc, #100]	; (8000868 <MX_ETH_Init+0x88>)
 8000804:	2200      	movs	r2, #0
 8000806:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000808:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_ETH_Init+0x88>)
 800080a:	2200      	movs	r2, #0
 800080c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_ETH_Init+0x80>)
 8000810:	4a15      	ldr	r2, [pc, #84]	; (8000868 <MX_ETH_Init+0x88>)
 8000812:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_ETH_Init+0x80>)
 8000816:	2201      	movs	r2, #1
 8000818:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_ETH_Init+0x80>)
 800081c:	4a13      	ldr	r2, [pc, #76]	; (800086c <MX_ETH_Init+0x8c>)
 800081e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_ETH_Init+0x80>)
 8000822:	4a13      	ldr	r2, [pc, #76]	; (8000870 <MX_ETH_Init+0x90>)
 8000824:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_ETH_Init+0x80>)
 8000828:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800082c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800082e:	480c      	ldr	r0, [pc, #48]	; (8000860 <MX_ETH_Init+0x80>)
 8000830:	f000 feac 	bl	800158c <HAL_ETH_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800083a:	f000 f977 	bl	8000b2c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800083e:	2238      	movs	r2, #56	; 0x38
 8000840:	2100      	movs	r1, #0
 8000842:	480c      	ldr	r0, [pc, #48]	; (8000874 <MX_ETH_Init+0x94>)
 8000844:	f005 feb5 	bl	80065b2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <MX_ETH_Init+0x94>)
 800084a:	2221      	movs	r2, #33	; 0x21
 800084c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_ETH_Init+0x94>)
 8000850:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000854:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000856:	4b07      	ldr	r3, [pc, #28]	; (8000874 <MX_ETH_Init+0x94>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	24000188 	.word	0x24000188
 8000864:	40028000 	.word	0x40028000
 8000868:	240007d4 	.word	0x240007d4
 800086c:	240000d4 	.word	0x240000d4
 8000870:	24000074 	.word	0x24000074
 8000874:	24000150 	.word	0x24000150

08000878 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800087c:	4b22      	ldr	r3, [pc, #136]	; (8000908 <MX_USART3_UART_Init+0x90>)
 800087e:	4a23      	ldr	r2, [pc, #140]	; (800090c <MX_USART3_UART_Init+0x94>)
 8000880:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000882:	4b21      	ldr	r3, [pc, #132]	; (8000908 <MX_USART3_UART_Init+0x90>)
 8000884:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000888:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800088a:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <MX_USART3_UART_Init+0x90>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000890:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <MX_USART3_UART_Init+0x90>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000896:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <MX_USART3_UART_Init+0x90>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800089c:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <MX_USART3_UART_Init+0x90>)
 800089e:	220c      	movs	r2, #12
 80008a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a2:	4b19      	ldr	r3, [pc, #100]	; (8000908 <MX_USART3_UART_Init+0x90>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a8:	4b17      	ldr	r3, [pc, #92]	; (8000908 <MX_USART3_UART_Init+0x90>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ae:	4b16      	ldr	r3, [pc, #88]	; (8000908 <MX_USART3_UART_Init+0x90>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008b4:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_USART3_UART_Init+0x90>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ba:	4b13      	ldr	r3, [pc, #76]	; (8000908 <MX_USART3_UART_Init+0x90>)
 80008bc:	2200      	movs	r2, #0
 80008be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008c0:	4811      	ldr	r0, [pc, #68]	; (8000908 <MX_USART3_UART_Init+0x90>)
 80008c2:	f004 f905 	bl	8004ad0 <HAL_UART_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008cc:	f000 f92e 	bl	8000b2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008d0:	2100      	movs	r1, #0
 80008d2:	480d      	ldr	r0, [pc, #52]	; (8000908 <MX_USART3_UART_Init+0x90>)
 80008d4:	f005 f8a2 	bl	8005a1c <HAL_UARTEx_SetTxFifoThreshold>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008de:	f000 f925 	bl	8000b2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e2:	2100      	movs	r1, #0
 80008e4:	4808      	ldr	r0, [pc, #32]	; (8000908 <MX_USART3_UART_Init+0x90>)
 80008e6:	f005 f8d7 	bl	8005a98 <HAL_UARTEx_SetRxFifoThreshold>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008f0:	f000 f91c 	bl	8000b2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008f4:	4804      	ldr	r0, [pc, #16]	; (8000908 <MX_USART3_UART_Init+0x90>)
 80008f6:	f005 f858 	bl	80059aa <HAL_UARTEx_DisableFifoMode>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000900:	f000 f914 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	24000238 	.word	0x24000238
 800090c:	40004800 	.word	0x40004800

08000910 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000916:	4a16      	ldr	r2, [pc, #88]	; (8000970 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000918:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800091c:	2209      	movs	r2, #9
 800091e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000922:	2202      	movs	r2, #2
 8000924:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800092e:	2202      	movs	r2, #2
 8000930:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000934:	2201      	movs	r2, #1
 8000936:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800093a:	2200      	movs	r2, #0
 800093c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000940:	2200      	movs	r2, #0
 8000942:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000946:	2201      	movs	r2, #1
 8000948:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800094c:	2201      	movs	r2, #1
 800094e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000952:	2200      	movs	r2, #0
 8000954:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000958:	f001 fc05 	bl	8002166 <HAL_PCD_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000962:	f000 f8e3 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	240002c8 	.word	0x240002c8
 8000970:	40080000 	.word	0x40080000

08000974 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08c      	sub	sp, #48	; 0x30
 8000978:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098a:	4b62      	ldr	r3, [pc, #392]	; (8000b14 <MX_GPIO_Init+0x1a0>)
 800098c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000990:	4a60      	ldr	r2, [pc, #384]	; (8000b14 <MX_GPIO_Init+0x1a0>)
 8000992:	f043 0304 	orr.w	r3, r3, #4
 8000996:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099a:	4b5e      	ldr	r3, [pc, #376]	; (8000b14 <MX_GPIO_Init+0x1a0>)
 800099c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a0:	f003 0304 	and.w	r3, r3, #4
 80009a4:	61bb      	str	r3, [r7, #24]
 80009a6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a8:	4b5a      	ldr	r3, [pc, #360]	; (8000b14 <MX_GPIO_Init+0x1a0>)
 80009aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ae:	4a59      	ldr	r2, [pc, #356]	; (8000b14 <MX_GPIO_Init+0x1a0>)
 80009b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009b8:	4b56      	ldr	r3, [pc, #344]	; (8000b14 <MX_GPIO_Init+0x1a0>)
 80009ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	4b53      	ldr	r3, [pc, #332]	; (8000b14 <MX_GPIO_Init+0x1a0>)
 80009c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009cc:	4a51      	ldr	r2, [pc, #324]	; (8000b14 <MX_GPIO_Init+0x1a0>)
 80009ce:	f043 0301 	orr.w	r3, r3, #1
 80009d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009d6:	4b4f      	ldr	r3, [pc, #316]	; (8000b14 <MX_GPIO_Init+0x1a0>)
 80009d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e4:	4b4b      	ldr	r3, [pc, #300]	; (8000b14 <MX_GPIO_Init+0x1a0>)
 80009e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ea:	4a4a      	ldr	r2, [pc, #296]	; (8000b14 <MX_GPIO_Init+0x1a0>)
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009f4:	4b47      	ldr	r3, [pc, #284]	; (8000b14 <MX_GPIO_Init+0x1a0>)
 80009f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a02:	4b44      	ldr	r3, [pc, #272]	; (8000b14 <MX_GPIO_Init+0x1a0>)
 8000a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a08:	4a42      	ldr	r2, [pc, #264]	; (8000b14 <MX_GPIO_Init+0x1a0>)
 8000a0a:	f043 0308 	orr.w	r3, r3, #8
 8000a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a12:	4b40      	ldr	r3, [pc, #256]	; (8000b14 <MX_GPIO_Init+0x1a0>)
 8000a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a18:	f003 0308 	and.w	r3, r3, #8
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a20:	4b3c      	ldr	r3, [pc, #240]	; (8000b14 <MX_GPIO_Init+0x1a0>)
 8000a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a26:	4a3b      	ldr	r2, [pc, #236]	; (8000b14 <MX_GPIO_Init+0x1a0>)
 8000a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a30:	4b38      	ldr	r3, [pc, #224]	; (8000b14 <MX_GPIO_Init+0x1a0>)
 8000a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a3e:	4b35      	ldr	r3, [pc, #212]	; (8000b14 <MX_GPIO_Init+0x1a0>)
 8000a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a44:	4a33      	ldr	r2, [pc, #204]	; (8000b14 <MX_GPIO_Init+0x1a0>)
 8000a46:	f043 0310 	orr.w	r3, r3, #16
 8000a4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a4e:	4b31      	ldr	r3, [pc, #196]	; (8000b14 <MX_GPIO_Init+0x1a0>)
 8000a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a54:	f003 0310 	and.w	r3, r3, #16
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f244 0101 	movw	r1, #16385	; 0x4001
 8000a62:	482d      	ldr	r0, [pc, #180]	; (8000b18 <MX_GPIO_Init+0x1a4>)
 8000a64:	f001 fb66 	bl	8002134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a6e:	482b      	ldr	r0, [pc, #172]	; (8000b1c <MX_GPIO_Init+0x1a8>)
 8000a70:	f001 fb60 	bl	8002134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2102      	movs	r1, #2
 8000a78:	4829      	ldr	r0, [pc, #164]	; (8000b20 <MX_GPIO_Init+0x1ac>)
 8000a7a:	f001 fb5b 	bl	8002134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	4824      	ldr	r0, [pc, #144]	; (8000b24 <MX_GPIO_Init+0x1b0>)
 8000a94:	f001 f99e 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000a98:	f244 0301 	movw	r3, #16385	; 0x4001
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4819      	ldr	r0, [pc, #100]	; (8000b18 <MX_GPIO_Init+0x1a4>)
 8000ab2:	f001 f98f 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	4813      	ldr	r0, [pc, #76]	; (8000b1c <MX_GPIO_Init+0x1a8>)
 8000ad0:	f001 f980 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000ad4:	2380      	movs	r3, #128	; 0x80
 8000ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ad8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000adc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480f      	ldr	r0, [pc, #60]	; (8000b28 <MX_GPIO_Init+0x1b4>)
 8000aea:	f001 f973 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000aee:	2302      	movs	r3, #2
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	4806      	ldr	r0, [pc, #24]	; (8000b20 <MX_GPIO_Init+0x1ac>)
 8000b06:	f001 f965 	bl	8001dd4 <HAL_GPIO_Init>

}
 8000b0a:	bf00      	nop
 8000b0c:	3730      	adds	r7, #48	; 0x30
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	58024400 	.word	0x58024400
 8000b18:	58020400 	.word	0x58020400
 8000b1c:	58020c00 	.word	0x58020c00
 8000b20:	58021000 	.word	0x58021000
 8000b24:	58020800 	.word	0x58020800
 8000b28:	58021800 	.word	0x58021800

08000b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b30:	b672      	cpsid	i
}
 8000b32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <Error_Handler+0x8>
	...

08000b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <HAL_MspInit+0x30>)
 8000b40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b44:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <HAL_MspInit+0x30>)
 8000b46:	f043 0302 	orr.w	r3, r3, #2
 8000b4a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_MspInit+0x30>)
 8000b50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b54:	f003 0302 	and.w	r3, r3, #2
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	58024400 	.word	0x58024400

08000b6c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08e      	sub	sp, #56	; 0x38
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a59      	ldr	r2, [pc, #356]	; (8000cf0 <HAL_ETH_MspInit+0x184>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	f040 80ab 	bne.w	8000ce6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b90:	4b58      	ldr	r3, [pc, #352]	; (8000cf4 <HAL_ETH_MspInit+0x188>)
 8000b92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b96:	4a57      	ldr	r2, [pc, #348]	; (8000cf4 <HAL_ETH_MspInit+0x188>)
 8000b98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b9c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ba0:	4b54      	ldr	r3, [pc, #336]	; (8000cf4 <HAL_ETH_MspInit+0x188>)
 8000ba2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ba6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000baa:	623b      	str	r3, [r7, #32]
 8000bac:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000bae:	4b51      	ldr	r3, [pc, #324]	; (8000cf4 <HAL_ETH_MspInit+0x188>)
 8000bb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bb4:	4a4f      	ldr	r2, [pc, #316]	; (8000cf4 <HAL_ETH_MspInit+0x188>)
 8000bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bbe:	4b4d      	ldr	r3, [pc, #308]	; (8000cf4 <HAL_ETH_MspInit+0x188>)
 8000bc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bc8:	61fb      	str	r3, [r7, #28]
 8000bca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000bcc:	4b49      	ldr	r3, [pc, #292]	; (8000cf4 <HAL_ETH_MspInit+0x188>)
 8000bce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bd2:	4a48      	ldr	r2, [pc, #288]	; (8000cf4 <HAL_ETH_MspInit+0x188>)
 8000bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bdc:	4b45      	ldr	r3, [pc, #276]	; (8000cf4 <HAL_ETH_MspInit+0x188>)
 8000bde:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be6:	61bb      	str	r3, [r7, #24]
 8000be8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bea:	4b42      	ldr	r3, [pc, #264]	; (8000cf4 <HAL_ETH_MspInit+0x188>)
 8000bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf0:	4a40      	ldr	r2, [pc, #256]	; (8000cf4 <HAL_ETH_MspInit+0x188>)
 8000bf2:	f043 0304 	orr.w	r3, r3, #4
 8000bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bfa:	4b3e      	ldr	r3, [pc, #248]	; (8000cf4 <HAL_ETH_MspInit+0x188>)
 8000bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c00:	f003 0304 	and.w	r3, r3, #4
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c08:	4b3a      	ldr	r3, [pc, #232]	; (8000cf4 <HAL_ETH_MspInit+0x188>)
 8000c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0e:	4a39      	ldr	r2, [pc, #228]	; (8000cf4 <HAL_ETH_MspInit+0x188>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c18:	4b36      	ldr	r3, [pc, #216]	; (8000cf4 <HAL_ETH_MspInit+0x188>)
 8000c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c26:	4b33      	ldr	r3, [pc, #204]	; (8000cf4 <HAL_ETH_MspInit+0x188>)
 8000c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2c:	4a31      	ldr	r2, [pc, #196]	; (8000cf4 <HAL_ETH_MspInit+0x188>)
 8000c2e:	f043 0302 	orr.w	r3, r3, #2
 8000c32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c36:	4b2f      	ldr	r3, [pc, #188]	; (8000cf4 <HAL_ETH_MspInit+0x188>)
 8000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3c:	f003 0302 	and.w	r3, r3, #2
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c44:	4b2b      	ldr	r3, [pc, #172]	; (8000cf4 <HAL_ETH_MspInit+0x188>)
 8000c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4a:	4a2a      	ldr	r2, [pc, #168]	; (8000cf4 <HAL_ETH_MspInit+0x188>)
 8000c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c54:	4b27      	ldr	r3, [pc, #156]	; (8000cf4 <HAL_ETH_MspInit+0x188>)
 8000c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c62:	2332      	movs	r3, #50	; 0x32
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c72:	230b      	movs	r3, #11
 8000c74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	481e      	ldr	r0, [pc, #120]	; (8000cf8 <HAL_ETH_MspInit+0x18c>)
 8000c7e:	f001 f8a9 	bl	8001dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000c82:	2386      	movs	r3, #134	; 0x86
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c92:	230b      	movs	r3, #11
 8000c94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4817      	ldr	r0, [pc, #92]	; (8000cfc <HAL_ETH_MspInit+0x190>)
 8000c9e:	f001 f899 	bl	8001dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ca2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb4:	230b      	movs	r3, #11
 8000cb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4810      	ldr	r0, [pc, #64]	; (8000d00 <HAL_ETH_MspInit+0x194>)
 8000cc0:	f001 f888 	bl	8001dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000cc4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cd6:	230b      	movs	r3, #11
 8000cd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4808      	ldr	r0, [pc, #32]	; (8000d04 <HAL_ETH_MspInit+0x198>)
 8000ce2:	f001 f877 	bl	8001dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ce6:	bf00      	nop
 8000ce8:	3738      	adds	r7, #56	; 0x38
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40028000 	.word	0x40028000
 8000cf4:	58024400 	.word	0x58024400
 8000cf8:	58020800 	.word	0x58020800
 8000cfc:	58020000 	.word	0x58020000
 8000d00:	58020400 	.word	0x58020400
 8000d04:	58021800 	.word	0x58021800

08000d08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b0b8      	sub	sp, #224	; 0xe0
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d20:	f107 0310 	add.w	r3, r7, #16
 8000d24:	22bc      	movs	r2, #188	; 0xbc
 8000d26:	2100      	movs	r1, #0
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f005 fc42 	bl	80065b2 <memset>
  if(huart->Instance==USART3)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a25      	ldr	r2, [pc, #148]	; (8000dc8 <HAL_UART_MspInit+0xc0>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d142      	bne.n	8000dbe <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d42:	f107 0310 	add.w	r3, r7, #16
 8000d46:	4618      	mov	r0, r3
 8000d48:	f002 fb5a 	bl	8003400 <HAL_RCCEx_PeriphCLKConfig>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d52:	f7ff feeb 	bl	8000b2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d56:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <HAL_UART_MspInit+0xc4>)
 8000d58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d5c:	4a1b      	ldr	r2, [pc, #108]	; (8000dcc <HAL_UART_MspInit+0xc4>)
 8000d5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d62:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d66:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <HAL_UART_MspInit+0xc4>)
 8000d68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d74:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_UART_MspInit+0xc4>)
 8000d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7a:	4a14      	ldr	r2, [pc, #80]	; (8000dcc <HAL_UART_MspInit+0xc4>)
 8000d7c:	f043 0308 	orr.w	r3, r3, #8
 8000d80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d84:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <HAL_UART_MspInit+0xc4>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8a:	f003 0308 	and.w	r3, r3, #8
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dac:	2307      	movs	r3, #7
 8000dae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000db6:	4619      	mov	r1, r3
 8000db8:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <HAL_UART_MspInit+0xc8>)
 8000dba:	f001 f80b 	bl	8001dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dbe:	bf00      	nop
 8000dc0:	37e0      	adds	r7, #224	; 0xe0
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40004800 	.word	0x40004800
 8000dcc:	58024400 	.word	0x58024400
 8000dd0:	58020c00 	.word	0x58020c00

08000dd4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b0b8      	sub	sp, #224	; 0xe0
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	22bc      	movs	r2, #188	; 0xbc
 8000df2:	2100      	movs	r1, #0
 8000df4:	4618      	mov	r0, r3
 8000df6:	f005 fbdc 	bl	80065b2 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a2f      	ldr	r2, [pc, #188]	; (8000ebc <HAL_PCD_MspInit+0xe8>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d156      	bne.n	8000eb2 <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e04:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e08:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000e0a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e12:	f107 0310 	add.w	r3, r7, #16
 8000e16:	4618      	mov	r0, r3
 8000e18:	f002 faf2 	bl	8003400 <HAL_RCCEx_PeriphCLKConfig>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8000e22:	f7ff fe83 	bl	8000b2c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000e26:	f001 fb21 	bl	800246c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	4b25      	ldr	r3, [pc, #148]	; (8000ec0 <HAL_PCD_MspInit+0xec>)
 8000e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e30:	4a23      	ldr	r2, [pc, #140]	; (8000ec0 <HAL_PCD_MspInit+0xec>)
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e3a:	4b21      	ldr	r3, [pc, #132]	; (8000ec0 <HAL_PCD_MspInit+0xec>)
 8000e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000e48:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000e4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000e62:	230a      	movs	r3, #10
 8000e64:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e68:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4815      	ldr	r0, [pc, #84]	; (8000ec4 <HAL_PCD_MspInit+0xf0>)
 8000e70:	f000 ffb0 	bl	8001dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	480d      	ldr	r0, [pc, #52]	; (8000ec4 <HAL_PCD_MspInit+0xf0>)
 8000e90:	f000 ffa0 	bl	8001dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e94:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <HAL_PCD_MspInit+0xec>)
 8000e96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e9a:	4a09      	ldr	r2, [pc, #36]	; (8000ec0 <HAL_PCD_MspInit+0xec>)
 8000e9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ea0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_PCD_MspInit+0xec>)
 8000ea6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eaa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000eb2:	bf00      	nop
 8000eb4:	37e0      	adds	r7, #224	; 0xe0
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40080000 	.word	0x40080000
 8000ec0:	58024400 	.word	0x58024400
 8000ec4:	58020000 	.word	0x58020000

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <NMI_Handler+0x4>

08000ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <MemManage_Handler+0x4>

08000eda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <BusFault_Handler+0x4>

08000ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <UsageFault_Handler+0x4>

08000ee6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f14:	f000 f9f2 	bl	80012fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0     *((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN           *((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
    //Enable TRCENA
    DEMCR |= ( 1 << 24);
 8000f26:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <ITM_SendChar+0x48>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a0e      	ldr	r2, [pc, #56]	; (8000f64 <ITM_SendChar+0x48>)
 8000f2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f30:	6013      	str	r3, [r2, #0]

    //enable stimulus port 0
    ITM_TRACE_EN |= ( 1 << 0);
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <ITM_SendChar+0x4c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a0c      	ldr	r2, [pc, #48]	; (8000f68 <ITM_SendChar+0x4c>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6013      	str	r3, [r2, #0]

    // read FIFO status in bit [0]:
    while(!(ITM_STIMULUS_PORT0 & 1));
 8000f3e:	bf00      	nop
 8000f40:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d0f8      	beq.n	8000f40 <ITM_SendChar+0x24>

    //Write to ITM stimulus port0
    ITM_STIMULUS_PORT0 = ch;
 8000f4e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	6013      	str	r3, [r2, #0]
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000edfc 	.word	0xe000edfc
 8000f68:	e0000e00 	.word	0xe0000e00

08000f6c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	e00a      	b.n	8000f94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f7e:	f3af 8000 	nop.w
 8000f82:	4601      	mov	r1, r0
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	1c5a      	adds	r2, r3, #1
 8000f88:	60ba      	str	r2, [r7, #8]
 8000f8a:	b2ca      	uxtb	r2, r1
 8000f8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	3301      	adds	r3, #1
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	dbf0      	blt.n	8000f7e <_read+0x12>
	}

return len;
 8000f9c:	687b      	ldr	r3, [r7, #4]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b086      	sub	sp, #24
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	60f8      	str	r0, [r7, #12]
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	e009      	b.n	8000fcc <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	1c5a      	adds	r2, r3, #1
 8000fbc:	60ba      	str	r2, [r7, #8]
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ffab 	bl	8000f1c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	697a      	ldr	r2, [r7, #20]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	dbf1      	blt.n	8000fb8 <_write+0x12>
	}
	return len;
 8000fd4:	687b      	ldr	r3, [r7, #4]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <_close>:

int _close(int file)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b083      	sub	sp, #12
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
	return -1;
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001006:	605a      	str	r2, [r3, #4]
	return 0;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <_isatty>:

int _isatty(int file)
{
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
	return 1;
 800101e:	2301      	movs	r3, #1
}
 8001020:	4618      	mov	r0, r3
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
	return 0;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
	...

08001048 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001050:	4a14      	ldr	r2, [pc, #80]	; (80010a4 <_sbrk+0x5c>)
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <_sbrk+0x60>)
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800105c:	4b13      	ldr	r3, [pc, #76]	; (80010ac <_sbrk+0x64>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d102      	bne.n	800106a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <_sbrk+0x64>)
 8001066:	4a12      	ldr	r2, [pc, #72]	; (80010b0 <_sbrk+0x68>)
 8001068:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <_sbrk+0x64>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	429a      	cmp	r2, r3
 8001076:	d207      	bcs.n	8001088 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001078:	f005 f8a4 	bl	80061c4 <__errno>
 800107c:	4603      	mov	r3, r0
 800107e:	220c      	movs	r2, #12
 8001080:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
 8001086:	e009      	b.n	800109c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <_sbrk+0x64>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800108e:	4b07      	ldr	r3, [pc, #28]	; (80010ac <_sbrk+0x64>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4413      	add	r3, r2
 8001096:	4a05      	ldr	r2, [pc, #20]	; (80010ac <_sbrk+0x64>)
 8001098:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800109a:	68fb      	ldr	r3, [r7, #12]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	24080000 	.word	0x24080000
 80010a8:	00000400 	.word	0x00000400
 80010ac:	240007dc 	.word	0x240007dc
 80010b0:	240007f8 	.word	0x240007f8

080010b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010b8:	4b37      	ldr	r3, [pc, #220]	; (8001198 <SystemInit+0xe4>)
 80010ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010be:	4a36      	ldr	r2, [pc, #216]	; (8001198 <SystemInit+0xe4>)
 80010c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010c8:	4b34      	ldr	r3, [pc, #208]	; (800119c <SystemInit+0xe8>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 030f 	and.w	r3, r3, #15
 80010d0:	2b06      	cmp	r3, #6
 80010d2:	d807      	bhi.n	80010e4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010d4:	4b31      	ldr	r3, [pc, #196]	; (800119c <SystemInit+0xe8>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f023 030f 	bic.w	r3, r3, #15
 80010dc:	4a2f      	ldr	r2, [pc, #188]	; (800119c <SystemInit+0xe8>)
 80010de:	f043 0307 	orr.w	r3, r3, #7
 80010e2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010e4:	4b2e      	ldr	r3, [pc, #184]	; (80011a0 <SystemInit+0xec>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a2d      	ldr	r2, [pc, #180]	; (80011a0 <SystemInit+0xec>)
 80010ea:	f043 0301 	orr.w	r3, r3, #1
 80010ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010f0:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <SystemInit+0xec>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010f6:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <SystemInit+0xec>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	4929      	ldr	r1, [pc, #164]	; (80011a0 <SystemInit+0xec>)
 80010fc:	4b29      	ldr	r3, [pc, #164]	; (80011a4 <SystemInit+0xf0>)
 80010fe:	4013      	ands	r3, r2
 8001100:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001102:	4b26      	ldr	r3, [pc, #152]	; (800119c <SystemInit+0xe8>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0308 	and.w	r3, r3, #8
 800110a:	2b00      	cmp	r3, #0
 800110c:	d007      	beq.n	800111e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800110e:	4b23      	ldr	r3, [pc, #140]	; (800119c <SystemInit+0xe8>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f023 030f 	bic.w	r3, r3, #15
 8001116:	4a21      	ldr	r2, [pc, #132]	; (800119c <SystemInit+0xe8>)
 8001118:	f043 0307 	orr.w	r3, r3, #7
 800111c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800111e:	4b20      	ldr	r3, [pc, #128]	; (80011a0 <SystemInit+0xec>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001124:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <SystemInit+0xec>)
 8001126:	2200      	movs	r2, #0
 8001128:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800112a:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <SystemInit+0xec>)
 800112c:	2200      	movs	r2, #0
 800112e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <SystemInit+0xec>)
 8001132:	4a1d      	ldr	r2, [pc, #116]	; (80011a8 <SystemInit+0xf4>)
 8001134:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <SystemInit+0xec>)
 8001138:	4a1c      	ldr	r2, [pc, #112]	; (80011ac <SystemInit+0xf8>)
 800113a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800113c:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <SystemInit+0xec>)
 800113e:	4a1c      	ldr	r2, [pc, #112]	; (80011b0 <SystemInit+0xfc>)
 8001140:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <SystemInit+0xec>)
 8001144:	2200      	movs	r2, #0
 8001146:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <SystemInit+0xec>)
 800114a:	4a19      	ldr	r2, [pc, #100]	; (80011b0 <SystemInit+0xfc>)
 800114c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <SystemInit+0xec>)
 8001150:	2200      	movs	r2, #0
 8001152:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <SystemInit+0xec>)
 8001156:	4a16      	ldr	r2, [pc, #88]	; (80011b0 <SystemInit+0xfc>)
 8001158:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <SystemInit+0xec>)
 800115c:	2200      	movs	r2, #0
 800115e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <SystemInit+0xec>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <SystemInit+0xec>)
 8001166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800116a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <SystemInit+0xec>)
 800116e:	2200      	movs	r2, #0
 8001170:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <SystemInit+0x100>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <SystemInit+0x104>)
 8001178:	4013      	ands	r3, r2
 800117a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800117e:	d202      	bcs.n	8001186 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001180:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <SystemInit+0x108>)
 8001182:	2201      	movs	r2, #1
 8001184:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <SystemInit+0x10c>)
 8001188:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800118c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00
 800119c:	52002000 	.word	0x52002000
 80011a0:	58024400 	.word	0x58024400
 80011a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80011a8:	02020200 	.word	0x02020200
 80011ac:	01ff0000 	.word	0x01ff0000
 80011b0:	01010280 	.word	0x01010280
 80011b4:	5c001000 	.word	0x5c001000
 80011b8:	ffff0000 	.word	0xffff0000
 80011bc:	51008108 	.word	0x51008108
 80011c0:	52004000 	.word	0x52004000

080011c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011c8:	f7ff ff74 	bl	80010b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011cc:	480c      	ldr	r0, [pc, #48]	; (8001200 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ce:	490d      	ldr	r1, [pc, #52]	; (8001204 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011d0:	4a0d      	ldr	r2, [pc, #52]	; (8001208 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d4:	e002      	b.n	80011dc <LoopCopyDataInit>

080011d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011da:	3304      	adds	r3, #4

080011dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e0:	d3f9      	bcc.n	80011d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e2:	4a0a      	ldr	r2, [pc, #40]	; (800120c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011e4:	4c0a      	ldr	r4, [pc, #40]	; (8001210 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e8:	e001      	b.n	80011ee <LoopFillZerobss>

080011ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ec:	3204      	adds	r2, #4

080011ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f0:	d3fb      	bcc.n	80011ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011f2:	f005 f9b7 	bl	8006564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011f6:	f7ff fa45 	bl	8000684 <main>
  bx  lr
 80011fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011fc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001200:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001204:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001208:	08007374 	.word	0x08007374
  ldr r2, =_sbss
 800120c:	24000134 	.word	0x24000134
  ldr r4, =_ebss
 8001210:	240007f4 	.word	0x240007f4

08001214 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001214:	e7fe      	b.n	8001214 <ADC3_IRQHandler>
	...

08001218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800121e:	2003      	movs	r0, #3
 8001220:	f000 f982 	bl	8001528 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001224:	f001 ff16 	bl	8003054 <HAL_RCC_GetSysClockFreq>
 8001228:	4602      	mov	r2, r0
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <HAL_Init+0x68>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	0a1b      	lsrs	r3, r3, #8
 8001230:	f003 030f 	and.w	r3, r3, #15
 8001234:	4913      	ldr	r1, [pc, #76]	; (8001284 <HAL_Init+0x6c>)
 8001236:	5ccb      	ldrb	r3, [r1, r3]
 8001238:	f003 031f 	and.w	r3, r3, #31
 800123c:	fa22 f303 	lsr.w	r3, r2, r3
 8001240:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <HAL_Init+0x68>)
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	4a0e      	ldr	r2, [pc, #56]	; (8001284 <HAL_Init+0x6c>)
 800124c:	5cd3      	ldrb	r3, [r2, r3]
 800124e:	f003 031f 	and.w	r3, r3, #31
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	fa22 f303 	lsr.w	r3, r2, r3
 8001258:	4a0b      	ldr	r2, [pc, #44]	; (8001288 <HAL_Init+0x70>)
 800125a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800125c:	4a0b      	ldr	r2, [pc, #44]	; (800128c <HAL_Init+0x74>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001262:	2000      	movs	r0, #0
 8001264:	f000 f814 	bl	8001290 <HAL_InitTick>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e002      	b.n	8001278 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001272:	f7ff fc61 	bl	8000b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	58024400 	.word	0x58024400
 8001284:	08007294 	.word	0x08007294
 8001288:	24000004 	.word	0x24000004
 800128c:	24000000 	.word	0x24000000

08001290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <HAL_InitTick+0x60>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d101      	bne.n	80012a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e021      	b.n	80012e8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <HAL_InitTick+0x64>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <HAL_InitTick+0x60>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	4619      	mov	r1, r3
 80012ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 f959 	bl	8001572 <HAL_SYSTICK_Config>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e00e      	b.n	80012e8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b0f      	cmp	r3, #15
 80012ce:	d80a      	bhi.n	80012e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d0:	2200      	movs	r2, #0
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295
 80012d8:	f000 f931 	bl	800153e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012dc:	4a06      	ldr	r2, [pc, #24]	; (80012f8 <HAL_InitTick+0x68>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
 80012e4:	e000      	b.n	80012e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	2400000c 	.word	0x2400000c
 80012f4:	24000000 	.word	0x24000000
 80012f8:	24000008 	.word	0x24000008

080012fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_IncTick+0x20>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_IncTick+0x24>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4413      	add	r3, r2
 800130c:	4a04      	ldr	r2, [pc, #16]	; (8001320 <HAL_IncTick+0x24>)
 800130e:	6013      	str	r3, [r2, #0]
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	2400000c 	.word	0x2400000c
 8001320:	240007e0 	.word	0x240007e0

08001324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return uwTick;
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <HAL_GetTick+0x14>)
 800132a:	681b      	ldr	r3, [r3, #0]
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	240007e0 	.word	0x240007e0

0800133c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001344:	f7ff ffee 	bl	8001324 <HAL_GetTick>
 8001348:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001354:	d005      	beq.n	8001362 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001356:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <HAL_Delay+0x44>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4413      	add	r3, r2
 8001360:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001362:	bf00      	nop
 8001364:	f7ff ffde 	bl	8001324 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	429a      	cmp	r2, r3
 8001372:	d8f7      	bhi.n	8001364 <HAL_Delay+0x28>
  {
  }
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	2400000c 	.word	0x2400000c

08001384 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001388:	4b03      	ldr	r3, [pc, #12]	; (8001398 <HAL_GetREVID+0x14>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	0c1b      	lsrs	r3, r3, #16
}
 800138e:	4618      	mov	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	5c001000 	.word	0x5c001000

0800139c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80013ac:	4904      	ldr	r1, [pc, #16]	; (80013c0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	604b      	str	r3, [r1, #4]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	58000400 	.word	0x58000400

080013c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <__NVIC_SetPriorityGrouping+0x40>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e0:	4013      	ands	r3, r2
 80013e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <__NVIC_SetPriorityGrouping+0x44>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f2:	4a04      	ldr	r2, [pc, #16]	; (8001404 <__NVIC_SetPriorityGrouping+0x40>)
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	60d3      	str	r3, [r2, #12]
}
 80013f8:	bf00      	nop
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00
 8001408:	05fa0000 	.word	0x05fa0000

0800140c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <__NVIC_GetPriorityGrouping+0x18>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	0a1b      	lsrs	r3, r3, #8
 8001416:	f003 0307 	and.w	r3, r3, #7
}
 800141a:	4618      	mov	r0, r3
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	6039      	str	r1, [r7, #0]
 8001432:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001434:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001438:	2b00      	cmp	r3, #0
 800143a:	db0a      	blt.n	8001452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	b2da      	uxtb	r2, r3
 8001440:	490c      	ldr	r1, [pc, #48]	; (8001474 <__NVIC_SetPriority+0x4c>)
 8001442:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001446:	0112      	lsls	r2, r2, #4
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	440b      	add	r3, r1
 800144c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001450:	e00a      	b.n	8001468 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4908      	ldr	r1, [pc, #32]	; (8001478 <__NVIC_SetPriority+0x50>)
 8001458:	88fb      	ldrh	r3, [r7, #6]
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	3b04      	subs	r3, #4
 8001460:	0112      	lsls	r2, r2, #4
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	440b      	add	r3, r1
 8001466:	761a      	strb	r2, [r3, #24]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000e100 	.word	0xe000e100
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800147c:	b480      	push	{r7}
 800147e:	b089      	sub	sp, #36	; 0x24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f1c3 0307 	rsb	r3, r3, #7
 8001496:	2b04      	cmp	r3, #4
 8001498:	bf28      	it	cs
 800149a:	2304      	movcs	r3, #4
 800149c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3304      	adds	r3, #4
 80014a2:	2b06      	cmp	r3, #6
 80014a4:	d902      	bls.n	80014ac <NVIC_EncodePriority+0x30>
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3b03      	subs	r3, #3
 80014aa:	e000      	b.n	80014ae <NVIC_EncodePriority+0x32>
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b0:	f04f 32ff 	mov.w	r2, #4294967295
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43da      	mvns	r2, r3
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	401a      	ands	r2, r3
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c4:	f04f 31ff 	mov.w	r1, #4294967295
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	fa01 f303 	lsl.w	r3, r1, r3
 80014ce:	43d9      	mvns	r1, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d4:	4313      	orrs	r3, r2
         );
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3724      	adds	r7, #36	; 0x24
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
	...

080014e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014f4:	d301      	bcc.n	80014fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014f6:	2301      	movs	r3, #1
 80014f8:	e00f      	b.n	800151a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014fa:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <SysTick_Config+0x40>)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3b01      	subs	r3, #1
 8001500:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001502:	210f      	movs	r1, #15
 8001504:	f04f 30ff 	mov.w	r0, #4294967295
 8001508:	f7ff ff8e 	bl	8001428 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800150c:	4b05      	ldr	r3, [pc, #20]	; (8001524 <SysTick_Config+0x40>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001512:	4b04      	ldr	r3, [pc, #16]	; (8001524 <SysTick_Config+0x40>)
 8001514:	2207      	movs	r2, #7
 8001516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	e000e010 	.word	0xe000e010

08001528 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff ff47 	bl	80013c4 <__NVIC_SetPriorityGrouping>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b086      	sub	sp, #24
 8001542:	af00      	add	r7, sp, #0
 8001544:	4603      	mov	r3, r0
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	607a      	str	r2, [r7, #4]
 800154a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800154c:	f7ff ff5e 	bl	800140c <__NVIC_GetPriorityGrouping>
 8001550:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	68b9      	ldr	r1, [r7, #8]
 8001556:	6978      	ldr	r0, [r7, #20]
 8001558:	f7ff ff90 	bl	800147c <NVIC_EncodePriority>
 800155c:	4602      	mov	r2, r0
 800155e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001562:	4611      	mov	r1, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff5f 	bl	8001428 <__NVIC_SetPriority>
}
 800156a:	bf00      	nop
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff ffb2 	bl	80014e4 <SysTick_Config>
 8001580:	4603      	mov	r3, r0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e0cf      	b.n	800173e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d106      	bne.n	80015b6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2223      	movs	r2, #35	; 0x23
 80015ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff fadb 	bl	8000b6c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b6:	4b64      	ldr	r3, [pc, #400]	; (8001748 <HAL_ETH_Init+0x1bc>)
 80015b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015bc:	4a62      	ldr	r2, [pc, #392]	; (8001748 <HAL_ETH_Init+0x1bc>)
 80015be:	f043 0302 	orr.w	r3, r3, #2
 80015c2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80015c6:	4b60      	ldr	r3, [pc, #384]	; (8001748 <HAL_ETH_Init+0x1bc>)
 80015c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	7a1b      	ldrb	r3, [r3, #8]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d103      	bne.n	80015e4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80015dc:	2000      	movs	r0, #0
 80015de:	f7ff fedd 	bl	800139c <HAL_SYSCFG_ETHInterfaceSelect>
 80015e2:	e003      	b.n	80015ec <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80015e4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80015e8:	f7ff fed8 	bl	800139c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80015ec:	4b57      	ldr	r3, [pc, #348]	; (800174c <HAL_ETH_Init+0x1c0>)
 80015ee:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	6812      	ldr	r2, [r2, #0]
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001606:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001608:	f7ff fe8c 	bl	8001324 <HAL_GetTick>
 800160c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800160e:	e011      	b.n	8001634 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001610:	f7ff fe88 	bl	8001324 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800161e:	d909      	bls.n	8001634 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2204      	movs	r2, #4
 8001624:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	22e0      	movs	r2, #224	; 0xe0
 800162c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e084      	b.n	800173e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1e4      	bne.n	8001610 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 f886 	bl	8001758 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800164c:	f001 fe7c 	bl	8003348 <HAL_RCC_GetHCLKFreq>
 8001650:	4603      	mov	r3, r0
 8001652:	4a3f      	ldr	r2, [pc, #252]	; (8001750 <HAL_ETH_Init+0x1c4>)
 8001654:	fba2 2303 	umull	r2, r3, r2, r3
 8001658:	0c9a      	lsrs	r2, r3, #18
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	3a01      	subs	r2, #1
 8001660:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 fa71 	bl	8001b4c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001672:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001676:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	6812      	ldr	r2, [r2, #0]
 800167e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001682:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001686:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	f003 0303 	and.w	r3, r3, #3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d009      	beq.n	80016aa <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	22e0      	movs	r2, #224	; 0xe0
 80016a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e049      	b.n	800173e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016b2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80016b6:	4b27      	ldr	r3, [pc, #156]	; (8001754 <HAL_ETH_Init+0x1c8>)
 80016b8:	4013      	ands	r3, r2
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	6952      	ldr	r2, [r2, #20]
 80016be:	0051      	lsls	r1, r2, #1
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	6812      	ldr	r2, [r2, #0]
 80016c4:	430b      	orrs	r3, r1
 80016c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016ca:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 fad9 	bl	8001c86 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 fb1f 	bl	8001d18 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	3305      	adds	r3, #5
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	021a      	lsls	r2, r3, #8
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	3304      	adds	r3, #4
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	4619      	mov	r1, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	3303      	adds	r3, #3
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	061a      	lsls	r2, r3, #24
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	3302      	adds	r3, #2
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	041b      	lsls	r3, r3, #16
 800170c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	3301      	adds	r3, #1
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001718:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001726:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001728:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2210      	movs	r2, #16
 8001738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	58024400 	.word	0x58024400
 800174c:	58000400 	.word	0x58000400
 8001750:	431bde83 	.word	0x431bde83
 8001754:	ffff8001 	.word	0xffff8001

08001758 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001768:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001770:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001772:	f001 fde9 	bl	8003348 <HAL_RCC_GetHCLKFreq>
 8001776:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	4a1e      	ldr	r2, [pc, #120]	; (80017f4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d908      	bls.n	8001792 <HAL_ETH_SetMDIOClockRange+0x3a>
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	4a1d      	ldr	r2, [pc, #116]	; (80017f8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d804      	bhi.n	8001792 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	e027      	b.n	80017e2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	4a18      	ldr	r2, [pc, #96]	; (80017f8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d908      	bls.n	80017ac <HAL_ETH_SetMDIOClockRange+0x54>
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	4a17      	ldr	r2, [pc, #92]	; (80017fc <HAL_ETH_SetMDIOClockRange+0xa4>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d204      	bcs.n	80017ac <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	e01a      	b.n	80017e2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	4a13      	ldr	r2, [pc, #76]	; (80017fc <HAL_ETH_SetMDIOClockRange+0xa4>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d303      	bcc.n	80017bc <HAL_ETH_SetMDIOClockRange+0x64>
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	4a12      	ldr	r2, [pc, #72]	; (8001800 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d911      	bls.n	80017e0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	4a10      	ldr	r2, [pc, #64]	; (8001800 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d908      	bls.n	80017d6 <HAL_ETH_SetMDIOClockRange+0x7e>
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	4a0f      	ldr	r2, [pc, #60]	; (8001804 <HAL_ETH_SetMDIOClockRange+0xac>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d804      	bhi.n	80017d6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	e005      	b.n	80017e2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	e000      	b.n	80017e2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80017e0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80017ec:	bf00      	nop
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	01312cff 	.word	0x01312cff
 80017f8:	02160ebf 	.word	0x02160ebf
 80017fc:	03938700 	.word	0x03938700
 8001800:	05f5e0ff 	.word	0x05f5e0ff
 8001804:	08f0d17f 	.word	0x08f0d17f

08001808 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800181a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	791b      	ldrb	r3, [r3, #4]
 8001820:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001822:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	7b1b      	ldrb	r3, [r3, #12]
 8001828:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800182a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	7b5b      	ldrb	r3, [r3, #13]
 8001830:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001832:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	7b9b      	ldrb	r3, [r3, #14]
 8001838:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800183a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	7bdb      	ldrb	r3, [r3, #15]
 8001840:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001842:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	7c12      	ldrb	r2, [r2, #16]
 8001848:	2a00      	cmp	r2, #0
 800184a:	d102      	bne.n	8001852 <ETH_SetMACConfig+0x4a>
 800184c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001850:	e000      	b.n	8001854 <ETH_SetMACConfig+0x4c>
 8001852:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001854:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	7c52      	ldrb	r2, [r2, #17]
 800185a:	2a00      	cmp	r2, #0
 800185c:	d102      	bne.n	8001864 <ETH_SetMACConfig+0x5c>
 800185e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001862:	e000      	b.n	8001866 <ETH_SetMACConfig+0x5e>
 8001864:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001866:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	7c9b      	ldrb	r3, [r3, #18]
 800186c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800186e:	431a      	orrs	r2, r3
               macconf->Speed |
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001874:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800187a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	7f1b      	ldrb	r3, [r3, #28]
 8001880:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001882:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	7f5b      	ldrb	r3, [r3, #29]
 8001888:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800188a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	7f92      	ldrb	r2, [r2, #30]
 8001890:	2a00      	cmp	r2, #0
 8001892:	d102      	bne.n	800189a <ETH_SetMACConfig+0x92>
 8001894:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001898:	e000      	b.n	800189c <ETH_SetMACConfig+0x94>
 800189a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800189c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	7fdb      	ldrb	r3, [r3, #31]
 80018a2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80018a4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80018ac:	2a00      	cmp	r2, #0
 80018ae:	d102      	bne.n	80018b6 <ETH_SetMACConfig+0xae>
 80018b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018b4:	e000      	b.n	80018b8 <ETH_SetMACConfig+0xb0>
 80018b6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80018b8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80018be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80018c6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80018c8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80018ce:	4313      	orrs	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b56      	ldr	r3, [pc, #344]	; (8001a34 <ETH_SetMACConfig+0x22c>)
 80018da:	4013      	ands	r3, r2
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6812      	ldr	r2, [r2, #0]
 80018e0:	68f9      	ldr	r1, [r7, #12]
 80018e2:	430b      	orrs	r3, r1
 80018e4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ea:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018f2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80018f4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018fc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80018fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001906:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001908:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001910:	2a00      	cmp	r2, #0
 8001912:	d102      	bne.n	800191a <ETH_SetMACConfig+0x112>
 8001914:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001918:	e000      	b.n	800191c <ETH_SetMACConfig+0x114>
 800191a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800191c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001922:	4313      	orrs	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	4b42      	ldr	r3, [pc, #264]	; (8001a38 <ETH_SetMACConfig+0x230>)
 800192e:	4013      	ands	r3, r2
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	68f9      	ldr	r1, [r7, #12]
 8001936:	430b      	orrs	r3, r1
 8001938:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001940:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001946:	4313      	orrs	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	4b3a      	ldr	r3, [pc, #232]	; (8001a3c <ETH_SetMACConfig+0x234>)
 8001952:	4013      	ands	r3, r2
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6812      	ldr	r2, [r2, #0]
 8001958:	68f9      	ldr	r1, [r7, #12]
 800195a:	430b      	orrs	r3, r1
 800195c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001964:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800196a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001972:	2a00      	cmp	r2, #0
 8001974:	d101      	bne.n	800197a <ETH_SetMACConfig+0x172>
 8001976:	2280      	movs	r2, #128	; 0x80
 8001978:	e000      	b.n	800197c <ETH_SetMACConfig+0x174>
 800197a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800197c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001982:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001984:	4313      	orrs	r3, r2
 8001986:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800198e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001992:	4013      	ands	r3, r2
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	68f9      	ldr	r1, [r7, #12]
 800199a:	430b      	orrs	r3, r1
 800199c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80019a4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80019ac:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80019ae:	4313      	orrs	r3, r2
 80019b0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ba:	f023 0103 	bic.w	r1, r3, #3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80019d2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	430a      	orrs	r2, r1
 80019e0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80019ee:	2a00      	cmp	r2, #0
 80019f0:	d101      	bne.n	80019f6 <ETH_SetMACConfig+0x1ee>
 80019f2:	2240      	movs	r2, #64	; 0x40
 80019f4:	e000      	b.n	80019f8 <ETH_SetMACConfig+0x1f0>
 80019f6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80019f8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001a00:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001a0a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001a18:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	430a      	orrs	r2, r1
 8001a24:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	00048083 	.word	0x00048083
 8001a38:	c0f88000 	.word	0xc0f88000
 8001a3c:	fffffef0 	.word	0xfffffef0

08001a40 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b38      	ldr	r3, [pc, #224]	; (8001b38 <ETH_SetDMAConfig+0xf8>)
 8001a56:	4013      	ands	r3, r2
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	6811      	ldr	r1, [r2, #0]
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6812      	ldr	r2, [r2, #0]
 8001a60:	430b      	orrs	r3, r1
 8001a62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a66:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	791b      	ldrb	r3, [r3, #4]
 8001a6c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a72:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	7b1b      	ldrb	r3, [r3, #12]
 8001a78:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	4b2c      	ldr	r3, [pc, #176]	; (8001b3c <ETH_SetDMAConfig+0xfc>)
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	6812      	ldr	r2, [r2, #0]
 8001a90:	68f9      	ldr	r1, [r7, #12]
 8001a92:	430b      	orrs	r3, r1
 8001a94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a98:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	7b5b      	ldrb	r3, [r3, #13]
 8001a9e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ab0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001ab4:	4b22      	ldr	r3, [pc, #136]	; (8001b40 <ETH_SetDMAConfig+0x100>)
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	68f9      	ldr	r1, [r7, #12]
 8001abe:	430b      	orrs	r3, r1
 8001ac0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ac4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	7d1b      	ldrb	r3, [r3, #20]
 8001ad0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001ad2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	7f5b      	ldrb	r3, [r3, #29]
 8001ad8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001ada:	4313      	orrs	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ae6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001aea:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <ETH_SetDMAConfig+0x104>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6812      	ldr	r2, [r2, #0]
 8001af2:	68f9      	ldr	r1, [r7, #12]
 8001af4:	430b      	orrs	r3, r1
 8001af6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001afa:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	7f1b      	ldrb	r3, [r3, #28]
 8001b02:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b14:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <ETH_SetDMAConfig+0x108>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6812      	ldr	r2, [r2, #0]
 8001b20:	68f9      	ldr	r1, [r7, #12]
 8001b22:	430b      	orrs	r3, r1
 8001b24:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b28:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001b2c:	bf00      	nop
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	ffff87fd 	.word	0xffff87fd
 8001b3c:	ffff2ffe 	.word	0xffff2ffe
 8001b40:	fffec000 	.word	0xfffec000
 8001b44:	ffc0efef 	.word	0xffc0efef
 8001b48:	7fc0ffff 	.word	0x7fc0ffff

08001b4c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b0a4      	sub	sp, #144	; 0x90
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001b54:	2301      	movs	r3, #1
 8001b56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001b64:	2300      	movs	r3, #0
 8001b66:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001b70:	2301      	movs	r3, #1
 8001b72:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001b76:	2301      	movs	r3, #1
 8001b78:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001b82:	2301      	movs	r3, #1
 8001b84:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001b88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b8c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001ba4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001ba8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001bde:	2301      	movs	r3, #1
 8001be0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001be4:	2320      	movs	r3, #32
 8001be6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001bea:	2301      	movs	r3, #1
 8001bec:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001bf6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001bfc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c00:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001c20:	2301      	movs	r3, #1
 8001c22:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001c26:	2300      	movs	r3, #0
 8001c28:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c34:	4619      	mov	r1, r3
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff fde6 	bl	8001808 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c40:	2301      	movs	r3, #1
 8001c42:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001c44:	2300      	movs	r3, #0
 8001c46:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c56:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c5a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c60:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c64:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001c6c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001c70:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001c72:	f107 0308 	add.w	r3, r7, #8
 8001c76:	4619      	mov	r1, r3
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff fee1 	bl	8001a40 <ETH_SetDMAConfig>
}
 8001c7e:	bf00      	nop
 8001c80:	3790      	adds	r7, #144	; 0x90
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b085      	sub	sp, #20
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	e01d      	b.n	8001cd0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68d9      	ldr	r1, [r3, #12]
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	4413      	add	r3, r2
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	440b      	add	r3, r1
 8001ca4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001cbe:	68b9      	ldr	r1, [r7, #8]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	3206      	adds	r2, #6
 8001cc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b03      	cmp	r3, #3
 8001cd4:	d9de      	bls.n	8001c94 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cf8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68da      	ldr	r2, [r3, #12]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d08:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001d0c:	bf00      	nop
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d20:	2300      	movs	r3, #0
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	e023      	b.n	8001d6e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6919      	ldr	r1, [r3, #16]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	4413      	add	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	440b      	add	r3, r1
 8001d36:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	2200      	movs	r2, #0
 8001d42:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2200      	movs	r2, #0
 8001d48:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	2200      	movs	r2, #0
 8001d54:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001d5c:	68b9      	ldr	r1, [r7, #8]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	3212      	adds	r2, #18
 8001d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2b03      	cmp	r3, #3
 8001d72:	d9d8      	bls.n	8001d26 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691a      	ldr	r2, [r3, #16]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dae:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dc2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001dc6:	bf00      	nop
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b089      	sub	sp, #36	; 0x24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001de2:	4b89      	ldr	r3, [pc, #548]	; (8002008 <HAL_GPIO_Init+0x234>)
 8001de4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001de6:	e194      	b.n	8002112 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	2101      	movs	r1, #1
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	fa01 f303 	lsl.w	r3, r1, r3
 8001df4:	4013      	ands	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 8186 	beq.w	800210c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d005      	beq.n	8001e18 <HAL_GPIO_Init+0x44>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d130      	bne.n	8001e7a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	2203      	movs	r2, #3
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	68da      	ldr	r2, [r3, #12]
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e4e:	2201      	movs	r2, #1
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	091b      	lsrs	r3, r3, #4
 8001e64:	f003 0201 	and.w	r2, r3, #1
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	2b03      	cmp	r3, #3
 8001e84:	d017      	beq.n	8001eb6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	2203      	movs	r2, #3
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d123      	bne.n	8001f0a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	08da      	lsrs	r2, r3, #3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3208      	adds	r2, #8
 8001eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	220f      	movs	r2, #15
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	691a      	ldr	r2, [r3, #16]
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	08da      	lsrs	r2, r3, #3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3208      	adds	r2, #8
 8001f04:	69b9      	ldr	r1, [r7, #24]
 8001f06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	2203      	movs	r2, #3
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 0203 	and.w	r2, r3, #3
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 80e0 	beq.w	800210c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4c:	4b2f      	ldr	r3, [pc, #188]	; (800200c <HAL_GPIO_Init+0x238>)
 8001f4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f52:	4a2e      	ldr	r2, [pc, #184]	; (800200c <HAL_GPIO_Init+0x238>)
 8001f54:	f043 0302 	orr.w	r3, r3, #2
 8001f58:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f5c:	4b2b      	ldr	r3, [pc, #172]	; (800200c <HAL_GPIO_Init+0x238>)
 8001f5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f6a:	4a29      	ldr	r2, [pc, #164]	; (8002010 <HAL_GPIO_Init+0x23c>)
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	089b      	lsrs	r3, r3, #2
 8001f70:	3302      	adds	r3, #2
 8001f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	220f      	movs	r2, #15
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43db      	mvns	r3, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a20      	ldr	r2, [pc, #128]	; (8002014 <HAL_GPIO_Init+0x240>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d052      	beq.n	800203c <HAL_GPIO_Init+0x268>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a1f      	ldr	r2, [pc, #124]	; (8002018 <HAL_GPIO_Init+0x244>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d031      	beq.n	8002002 <HAL_GPIO_Init+0x22e>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a1e      	ldr	r2, [pc, #120]	; (800201c <HAL_GPIO_Init+0x248>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d02b      	beq.n	8001ffe <HAL_GPIO_Init+0x22a>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a1d      	ldr	r2, [pc, #116]	; (8002020 <HAL_GPIO_Init+0x24c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d025      	beq.n	8001ffa <HAL_GPIO_Init+0x226>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a1c      	ldr	r2, [pc, #112]	; (8002024 <HAL_GPIO_Init+0x250>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d01f      	beq.n	8001ff6 <HAL_GPIO_Init+0x222>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a1b      	ldr	r2, [pc, #108]	; (8002028 <HAL_GPIO_Init+0x254>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d019      	beq.n	8001ff2 <HAL_GPIO_Init+0x21e>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a1a      	ldr	r2, [pc, #104]	; (800202c <HAL_GPIO_Init+0x258>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d013      	beq.n	8001fee <HAL_GPIO_Init+0x21a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a19      	ldr	r2, [pc, #100]	; (8002030 <HAL_GPIO_Init+0x25c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d00d      	beq.n	8001fea <HAL_GPIO_Init+0x216>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a18      	ldr	r2, [pc, #96]	; (8002034 <HAL_GPIO_Init+0x260>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d007      	beq.n	8001fe6 <HAL_GPIO_Init+0x212>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a17      	ldr	r2, [pc, #92]	; (8002038 <HAL_GPIO_Init+0x264>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d101      	bne.n	8001fe2 <HAL_GPIO_Init+0x20e>
 8001fde:	2309      	movs	r3, #9
 8001fe0:	e02d      	b.n	800203e <HAL_GPIO_Init+0x26a>
 8001fe2:	230a      	movs	r3, #10
 8001fe4:	e02b      	b.n	800203e <HAL_GPIO_Init+0x26a>
 8001fe6:	2308      	movs	r3, #8
 8001fe8:	e029      	b.n	800203e <HAL_GPIO_Init+0x26a>
 8001fea:	2307      	movs	r3, #7
 8001fec:	e027      	b.n	800203e <HAL_GPIO_Init+0x26a>
 8001fee:	2306      	movs	r3, #6
 8001ff0:	e025      	b.n	800203e <HAL_GPIO_Init+0x26a>
 8001ff2:	2305      	movs	r3, #5
 8001ff4:	e023      	b.n	800203e <HAL_GPIO_Init+0x26a>
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	e021      	b.n	800203e <HAL_GPIO_Init+0x26a>
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e01f      	b.n	800203e <HAL_GPIO_Init+0x26a>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e01d      	b.n	800203e <HAL_GPIO_Init+0x26a>
 8002002:	2301      	movs	r3, #1
 8002004:	e01b      	b.n	800203e <HAL_GPIO_Init+0x26a>
 8002006:	bf00      	nop
 8002008:	58000080 	.word	0x58000080
 800200c:	58024400 	.word	0x58024400
 8002010:	58000400 	.word	0x58000400
 8002014:	58020000 	.word	0x58020000
 8002018:	58020400 	.word	0x58020400
 800201c:	58020800 	.word	0x58020800
 8002020:	58020c00 	.word	0x58020c00
 8002024:	58021000 	.word	0x58021000
 8002028:	58021400 	.word	0x58021400
 800202c:	58021800 	.word	0x58021800
 8002030:	58021c00 	.word	0x58021c00
 8002034:	58022000 	.word	0x58022000
 8002038:	58022400 	.word	0x58022400
 800203c:	2300      	movs	r3, #0
 800203e:	69fa      	ldr	r2, [r7, #28]
 8002040:	f002 0203 	and.w	r2, r2, #3
 8002044:	0092      	lsls	r2, r2, #2
 8002046:	4093      	lsls	r3, r2
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800204e:	4938      	ldr	r1, [pc, #224]	; (8002130 <HAL_GPIO_Init+0x35c>)
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	089b      	lsrs	r3, r3, #2
 8002054:	3302      	adds	r3, #2
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800205c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	43db      	mvns	r3, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4013      	ands	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002082:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800208a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	43db      	mvns	r3, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80020b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	3301      	adds	r3, #1
 8002110:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	fa22 f303 	lsr.w	r3, r2, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	f47f ae63 	bne.w	8001de8 <HAL_GPIO_Init+0x14>
  }
}
 8002122:	bf00      	nop
 8002124:	bf00      	nop
 8002126:	3724      	adds	r7, #36	; 0x24
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	58000400 	.word	0x58000400

08002134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	460b      	mov	r3, r1
 800213e:	807b      	strh	r3, [r7, #2]
 8002140:	4613      	mov	r3, r2
 8002142:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002144:	787b      	ldrb	r3, [r7, #1]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800214a:	887a      	ldrh	r2, [r7, #2]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002150:	e003      	b.n	800215a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002152:	887b      	ldrh	r3, [r7, #2]
 8002154:	041a      	lsls	r2, r3, #16
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	619a      	str	r2, [r3, #24]
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002166:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002168:	b08f      	sub	sp, #60	; 0x3c
 800216a:	af0a      	add	r7, sp, #40	; 0x28
 800216c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e116      	b.n	80023a6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d106      	bne.n	8002198 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7fe fe1e 	bl	8000dd4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2203      	movs	r2, #3
 800219c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d102      	bne.n	80021b2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f003 fd68 	bl	8005c8c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	603b      	str	r3, [r7, #0]
 80021c2:	687e      	ldr	r6, [r7, #4]
 80021c4:	466d      	mov	r5, sp
 80021c6:	f106 0410 	add.w	r4, r6, #16
 80021ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80021da:	1d33      	adds	r3, r6, #4
 80021dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021de:	6838      	ldr	r0, [r7, #0]
 80021e0:	f003 fce6 	bl	8005bb0 <USB_CoreInit>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d005      	beq.n	80021f6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2202      	movs	r2, #2
 80021ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e0d7      	b.n	80023a6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2100      	movs	r1, #0
 80021fc:	4618      	mov	r0, r3
 80021fe:	f003 fd56 	bl	8005cae <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002202:	2300      	movs	r3, #0
 8002204:	73fb      	strb	r3, [r7, #15]
 8002206:	e04a      	b.n	800229e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002208:	7bfa      	ldrb	r2, [r7, #15]
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	4613      	mov	r3, r2
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	4413      	add	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	333d      	adds	r3, #61	; 0x3d
 8002218:	2201      	movs	r2, #1
 800221a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800221c:	7bfa      	ldrb	r2, [r7, #15]
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	4613      	mov	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	4413      	add	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	440b      	add	r3, r1
 800222a:	333c      	adds	r3, #60	; 0x3c
 800222c:	7bfa      	ldrb	r2, [r7, #15]
 800222e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002230:	7bfa      	ldrb	r2, [r7, #15]
 8002232:	7bfb      	ldrb	r3, [r7, #15]
 8002234:	b298      	uxth	r0, r3
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	4413      	add	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	440b      	add	r3, r1
 8002242:	3344      	adds	r3, #68	; 0x44
 8002244:	4602      	mov	r2, r0
 8002246:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002248:	7bfa      	ldrb	r2, [r7, #15]
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4413      	add	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	3340      	adds	r3, #64	; 0x40
 8002258:	2200      	movs	r2, #0
 800225a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800225c:	7bfa      	ldrb	r2, [r7, #15]
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	4613      	mov	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	4413      	add	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	440b      	add	r3, r1
 800226a:	3348      	adds	r3, #72	; 0x48
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002270:	7bfa      	ldrb	r2, [r7, #15]
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	4413      	add	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	334c      	adds	r3, #76	; 0x4c
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002284:	7bfa      	ldrb	r2, [r7, #15]
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	4613      	mov	r3, r2
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	4413      	add	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	440b      	add	r3, r1
 8002292:	3354      	adds	r3, #84	; 0x54
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002298:	7bfb      	ldrb	r3, [r7, #15]
 800229a:	3301      	adds	r3, #1
 800229c:	73fb      	strb	r3, [r7, #15]
 800229e:	7bfa      	ldrb	r2, [r7, #15]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d3af      	bcc.n	8002208 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a8:	2300      	movs	r3, #0
 80022aa:	73fb      	strb	r3, [r7, #15]
 80022ac:	e044      	b.n	8002338 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022ae:	7bfa      	ldrb	r2, [r7, #15]
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	4413      	add	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	440b      	add	r3, r1
 80022bc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80022c0:	2200      	movs	r2, #0
 80022c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022c4:	7bfa      	ldrb	r2, [r7, #15]
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	4413      	add	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80022d6:	7bfa      	ldrb	r2, [r7, #15]
 80022d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022da:	7bfa      	ldrb	r2, [r7, #15]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4413      	add	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	440b      	add	r3, r1
 80022e8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80022ec:	2200      	movs	r2, #0
 80022ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022f0:	7bfa      	ldrb	r2, [r7, #15]
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	4613      	mov	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	4413      	add	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002306:	7bfa      	ldrb	r2, [r7, #15]
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	4413      	add	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	440b      	add	r3, r1
 8002314:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800231c:	7bfa      	ldrb	r2, [r7, #15]
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	4413      	add	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002332:	7bfb      	ldrb	r3, [r7, #15]
 8002334:	3301      	adds	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
 8002338:	7bfa      	ldrb	r2, [r7, #15]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	429a      	cmp	r2, r3
 8002340:	d3b5      	bcc.n	80022ae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	603b      	str	r3, [r7, #0]
 8002348:	687e      	ldr	r6, [r7, #4]
 800234a:	466d      	mov	r5, sp
 800234c:	f106 0410 	add.w	r4, r6, #16
 8002350:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002352:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002354:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002356:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002358:	e894 0003 	ldmia.w	r4, {r0, r1}
 800235c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002360:	1d33      	adds	r3, r6, #4
 8002362:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002364:	6838      	ldr	r0, [r7, #0]
 8002366:	f003 fcef 	bl	8005d48 <USB_DevInit>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e014      	b.n	80023a6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	2b01      	cmp	r3, #1
 8002392:	d102      	bne.n	800239a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 f80b 	bl	80023b0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f003 fead 	bl	80060fe <USB_DevDisconnect>

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080023b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023de:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <HAL_PCDEx_ActivateLPM+0x44>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	10000003 	.word	0x10000003

080023f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002400:	4b19      	ldr	r3, [pc, #100]	; (8002468 <HAL_PWREx_ConfigSupply+0x70>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	2b04      	cmp	r3, #4
 800240a:	d00a      	beq.n	8002422 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800240c:	4b16      	ldr	r3, [pc, #88]	; (8002468 <HAL_PWREx_ConfigSupply+0x70>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	429a      	cmp	r2, r3
 8002418:	d001      	beq.n	800241e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e01f      	b.n	800245e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800241e:	2300      	movs	r3, #0
 8002420:	e01d      	b.n	800245e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002422:	4b11      	ldr	r3, [pc, #68]	; (8002468 <HAL_PWREx_ConfigSupply+0x70>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f023 0207 	bic.w	r2, r3, #7
 800242a:	490f      	ldr	r1, [pc, #60]	; (8002468 <HAL_PWREx_ConfigSupply+0x70>)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4313      	orrs	r3, r2
 8002430:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002432:	f7fe ff77 	bl	8001324 <HAL_GetTick>
 8002436:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002438:	e009      	b.n	800244e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800243a:	f7fe ff73 	bl	8001324 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002448:	d901      	bls.n	800244e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e007      	b.n	800245e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800244e:	4b06      	ldr	r3, [pc, #24]	; (8002468 <HAL_PWREx_ConfigSupply+0x70>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800245a:	d1ee      	bne.n	800243a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	58024800 	.word	0x58024800

0800246c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002470:	4b05      	ldr	r3, [pc, #20]	; (8002488 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	4a04      	ldr	r2, [pc, #16]	; (8002488 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002476:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800247a:	60d3      	str	r3, [r2, #12]
}
 800247c:	bf00      	nop
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	58024800 	.word	0x58024800

0800248c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08c      	sub	sp, #48	; 0x30
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d102      	bne.n	80024a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	f000 bc1d 	b.w	8002cda <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 8087 	beq.w	80025bc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ae:	4b99      	ldr	r3, [pc, #612]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024b8:	4b96      	ldr	r3, [pc, #600]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 80024ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024bc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80024be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c0:	2b10      	cmp	r3, #16
 80024c2:	d007      	beq.n	80024d4 <HAL_RCC_OscConfig+0x48>
 80024c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c6:	2b18      	cmp	r3, #24
 80024c8:	d110      	bne.n	80024ec <HAL_RCC_OscConfig+0x60>
 80024ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d10b      	bne.n	80024ec <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d4:	4b8f      	ldr	r3, [pc, #572]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d06c      	beq.n	80025ba <HAL_RCC_OscConfig+0x12e>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d168      	bne.n	80025ba <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e3f6      	b.n	8002cda <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f4:	d106      	bne.n	8002504 <HAL_RCC_OscConfig+0x78>
 80024f6:	4b87      	ldr	r3, [pc, #540]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a86      	ldr	r2, [pc, #536]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 80024fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	e02e      	b.n	8002562 <HAL_RCC_OscConfig+0xd6>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10c      	bne.n	8002526 <HAL_RCC_OscConfig+0x9a>
 800250c:	4b81      	ldr	r3, [pc, #516]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a80      	ldr	r2, [pc, #512]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 8002512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	4b7e      	ldr	r3, [pc, #504]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a7d      	ldr	r2, [pc, #500]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 800251e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002522:	6013      	str	r3, [r2, #0]
 8002524:	e01d      	b.n	8002562 <HAL_RCC_OscConfig+0xd6>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800252e:	d10c      	bne.n	800254a <HAL_RCC_OscConfig+0xbe>
 8002530:	4b78      	ldr	r3, [pc, #480]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a77      	ldr	r2, [pc, #476]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 8002536:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800253a:	6013      	str	r3, [r2, #0]
 800253c:	4b75      	ldr	r3, [pc, #468]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a74      	ldr	r2, [pc, #464]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 8002542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	e00b      	b.n	8002562 <HAL_RCC_OscConfig+0xd6>
 800254a:	4b72      	ldr	r3, [pc, #456]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a71      	ldr	r2, [pc, #452]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 8002550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	4b6f      	ldr	r3, [pc, #444]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a6e      	ldr	r2, [pc, #440]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 800255c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002560:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d013      	beq.n	8002592 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256a:	f7fe fedb 	bl	8001324 <HAL_GetTick>
 800256e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002572:	f7fe fed7 	bl	8001324 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b64      	cmp	r3, #100	; 0x64
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e3aa      	b.n	8002cda <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002584:	4b63      	ldr	r3, [pc, #396]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0f0      	beq.n	8002572 <HAL_RCC_OscConfig+0xe6>
 8002590:	e014      	b.n	80025bc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002592:	f7fe fec7 	bl	8001324 <HAL_GetTick>
 8002596:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800259a:	f7fe fec3 	bl	8001324 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b64      	cmp	r3, #100	; 0x64
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e396      	b.n	8002cda <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025ac:	4b59      	ldr	r3, [pc, #356]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1f0      	bne.n	800259a <HAL_RCC_OscConfig+0x10e>
 80025b8:	e000      	b.n	80025bc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 80cb 	beq.w	8002760 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025ca:	4b52      	ldr	r3, [pc, #328]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025d2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025d4:	4b4f      	ldr	r3, [pc, #316]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 80025d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d007      	beq.n	80025f0 <HAL_RCC_OscConfig+0x164>
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	2b18      	cmp	r3, #24
 80025e4:	d156      	bne.n	8002694 <HAL_RCC_OscConfig+0x208>
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	f003 0303 	and.w	r3, r3, #3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d151      	bne.n	8002694 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025f0:	4b48      	ldr	r3, [pc, #288]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_RCC_OscConfig+0x17c>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e368      	b.n	8002cda <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002608:	4b42      	ldr	r3, [pc, #264]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f023 0219 	bic.w	r2, r3, #25
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	493f      	ldr	r1, [pc, #252]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 8002616:	4313      	orrs	r3, r2
 8002618:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800261a:	f7fe fe83 	bl	8001324 <HAL_GetTick>
 800261e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002622:	f7fe fe7f 	bl	8001324 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e352      	b.n	8002cda <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002634:	4b37      	ldr	r3, [pc, #220]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0f0      	beq.n	8002622 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002640:	f7fe fea0 	bl	8001384 <HAL_GetREVID>
 8002644:	4603      	mov	r3, r0
 8002646:	f241 0203 	movw	r2, #4099	; 0x1003
 800264a:	4293      	cmp	r3, r2
 800264c:	d817      	bhi.n	800267e <HAL_RCC_OscConfig+0x1f2>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	2b40      	cmp	r3, #64	; 0x40
 8002654:	d108      	bne.n	8002668 <HAL_RCC_OscConfig+0x1dc>
 8002656:	4b2f      	ldr	r3, [pc, #188]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800265e:	4a2d      	ldr	r2, [pc, #180]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 8002660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002664:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002666:	e07b      	b.n	8002760 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002668:	4b2a      	ldr	r3, [pc, #168]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	031b      	lsls	r3, r3, #12
 8002676:	4927      	ldr	r1, [pc, #156]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 8002678:	4313      	orrs	r3, r2
 800267a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800267c:	e070      	b.n	8002760 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267e:	4b25      	ldr	r3, [pc, #148]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	061b      	lsls	r3, r3, #24
 800268c:	4921      	ldr	r1, [pc, #132]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 800268e:	4313      	orrs	r3, r2
 8002690:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002692:	e065      	b.n	8002760 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d048      	beq.n	800272e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800269c:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f023 0219 	bic.w	r2, r3, #25
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	491a      	ldr	r1, [pc, #104]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ae:	f7fe fe39 	bl	8001324 <HAL_GetTick>
 80026b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026b6:	f7fe fe35 	bl	8001324 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e308      	b.n	8002cda <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026c8:	4b12      	ldr	r3, [pc, #72]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0f0      	beq.n	80026b6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d4:	f7fe fe56 	bl	8001384 <HAL_GetREVID>
 80026d8:	4603      	mov	r3, r0
 80026da:	f241 0203 	movw	r2, #4099	; 0x1003
 80026de:	4293      	cmp	r3, r2
 80026e0:	d81a      	bhi.n	8002718 <HAL_RCC_OscConfig+0x28c>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	2b40      	cmp	r3, #64	; 0x40
 80026e8:	d108      	bne.n	80026fc <HAL_RCC_OscConfig+0x270>
 80026ea:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80026f2:	4a08      	ldr	r2, [pc, #32]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 80026f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f8:	6053      	str	r3, [r2, #4]
 80026fa:	e031      	b.n	8002760 <HAL_RCC_OscConfig+0x2d4>
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	031b      	lsls	r3, r3, #12
 800270a:	4902      	ldr	r1, [pc, #8]	; (8002714 <HAL_RCC_OscConfig+0x288>)
 800270c:	4313      	orrs	r3, r2
 800270e:	604b      	str	r3, [r1, #4]
 8002710:	e026      	b.n	8002760 <HAL_RCC_OscConfig+0x2d4>
 8002712:	bf00      	nop
 8002714:	58024400 	.word	0x58024400
 8002718:	4b9a      	ldr	r3, [pc, #616]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	061b      	lsls	r3, r3, #24
 8002726:	4997      	ldr	r1, [pc, #604]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 8002728:	4313      	orrs	r3, r2
 800272a:	604b      	str	r3, [r1, #4]
 800272c:	e018      	b.n	8002760 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800272e:	4b95      	ldr	r3, [pc, #596]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a94      	ldr	r2, [pc, #592]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 8002734:	f023 0301 	bic.w	r3, r3, #1
 8002738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273a:	f7fe fdf3 	bl	8001324 <HAL_GetTick>
 800273e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002742:	f7fe fdef 	bl	8001324 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e2c2      	b.n	8002cda <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002754:	4b8b      	ldr	r3, [pc, #556]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1f0      	bne.n	8002742 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0310 	and.w	r3, r3, #16
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 80a9 	beq.w	80028c0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800276e:	4b85      	ldr	r3, [pc, #532]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002776:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002778:	4b82      	ldr	r3, [pc, #520]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 800277a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	2b08      	cmp	r3, #8
 8002782:	d007      	beq.n	8002794 <HAL_RCC_OscConfig+0x308>
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	2b18      	cmp	r3, #24
 8002788:	d13a      	bne.n	8002800 <HAL_RCC_OscConfig+0x374>
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f003 0303 	and.w	r3, r3, #3
 8002790:	2b01      	cmp	r3, #1
 8002792:	d135      	bne.n	8002800 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002794:	4b7b      	ldr	r3, [pc, #492]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_RCC_OscConfig+0x320>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	2b80      	cmp	r3, #128	; 0x80
 80027a6:	d001      	beq.n	80027ac <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e296      	b.n	8002cda <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027ac:	f7fe fdea 	bl	8001384 <HAL_GetREVID>
 80027b0:	4603      	mov	r3, r0
 80027b2:	f241 0203 	movw	r2, #4099	; 0x1003
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d817      	bhi.n	80027ea <HAL_RCC_OscConfig+0x35e>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	2b20      	cmp	r3, #32
 80027c0:	d108      	bne.n	80027d4 <HAL_RCC_OscConfig+0x348>
 80027c2:	4b70      	ldr	r3, [pc, #448]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80027ca:	4a6e      	ldr	r2, [pc, #440]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 80027cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80027d0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027d2:	e075      	b.n	80028c0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027d4:	4b6b      	ldr	r3, [pc, #428]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	069b      	lsls	r3, r3, #26
 80027e2:	4968      	ldr	r1, [pc, #416]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027e8:	e06a      	b.n	80028c0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027ea:	4b66      	ldr	r3, [pc, #408]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	061b      	lsls	r3, r3, #24
 80027f8:	4962      	ldr	r1, [pc, #392]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027fe:	e05f      	b.n	80028c0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d042      	beq.n	800288e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002808:	4b5e      	ldr	r3, [pc, #376]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a5d      	ldr	r2, [pc, #372]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 800280e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002814:	f7fe fd86 	bl	8001324 <HAL_GetTick>
 8002818:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800281c:	f7fe fd82 	bl	8001324 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e255      	b.n	8002cda <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800282e:	4b55      	ldr	r3, [pc, #340]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f0      	beq.n	800281c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800283a:	f7fe fda3 	bl	8001384 <HAL_GetREVID>
 800283e:	4603      	mov	r3, r0
 8002840:	f241 0203 	movw	r2, #4099	; 0x1003
 8002844:	4293      	cmp	r3, r2
 8002846:	d817      	bhi.n	8002878 <HAL_RCC_OscConfig+0x3ec>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	2b20      	cmp	r3, #32
 800284e:	d108      	bne.n	8002862 <HAL_RCC_OscConfig+0x3d6>
 8002850:	4b4c      	ldr	r3, [pc, #304]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002858:	4a4a      	ldr	r2, [pc, #296]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 800285a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800285e:	6053      	str	r3, [r2, #4]
 8002860:	e02e      	b.n	80028c0 <HAL_RCC_OscConfig+0x434>
 8002862:	4b48      	ldr	r3, [pc, #288]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	069b      	lsls	r3, r3, #26
 8002870:	4944      	ldr	r1, [pc, #272]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 8002872:	4313      	orrs	r3, r2
 8002874:	604b      	str	r3, [r1, #4]
 8002876:	e023      	b.n	80028c0 <HAL_RCC_OscConfig+0x434>
 8002878:	4b42      	ldr	r3, [pc, #264]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	061b      	lsls	r3, r3, #24
 8002886:	493f      	ldr	r1, [pc, #252]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 8002888:	4313      	orrs	r3, r2
 800288a:	60cb      	str	r3, [r1, #12]
 800288c:	e018      	b.n	80028c0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800288e:	4b3d      	ldr	r3, [pc, #244]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a3c      	ldr	r2, [pc, #240]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 8002894:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002898:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289a:	f7fe fd43 	bl	8001324 <HAL_GetTick>
 800289e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80028a2:	f7fe fd3f 	bl	8001324 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e212      	b.n	8002cda <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028b4:	4b33      	ldr	r3, [pc, #204]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f0      	bne.n	80028a2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0308 	and.w	r3, r3, #8
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d036      	beq.n	800293a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d019      	beq.n	8002908 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028d4:	4b2b      	ldr	r3, [pc, #172]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 80028d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d8:	4a2a      	ldr	r2, [pc, #168]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e0:	f7fe fd20 	bl	8001324 <HAL_GetTick>
 80028e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028e8:	f7fe fd1c 	bl	8001324 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e1ef      	b.n	8002cda <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028fa:	4b22      	ldr	r3, [pc, #136]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 80028fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCC_OscConfig+0x45c>
 8002906:	e018      	b.n	800293a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002908:	4b1e      	ldr	r3, [pc, #120]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 800290a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800290c:	4a1d      	ldr	r2, [pc, #116]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 800290e:	f023 0301 	bic.w	r3, r3, #1
 8002912:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002914:	f7fe fd06 	bl	8001324 <HAL_GetTick>
 8002918:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800291c:	f7fe fd02 	bl	8001324 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e1d5      	b.n	8002cda <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800292e:	4b15      	ldr	r3, [pc, #84]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 8002930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0320 	and.w	r3, r3, #32
 8002942:	2b00      	cmp	r3, #0
 8002944:	d039      	beq.n	80029ba <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d01c      	beq.n	8002988 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800294e:	4b0d      	ldr	r3, [pc, #52]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a0c      	ldr	r2, [pc, #48]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 8002954:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002958:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800295a:	f7fe fce3 	bl	8001324 <HAL_GetTick>
 800295e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002962:	f7fe fcdf 	bl	8001324 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e1b2      	b.n	8002cda <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002974:	4b03      	ldr	r3, [pc, #12]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0f0      	beq.n	8002962 <HAL_RCC_OscConfig+0x4d6>
 8002980:	e01b      	b.n	80029ba <HAL_RCC_OscConfig+0x52e>
 8002982:	bf00      	nop
 8002984:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002988:	4b9b      	ldr	r3, [pc, #620]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a9a      	ldr	r2, [pc, #616]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 800298e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002992:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002994:	f7fe fcc6 	bl	8001324 <HAL_GetTick>
 8002998:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800299c:	f7fe fcc2 	bl	8001324 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e195      	b.n	8002cda <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029ae:	4b92      	ldr	r3, [pc, #584]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 8081 	beq.w	8002aca <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029c8:	4b8c      	ldr	r3, [pc, #560]	; (8002bfc <HAL_RCC_OscConfig+0x770>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a8b      	ldr	r2, [pc, #556]	; (8002bfc <HAL_RCC_OscConfig+0x770>)
 80029ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029d4:	f7fe fca6 	bl	8001324 <HAL_GetTick>
 80029d8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80029dc:	f7fe fca2 	bl	8001324 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b64      	cmp	r3, #100	; 0x64
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e175      	b.n	8002cda <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029ee:	4b83      	ldr	r3, [pc, #524]	; (8002bfc <HAL_RCC_OscConfig+0x770>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d106      	bne.n	8002a10 <HAL_RCC_OscConfig+0x584>
 8002a02:	4b7d      	ldr	r3, [pc, #500]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a06:	4a7c      	ldr	r2, [pc, #496]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a0e:	e02d      	b.n	8002a6c <HAL_RCC_OscConfig+0x5e0>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10c      	bne.n	8002a32 <HAL_RCC_OscConfig+0x5a6>
 8002a18:	4b77      	ldr	r3, [pc, #476]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1c:	4a76      	ldr	r2, [pc, #472]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002a1e:	f023 0301 	bic.w	r3, r3, #1
 8002a22:	6713      	str	r3, [r2, #112]	; 0x70
 8002a24:	4b74      	ldr	r3, [pc, #464]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a28:	4a73      	ldr	r2, [pc, #460]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002a2a:	f023 0304 	bic.w	r3, r3, #4
 8002a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a30:	e01c      	b.n	8002a6c <HAL_RCC_OscConfig+0x5e0>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	2b05      	cmp	r3, #5
 8002a38:	d10c      	bne.n	8002a54 <HAL_RCC_OscConfig+0x5c8>
 8002a3a:	4b6f      	ldr	r3, [pc, #444]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3e:	4a6e      	ldr	r2, [pc, #440]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002a40:	f043 0304 	orr.w	r3, r3, #4
 8002a44:	6713      	str	r3, [r2, #112]	; 0x70
 8002a46:	4b6c      	ldr	r3, [pc, #432]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4a:	4a6b      	ldr	r2, [pc, #428]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	6713      	str	r3, [r2, #112]	; 0x70
 8002a52:	e00b      	b.n	8002a6c <HAL_RCC_OscConfig+0x5e0>
 8002a54:	4b68      	ldr	r3, [pc, #416]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a58:	4a67      	ldr	r2, [pc, #412]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002a5a:	f023 0301 	bic.w	r3, r3, #1
 8002a5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a60:	4b65      	ldr	r3, [pc, #404]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a64:	4a64      	ldr	r2, [pc, #400]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002a66:	f023 0304 	bic.w	r3, r3, #4
 8002a6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d015      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a74:	f7fe fc56 	bl	8001324 <HAL_GetTick>
 8002a78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a7a:	e00a      	b.n	8002a92 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a7c:	f7fe fc52 	bl	8001324 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e123      	b.n	8002cda <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a92:	4b59      	ldr	r3, [pc, #356]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0ee      	beq.n	8002a7c <HAL_RCC_OscConfig+0x5f0>
 8002a9e:	e014      	b.n	8002aca <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa0:	f7fe fc40 	bl	8001324 <HAL_GetTick>
 8002aa4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002aa6:	e00a      	b.n	8002abe <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aa8:	f7fe fc3c 	bl	8001324 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e10d      	b.n	8002cda <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002abe:	4b4e      	ldr	r3, [pc, #312]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1ee      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 8102 	beq.w	8002cd8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002ad4:	4b48      	ldr	r3, [pc, #288]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002adc:	2b18      	cmp	r3, #24
 8002ade:	f000 80bd 	beq.w	8002c5c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	f040 809e 	bne.w	8002c28 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aec:	4b42      	ldr	r3, [pc, #264]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a41      	ldr	r2, [pc, #260]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002af2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002af6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af8:	f7fe fc14 	bl	8001324 <HAL_GetTick>
 8002afc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b00:	f7fe fc10 	bl	8001324 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e0e3      	b.n	8002cda <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b12:	4b39      	ldr	r3, [pc, #228]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f0      	bne.n	8002b00 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b1e:	4b36      	ldr	r3, [pc, #216]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002b20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b22:	4b37      	ldr	r3, [pc, #220]	; (8002c00 <HAL_RCC_OscConfig+0x774>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b2e:	0112      	lsls	r2, r2, #4
 8002b30:	430a      	orrs	r2, r1
 8002b32:	4931      	ldr	r1, [pc, #196]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	628b      	str	r3, [r1, #40]	; 0x28
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b46:	3b01      	subs	r3, #1
 8002b48:	025b      	lsls	r3, r3, #9
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b52:	3b01      	subs	r3, #1
 8002b54:	041b      	lsls	r3, r3, #16
 8002b56:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b60:	3b01      	subs	r3, #1
 8002b62:	061b      	lsls	r3, r3, #24
 8002b64:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002b68:	4923      	ldr	r1, [pc, #140]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002b6e:	4b22      	ldr	r3, [pc, #136]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b72:	4a21      	ldr	r2, [pc, #132]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002b74:	f023 0301 	bic.w	r3, r3, #1
 8002b78:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b7a:	4b1f      	ldr	r3, [pc, #124]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002b7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b7e:	4b21      	ldr	r3, [pc, #132]	; (8002c04 <HAL_RCC_OscConfig+0x778>)
 8002b80:	4013      	ands	r3, r2
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b86:	00d2      	lsls	r2, r2, #3
 8002b88:	491b      	ldr	r1, [pc, #108]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002b8e:	4b1a      	ldr	r3, [pc, #104]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b92:	f023 020c 	bic.w	r2, r3, #12
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	4917      	ldr	r1, [pc, #92]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ba0:	4b15      	ldr	r3, [pc, #84]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba4:	f023 0202 	bic.w	r2, r3, #2
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bac:	4912      	ldr	r1, [pc, #72]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002bb2:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb6:	4a10      	ldr	r2, [pc, #64]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bbc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bbe:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc2:	4a0d      	ldr	r2, [pc, #52]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bc8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002bca:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bce:	4a0a      	ldr	r2, [pc, #40]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002bd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bd4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002bd6:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bda:	4a07      	ldr	r2, [pc, #28]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002be2:	4b05      	ldr	r3, [pc, #20]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a04      	ldr	r2, [pc, #16]	; (8002bf8 <HAL_RCC_OscConfig+0x76c>)
 8002be8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bee:	f7fe fb99 	bl	8001324 <HAL_GetTick>
 8002bf2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bf4:	e011      	b.n	8002c1a <HAL_RCC_OscConfig+0x78e>
 8002bf6:	bf00      	nop
 8002bf8:	58024400 	.word	0x58024400
 8002bfc:	58024800 	.word	0x58024800
 8002c00:	fffffc0c 	.word	0xfffffc0c
 8002c04:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c08:	f7fe fb8c 	bl	8001324 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e05f      	b.n	8002cda <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c1a:	4b32      	ldr	r3, [pc, #200]	; (8002ce4 <HAL_RCC_OscConfig+0x858>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0f0      	beq.n	8002c08 <HAL_RCC_OscConfig+0x77c>
 8002c26:	e057      	b.n	8002cd8 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c28:	4b2e      	ldr	r3, [pc, #184]	; (8002ce4 <HAL_RCC_OscConfig+0x858>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a2d      	ldr	r2, [pc, #180]	; (8002ce4 <HAL_RCC_OscConfig+0x858>)
 8002c2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c34:	f7fe fb76 	bl	8001324 <HAL_GetTick>
 8002c38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c3c:	f7fe fb72 	bl	8001324 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e045      	b.n	8002cda <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c4e:	4b25      	ldr	r3, [pc, #148]	; (8002ce4 <HAL_RCC_OscConfig+0x858>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x7b0>
 8002c5a:	e03d      	b.n	8002cd8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002c5c:	4b21      	ldr	r3, [pc, #132]	; (8002ce4 <HAL_RCC_OscConfig+0x858>)
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c60:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002c62:	4b20      	ldr	r3, [pc, #128]	; (8002ce4 <HAL_RCC_OscConfig+0x858>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d031      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	f003 0203 	and.w	r2, r3, #3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d12a      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	091b      	lsrs	r3, r3, #4
 8002c82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d122      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c98:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d11a      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	0a5b      	lsrs	r3, r3, #9
 8002ca2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002caa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d111      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	0c1b      	lsrs	r3, r3, #16
 8002cb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d108      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	0e1b      	lsrs	r3, r3, #24
 8002cc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cce:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d001      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e000      	b.n	8002cda <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3730      	adds	r7, #48	; 0x30
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	58024400 	.word	0x58024400

08002ce8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e19c      	b.n	8003036 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cfc:	4b8a      	ldr	r3, [pc, #552]	; (8002f28 <HAL_RCC_ClockConfig+0x240>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 030f 	and.w	r3, r3, #15
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d910      	bls.n	8002d2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d0a:	4b87      	ldr	r3, [pc, #540]	; (8002f28 <HAL_RCC_ClockConfig+0x240>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f023 020f 	bic.w	r2, r3, #15
 8002d12:	4985      	ldr	r1, [pc, #532]	; (8002f28 <HAL_RCC_ClockConfig+0x240>)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1a:	4b83      	ldr	r3, [pc, #524]	; (8002f28 <HAL_RCC_ClockConfig+0x240>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d001      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e184      	b.n	8003036 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d010      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691a      	ldr	r2, [r3, #16]
 8002d3c:	4b7b      	ldr	r3, [pc, #492]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d908      	bls.n	8002d5a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d48:	4b78      	ldr	r3, [pc, #480]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	4975      	ldr	r1, [pc, #468]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d010      	beq.n	8002d88 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	695a      	ldr	r2, [r3, #20]
 8002d6a:	4b70      	ldr	r3, [pc, #448]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d908      	bls.n	8002d88 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d76:	4b6d      	ldr	r3, [pc, #436]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	496a      	ldr	r1, [pc, #424]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0310 	and.w	r3, r3, #16
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d010      	beq.n	8002db6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	699a      	ldr	r2, [r3, #24]
 8002d98:	4b64      	ldr	r3, [pc, #400]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d908      	bls.n	8002db6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002da4:	4b61      	ldr	r3, [pc, #388]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	495e      	ldr	r1, [pc, #376]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0320 	and.w	r3, r3, #32
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d010      	beq.n	8002de4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69da      	ldr	r2, [r3, #28]
 8002dc6:	4b59      	ldr	r3, [pc, #356]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d908      	bls.n	8002de4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002dd2:	4b56      	ldr	r3, [pc, #344]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	4953      	ldr	r1, [pc, #332]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d010      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	4b4d      	ldr	r3, [pc, #308]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	f003 030f 	and.w	r3, r3, #15
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d908      	bls.n	8002e12 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e00:	4b4a      	ldr	r3, [pc, #296]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	f023 020f 	bic.w	r2, r3, #15
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	4947      	ldr	r1, [pc, #284]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d055      	beq.n	8002eca <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002e1e:	4b43      	ldr	r3, [pc, #268]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	4940      	ldr	r1, [pc, #256]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d107      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e38:	4b3c      	ldr	r3, [pc, #240]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d121      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e0f6      	b.n	8003036 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b03      	cmp	r3, #3
 8002e4e:	d107      	bne.n	8002e60 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e50:	4b36      	ldr	r3, [pc, #216]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d115      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0ea      	b.n	8003036 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d107      	bne.n	8002e78 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e68:	4b30      	ldr	r3, [pc, #192]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d109      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e0de      	b.n	8003036 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e78:	4b2c      	ldr	r3, [pc, #176]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e0d6      	b.n	8003036 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e88:	4b28      	ldr	r3, [pc, #160]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	f023 0207 	bic.w	r2, r3, #7
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	4925      	ldr	r1, [pc, #148]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9a:	f7fe fa43 	bl	8001324 <HAL_GetTick>
 8002e9e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea0:	e00a      	b.n	8002eb8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea2:	f7fe fa3f 	bl	8001324 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e0be      	b.n	8003036 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eb8:	4b1c      	ldr	r3, [pc, #112]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d1eb      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d010      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68da      	ldr	r2, [r3, #12]
 8002eda:	4b14      	ldr	r3, [pc, #80]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d208      	bcs.n	8002ef8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee6:	4b11      	ldr	r3, [pc, #68]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	f023 020f 	bic.w	r2, r3, #15
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	490e      	ldr	r1, [pc, #56]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ef8:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <HAL_RCC_ClockConfig+0x240>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 030f 	and.w	r3, r3, #15
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d214      	bcs.n	8002f30 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f06:	4b08      	ldr	r3, [pc, #32]	; (8002f28 <HAL_RCC_ClockConfig+0x240>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f023 020f 	bic.w	r2, r3, #15
 8002f0e:	4906      	ldr	r1, [pc, #24]	; (8002f28 <HAL_RCC_ClockConfig+0x240>)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f16:	4b04      	ldr	r3, [pc, #16]	; (8002f28 <HAL_RCC_ClockConfig+0x240>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d005      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e086      	b.n	8003036 <HAL_RCC_ClockConfig+0x34e>
 8002f28:	52002000 	.word	0x52002000
 8002f2c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d010      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	691a      	ldr	r2, [r3, #16]
 8002f40:	4b3f      	ldr	r3, [pc, #252]	; (8003040 <HAL_RCC_ClockConfig+0x358>)
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d208      	bcs.n	8002f5e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f4c:	4b3c      	ldr	r3, [pc, #240]	; (8003040 <HAL_RCC_ClockConfig+0x358>)
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	4939      	ldr	r1, [pc, #228]	; (8003040 <HAL_RCC_ClockConfig+0x358>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d010      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695a      	ldr	r2, [r3, #20]
 8002f6e:	4b34      	ldr	r3, [pc, #208]	; (8003040 <HAL_RCC_ClockConfig+0x358>)
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d208      	bcs.n	8002f8c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f7a:	4b31      	ldr	r3, [pc, #196]	; (8003040 <HAL_RCC_ClockConfig+0x358>)
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	492e      	ldr	r1, [pc, #184]	; (8003040 <HAL_RCC_ClockConfig+0x358>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0310 	and.w	r3, r3, #16
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d010      	beq.n	8002fba <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699a      	ldr	r2, [r3, #24]
 8002f9c:	4b28      	ldr	r3, [pc, #160]	; (8003040 <HAL_RCC_ClockConfig+0x358>)
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d208      	bcs.n	8002fba <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002fa8:	4b25      	ldr	r3, [pc, #148]	; (8003040 <HAL_RCC_ClockConfig+0x358>)
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	4922      	ldr	r1, [pc, #136]	; (8003040 <HAL_RCC_ClockConfig+0x358>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0320 	and.w	r3, r3, #32
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d010      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69da      	ldr	r2, [r3, #28]
 8002fca:	4b1d      	ldr	r3, [pc, #116]	; (8003040 <HAL_RCC_ClockConfig+0x358>)
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d208      	bcs.n	8002fe8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002fd6:	4b1a      	ldr	r3, [pc, #104]	; (8003040 <HAL_RCC_ClockConfig+0x358>)
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	4917      	ldr	r1, [pc, #92]	; (8003040 <HAL_RCC_ClockConfig+0x358>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002fe8:	f000 f834 	bl	8003054 <HAL_RCC_GetSysClockFreq>
 8002fec:	4602      	mov	r2, r0
 8002fee:	4b14      	ldr	r3, [pc, #80]	; (8003040 <HAL_RCC_ClockConfig+0x358>)
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	0a1b      	lsrs	r3, r3, #8
 8002ff4:	f003 030f 	and.w	r3, r3, #15
 8002ff8:	4912      	ldr	r1, [pc, #72]	; (8003044 <HAL_RCC_ClockConfig+0x35c>)
 8002ffa:	5ccb      	ldrb	r3, [r1, r3]
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	fa22 f303 	lsr.w	r3, r2, r3
 8003004:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003006:	4b0e      	ldr	r3, [pc, #56]	; (8003040 <HAL_RCC_ClockConfig+0x358>)
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	4a0d      	ldr	r2, [pc, #52]	; (8003044 <HAL_RCC_ClockConfig+0x35c>)
 8003010:	5cd3      	ldrb	r3, [r2, r3]
 8003012:	f003 031f 	and.w	r3, r3, #31
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	fa22 f303 	lsr.w	r3, r2, r3
 800301c:	4a0a      	ldr	r2, [pc, #40]	; (8003048 <HAL_RCC_ClockConfig+0x360>)
 800301e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003020:	4a0a      	ldr	r2, [pc, #40]	; (800304c <HAL_RCC_ClockConfig+0x364>)
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003026:	4b0a      	ldr	r3, [pc, #40]	; (8003050 <HAL_RCC_ClockConfig+0x368>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7fe f930 	bl	8001290 <HAL_InitTick>
 8003030:	4603      	mov	r3, r0
 8003032:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003034:	7bfb      	ldrb	r3, [r7, #15]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	58024400 	.word	0x58024400
 8003044:	08007294 	.word	0x08007294
 8003048:	24000004 	.word	0x24000004
 800304c:	24000000 	.word	0x24000000
 8003050:	24000008 	.word	0x24000008

08003054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003054:	b480      	push	{r7}
 8003056:	b089      	sub	sp, #36	; 0x24
 8003058:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800305a:	4bb3      	ldr	r3, [pc, #716]	; (8003328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003062:	2b18      	cmp	r3, #24
 8003064:	f200 8155 	bhi.w	8003312 <HAL_RCC_GetSysClockFreq+0x2be>
 8003068:	a201      	add	r2, pc, #4	; (adr r2, 8003070 <HAL_RCC_GetSysClockFreq+0x1c>)
 800306a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306e:	bf00      	nop
 8003070:	080030d5 	.word	0x080030d5
 8003074:	08003313 	.word	0x08003313
 8003078:	08003313 	.word	0x08003313
 800307c:	08003313 	.word	0x08003313
 8003080:	08003313 	.word	0x08003313
 8003084:	08003313 	.word	0x08003313
 8003088:	08003313 	.word	0x08003313
 800308c:	08003313 	.word	0x08003313
 8003090:	080030fb 	.word	0x080030fb
 8003094:	08003313 	.word	0x08003313
 8003098:	08003313 	.word	0x08003313
 800309c:	08003313 	.word	0x08003313
 80030a0:	08003313 	.word	0x08003313
 80030a4:	08003313 	.word	0x08003313
 80030a8:	08003313 	.word	0x08003313
 80030ac:	08003313 	.word	0x08003313
 80030b0:	08003101 	.word	0x08003101
 80030b4:	08003313 	.word	0x08003313
 80030b8:	08003313 	.word	0x08003313
 80030bc:	08003313 	.word	0x08003313
 80030c0:	08003313 	.word	0x08003313
 80030c4:	08003313 	.word	0x08003313
 80030c8:	08003313 	.word	0x08003313
 80030cc:	08003313 	.word	0x08003313
 80030d0:	08003107 	.word	0x08003107
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030d4:	4b94      	ldr	r3, [pc, #592]	; (8003328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d009      	beq.n	80030f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80030e0:	4b91      	ldr	r3, [pc, #580]	; (8003328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	08db      	lsrs	r3, r3, #3
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	4a90      	ldr	r2, [pc, #576]	; (800332c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030ec:	fa22 f303 	lsr.w	r3, r2, r3
 80030f0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80030f2:	e111      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80030f4:	4b8d      	ldr	r3, [pc, #564]	; (800332c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030f6:	61bb      	str	r3, [r7, #24]
    break;
 80030f8:	e10e      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80030fa:	4b8d      	ldr	r3, [pc, #564]	; (8003330 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030fc:	61bb      	str	r3, [r7, #24]
    break;
 80030fe:	e10b      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003100:	4b8c      	ldr	r3, [pc, #560]	; (8003334 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003102:	61bb      	str	r3, [r7, #24]
    break;
 8003104:	e108      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003106:	4b88      	ldr	r3, [pc, #544]	; (8003328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003110:	4b85      	ldr	r3, [pc, #532]	; (8003328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003114:	091b      	lsrs	r3, r3, #4
 8003116:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800311a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800311c:	4b82      	ldr	r3, [pc, #520]	; (8003328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003126:	4b80      	ldr	r3, [pc, #512]	; (8003328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800312a:	08db      	lsrs	r3, r3, #3
 800312c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	fb02 f303 	mul.w	r3, r2, r3
 8003136:	ee07 3a90 	vmov	s15, r3
 800313a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800313e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 80e1 	beq.w	800330c <HAL_RCC_GetSysClockFreq+0x2b8>
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	2b02      	cmp	r3, #2
 800314e:	f000 8083 	beq.w	8003258 <HAL_RCC_GetSysClockFreq+0x204>
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2b02      	cmp	r3, #2
 8003156:	f200 80a1 	bhi.w	800329c <HAL_RCC_GetSysClockFreq+0x248>
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <HAL_RCC_GetSysClockFreq+0x114>
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d056      	beq.n	8003214 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003166:	e099      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003168:	4b6f      	ldr	r3, [pc, #444]	; (8003328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0320 	and.w	r3, r3, #32
 8003170:	2b00      	cmp	r3, #0
 8003172:	d02d      	beq.n	80031d0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003174:	4b6c      	ldr	r3, [pc, #432]	; (8003328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	08db      	lsrs	r3, r3, #3
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	4a6b      	ldr	r2, [pc, #428]	; (800332c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003180:	fa22 f303 	lsr.w	r3, r2, r3
 8003184:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	ee07 3a90 	vmov	s15, r3
 800318c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	ee07 3a90 	vmov	s15, r3
 8003196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800319a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800319e:	4b62      	ldr	r3, [pc, #392]	; (8003328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031a6:	ee07 3a90 	vmov	s15, r3
 80031aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80031b2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003338 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80031ce:	e087      	b.n	80032e0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	ee07 3a90 	vmov	s15, r3
 80031d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031da:	eddf 6a58 	vldr	s13, [pc, #352]	; 800333c <HAL_RCC_GetSysClockFreq+0x2e8>
 80031de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031e2:	4b51      	ldr	r3, [pc, #324]	; (8003328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ea:	ee07 3a90 	vmov	s15, r3
 80031ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80031f6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003338 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003202:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800320a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800320e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003212:	e065      	b.n	80032e0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	ee07 3a90 	vmov	s15, r3
 800321a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800321e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003340 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003226:	4b40      	ldr	r3, [pc, #256]	; (8003328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800322e:	ee07 3a90 	vmov	s15, r3
 8003232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003236:	ed97 6a02 	vldr	s12, [r7, #8]
 800323a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003338 <HAL_RCC_GetSysClockFreq+0x2e4>
 800323e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003246:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800324a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800324e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003252:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003256:	e043      	b.n	80032e0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	ee07 3a90 	vmov	s15, r3
 800325e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003262:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003344 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800326a:	4b2f      	ldr	r3, [pc, #188]	; (8003328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003272:	ee07 3a90 	vmov	s15, r3
 8003276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800327a:	ed97 6a02 	vldr	s12, [r7, #8]
 800327e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003338 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800328a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800328e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003296:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800329a:	e021      	b.n	80032e0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	ee07 3a90 	vmov	s15, r3
 80032a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032a6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003340 <HAL_RCC_GetSysClockFreq+0x2ec>
 80032aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032ae:	4b1e      	ldr	r3, [pc, #120]	; (8003328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032b6:	ee07 3a90 	vmov	s15, r3
 80032ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032be:	ed97 6a02 	vldr	s12, [r7, #8]
 80032c2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003338 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032de:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80032e0:	4b11      	ldr	r3, [pc, #68]	; (8003328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e4:	0a5b      	lsrs	r3, r3, #9
 80032e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032ea:	3301      	adds	r3, #1
 80032ec:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	ee07 3a90 	vmov	s15, r3
 80032f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80032fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003304:	ee17 3a90 	vmov	r3, s15
 8003308:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800330a:	e005      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	61bb      	str	r3, [r7, #24]
    break;
 8003310:	e002      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003312:	4b07      	ldr	r3, [pc, #28]	; (8003330 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003314:	61bb      	str	r3, [r7, #24]
    break;
 8003316:	bf00      	nop
  }

  return sysclockfreq;
 8003318:	69bb      	ldr	r3, [r7, #24]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3724      	adds	r7, #36	; 0x24
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	58024400 	.word	0x58024400
 800332c:	03d09000 	.word	0x03d09000
 8003330:	003d0900 	.word	0x003d0900
 8003334:	007a1200 	.word	0x007a1200
 8003338:	46000000 	.word	0x46000000
 800333c:	4c742400 	.word	0x4c742400
 8003340:	4a742400 	.word	0x4a742400
 8003344:	4af42400 	.word	0x4af42400

08003348 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800334e:	f7ff fe81 	bl	8003054 <HAL_RCC_GetSysClockFreq>
 8003352:	4602      	mov	r2, r0
 8003354:	4b10      	ldr	r3, [pc, #64]	; (8003398 <HAL_RCC_GetHCLKFreq+0x50>)
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	0a1b      	lsrs	r3, r3, #8
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	490f      	ldr	r1, [pc, #60]	; (800339c <HAL_RCC_GetHCLKFreq+0x54>)
 8003360:	5ccb      	ldrb	r3, [r1, r3]
 8003362:	f003 031f 	and.w	r3, r3, #31
 8003366:	fa22 f303 	lsr.w	r3, r2, r3
 800336a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800336c:	4b0a      	ldr	r3, [pc, #40]	; (8003398 <HAL_RCC_GetHCLKFreq+0x50>)
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	f003 030f 	and.w	r3, r3, #15
 8003374:	4a09      	ldr	r2, [pc, #36]	; (800339c <HAL_RCC_GetHCLKFreq+0x54>)
 8003376:	5cd3      	ldrb	r3, [r2, r3]
 8003378:	f003 031f 	and.w	r3, r3, #31
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	fa22 f303 	lsr.w	r3, r2, r3
 8003382:	4a07      	ldr	r2, [pc, #28]	; (80033a0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003384:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003386:	4a07      	ldr	r2, [pc, #28]	; (80033a4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800338c:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <HAL_RCC_GetHCLKFreq+0x58>)
 800338e:	681b      	ldr	r3, [r3, #0]
}
 8003390:	4618      	mov	r0, r3
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	58024400 	.word	0x58024400
 800339c:	08007294 	.word	0x08007294
 80033a0:	24000004 	.word	0x24000004
 80033a4:	24000000 	.word	0x24000000

080033a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80033ac:	f7ff ffcc 	bl	8003348 <HAL_RCC_GetHCLKFreq>
 80033b0:	4602      	mov	r2, r0
 80033b2:	4b06      	ldr	r3, [pc, #24]	; (80033cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	091b      	lsrs	r3, r3, #4
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	4904      	ldr	r1, [pc, #16]	; (80033d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033be:	5ccb      	ldrb	r3, [r1, r3]
 80033c0:	f003 031f 	and.w	r3, r3, #31
 80033c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	58024400 	.word	0x58024400
 80033d0:	08007294 	.word	0x08007294

080033d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80033d8:	f7ff ffb6 	bl	8003348 <HAL_RCC_GetHCLKFreq>
 80033dc:	4602      	mov	r2, r0
 80033de:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	0a1b      	lsrs	r3, r3, #8
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	4904      	ldr	r1, [pc, #16]	; (80033fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80033ea:	5ccb      	ldrb	r3, [r1, r3]
 80033ec:	f003 031f 	and.w	r3, r3, #31
 80033f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	58024400 	.word	0x58024400
 80033fc:	08007294 	.word	0x08007294

08003400 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003408:	2300      	movs	r3, #0
 800340a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800340c:	2300      	movs	r3, #0
 800340e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d03f      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003420:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003424:	d02a      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003426:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800342a:	d824      	bhi.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800342c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003430:	d018      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003432:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003436:	d81e      	bhi.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800343c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003440:	d007      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003442:	e018      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003444:	4ba3      	ldr	r3, [pc, #652]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003448:	4aa2      	ldr	r2, [pc, #648]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800344a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800344e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003450:	e015      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3304      	adds	r3, #4
 8003456:	2102      	movs	r1, #2
 8003458:	4618      	mov	r0, r3
 800345a:	f001 f9d5 	bl	8004808 <RCCEx_PLL2_Config>
 800345e:	4603      	mov	r3, r0
 8003460:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003462:	e00c      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3324      	adds	r3, #36	; 0x24
 8003468:	2102      	movs	r1, #2
 800346a:	4618      	mov	r0, r3
 800346c:	f001 fa7e 	bl	800496c <RCCEx_PLL3_Config>
 8003470:	4603      	mov	r3, r0
 8003472:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003474:	e003      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	75fb      	strb	r3, [r7, #23]
      break;
 800347a:	e000      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800347c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800347e:	7dfb      	ldrb	r3, [r7, #23]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d109      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003484:	4b93      	ldr	r3, [pc, #588]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003488:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003490:	4990      	ldr	r1, [pc, #576]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003492:	4313      	orrs	r3, r2
 8003494:	650b      	str	r3, [r1, #80]	; 0x50
 8003496:	e001      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003498:	7dfb      	ldrb	r3, [r7, #23]
 800349a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d03d      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d826      	bhi.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80034b0:	a201      	add	r2, pc, #4	; (adr r2, 80034b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80034b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b6:	bf00      	nop
 80034b8:	080034cd 	.word	0x080034cd
 80034bc:	080034db 	.word	0x080034db
 80034c0:	080034ed 	.word	0x080034ed
 80034c4:	08003505 	.word	0x08003505
 80034c8:	08003505 	.word	0x08003505
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034cc:	4b81      	ldr	r3, [pc, #516]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d0:	4a80      	ldr	r2, [pc, #512]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034d8:	e015      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	3304      	adds	r3, #4
 80034de:	2100      	movs	r1, #0
 80034e0:	4618      	mov	r0, r3
 80034e2:	f001 f991 	bl	8004808 <RCCEx_PLL2_Config>
 80034e6:	4603      	mov	r3, r0
 80034e8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034ea:	e00c      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3324      	adds	r3, #36	; 0x24
 80034f0:	2100      	movs	r1, #0
 80034f2:	4618      	mov	r0, r3
 80034f4:	f001 fa3a 	bl	800496c <RCCEx_PLL3_Config>
 80034f8:	4603      	mov	r3, r0
 80034fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034fc:	e003      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	75fb      	strb	r3, [r7, #23]
      break;
 8003502:	e000      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003504:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003506:	7dfb      	ldrb	r3, [r7, #23]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d109      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800350c:	4b71      	ldr	r3, [pc, #452]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800350e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003510:	f023 0207 	bic.w	r2, r3, #7
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003518:	496e      	ldr	r1, [pc, #440]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800351a:	4313      	orrs	r3, r2
 800351c:	650b      	str	r3, [r1, #80]	; 0x50
 800351e:	e001      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003520:	7dfb      	ldrb	r3, [r7, #23]
 8003522:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800352c:	2b00      	cmp	r3, #0
 800352e:	d042      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003538:	d02b      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800353a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800353e:	d825      	bhi.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003540:	2bc0      	cmp	r3, #192	; 0xc0
 8003542:	d028      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003544:	2bc0      	cmp	r3, #192	; 0xc0
 8003546:	d821      	bhi.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003548:	2b80      	cmp	r3, #128	; 0x80
 800354a:	d016      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800354c:	2b80      	cmp	r3, #128	; 0x80
 800354e:	d81d      	bhi.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003550:	2b00      	cmp	r3, #0
 8003552:	d002      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003554:	2b40      	cmp	r3, #64	; 0x40
 8003556:	d007      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003558:	e018      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800355a:	4b5e      	ldr	r3, [pc, #376]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800355c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355e:	4a5d      	ldr	r2, [pc, #372]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003564:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003566:	e017      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3304      	adds	r3, #4
 800356c:	2100      	movs	r1, #0
 800356e:	4618      	mov	r0, r3
 8003570:	f001 f94a 	bl	8004808 <RCCEx_PLL2_Config>
 8003574:	4603      	mov	r3, r0
 8003576:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003578:	e00e      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	3324      	adds	r3, #36	; 0x24
 800357e:	2100      	movs	r1, #0
 8003580:	4618      	mov	r0, r3
 8003582:	f001 f9f3 	bl	800496c <RCCEx_PLL3_Config>
 8003586:	4603      	mov	r3, r0
 8003588:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800358a:	e005      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	75fb      	strb	r3, [r7, #23]
      break;
 8003590:	e002      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003592:	bf00      	nop
 8003594:	e000      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003596:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003598:	7dfb      	ldrb	r3, [r7, #23]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d109      	bne.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800359e:	4b4d      	ldr	r3, [pc, #308]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035aa:	494a      	ldr	r1, [pc, #296]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	650b      	str	r3, [r1, #80]	; 0x50
 80035b0:	e001      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b2:	7dfb      	ldrb	r3, [r7, #23]
 80035b4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d049      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80035c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035cc:	d030      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80035ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035d2:	d82a      	bhi.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80035d4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80035d8:	d02c      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80035da:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80035de:	d824      	bhi.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80035e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035e4:	d018      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80035e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ea:	d81e      	bhi.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80035f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035f4:	d007      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80035f6:	e018      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035f8:	4b36      	ldr	r3, [pc, #216]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fc:	4a35      	ldr	r2, [pc, #212]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003602:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003604:	e017      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	3304      	adds	r3, #4
 800360a:	2100      	movs	r1, #0
 800360c:	4618      	mov	r0, r3
 800360e:	f001 f8fb 	bl	8004808 <RCCEx_PLL2_Config>
 8003612:	4603      	mov	r3, r0
 8003614:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003616:	e00e      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3324      	adds	r3, #36	; 0x24
 800361c:	2100      	movs	r1, #0
 800361e:	4618      	mov	r0, r3
 8003620:	f001 f9a4 	bl	800496c <RCCEx_PLL3_Config>
 8003624:	4603      	mov	r3, r0
 8003626:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003628:	e005      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	75fb      	strb	r3, [r7, #23]
      break;
 800362e:	e002      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003630:	bf00      	nop
 8003632:	e000      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003634:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003636:	7dfb      	ldrb	r3, [r7, #23]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10a      	bne.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800363c:	4b25      	ldr	r3, [pc, #148]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800363e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003640:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800364a:	4922      	ldr	r1, [pc, #136]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800364c:	4313      	orrs	r3, r2
 800364e:	658b      	str	r3, [r1, #88]	; 0x58
 8003650:	e001      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003652:	7dfb      	ldrb	r3, [r7, #23]
 8003654:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800365e:	2b00      	cmp	r3, #0
 8003660:	d04b      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003668:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800366c:	d030      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800366e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003672:	d82a      	bhi.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003674:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003678:	d02e      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800367a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800367e:	d824      	bhi.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003680:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003684:	d018      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003686:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800368a:	d81e      	bhi.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003694:	d007      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003696:	e018      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003698:	4b0e      	ldr	r3, [pc, #56]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800369a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369c:	4a0d      	ldr	r2, [pc, #52]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800369e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036a4:	e019      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3304      	adds	r3, #4
 80036aa:	2100      	movs	r1, #0
 80036ac:	4618      	mov	r0, r3
 80036ae:	f001 f8ab 	bl	8004808 <RCCEx_PLL2_Config>
 80036b2:	4603      	mov	r3, r0
 80036b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80036b6:	e010      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3324      	adds	r3, #36	; 0x24
 80036bc:	2100      	movs	r1, #0
 80036be:	4618      	mov	r0, r3
 80036c0:	f001 f954 	bl	800496c <RCCEx_PLL3_Config>
 80036c4:	4603      	mov	r3, r0
 80036c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036c8:	e007      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	75fb      	strb	r3, [r7, #23]
      break;
 80036ce:	e004      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80036d0:	bf00      	nop
 80036d2:	e002      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80036d4:	58024400 	.word	0x58024400
      break;
 80036d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036da:	7dfb      	ldrb	r3, [r7, #23]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10a      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80036e0:	4b99      	ldr	r3, [pc, #612]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80036e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80036ee:	4996      	ldr	r1, [pc, #600]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	658b      	str	r3, [r1, #88]	; 0x58
 80036f4:	e001      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f6:	7dfb      	ldrb	r3, [r7, #23]
 80036f8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d032      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800370a:	2b30      	cmp	r3, #48	; 0x30
 800370c:	d01c      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800370e:	2b30      	cmp	r3, #48	; 0x30
 8003710:	d817      	bhi.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003712:	2b20      	cmp	r3, #32
 8003714:	d00c      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003716:	2b20      	cmp	r3, #32
 8003718:	d813      	bhi.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800371a:	2b00      	cmp	r3, #0
 800371c:	d016      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800371e:	2b10      	cmp	r3, #16
 8003720:	d10f      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003722:	4b89      	ldr	r3, [pc, #548]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003726:	4a88      	ldr	r2, [pc, #544]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800372c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800372e:	e00e      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3304      	adds	r3, #4
 8003734:	2102      	movs	r1, #2
 8003736:	4618      	mov	r0, r3
 8003738:	f001 f866 	bl	8004808 <RCCEx_PLL2_Config>
 800373c:	4603      	mov	r3, r0
 800373e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003740:	e005      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	75fb      	strb	r3, [r7, #23]
      break;
 8003746:	e002      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003748:	bf00      	nop
 800374a:	e000      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800374c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800374e:	7dfb      	ldrb	r3, [r7, #23]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d109      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003754:	4b7c      	ldr	r3, [pc, #496]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003758:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003760:	4979      	ldr	r1, [pc, #484]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003762:	4313      	orrs	r3, r2
 8003764:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003766:	e001      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003768:	7dfb      	ldrb	r3, [r7, #23]
 800376a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d047      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800377c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003780:	d030      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003782:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003786:	d82a      	bhi.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003788:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800378c:	d02c      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800378e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003792:	d824      	bhi.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003798:	d018      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800379a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800379e:	d81e      	bhi.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80037a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037a8:	d007      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80037aa:	e018      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037ac:	4b66      	ldr	r3, [pc, #408]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b0:	4a65      	ldr	r2, [pc, #404]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037b8:	e017      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3304      	adds	r3, #4
 80037be:	2100      	movs	r1, #0
 80037c0:	4618      	mov	r0, r3
 80037c2:	f001 f821 	bl	8004808 <RCCEx_PLL2_Config>
 80037c6:	4603      	mov	r3, r0
 80037c8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037ca:	e00e      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3324      	adds	r3, #36	; 0x24
 80037d0:	2100      	movs	r1, #0
 80037d2:	4618      	mov	r0, r3
 80037d4:	f001 f8ca 	bl	800496c <RCCEx_PLL3_Config>
 80037d8:	4603      	mov	r3, r0
 80037da:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037dc:	e005      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	75fb      	strb	r3, [r7, #23]
      break;
 80037e2:	e002      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80037e4:	bf00      	nop
 80037e6:	e000      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80037e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037ea:	7dfb      	ldrb	r3, [r7, #23]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d109      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80037f0:	4b55      	ldr	r3, [pc, #340]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fc:	4952      	ldr	r1, [pc, #328]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	650b      	str	r3, [r1, #80]	; 0x50
 8003802:	e001      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003804:	7dfb      	ldrb	r3, [r7, #23]
 8003806:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d049      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003818:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800381c:	d02e      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800381e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003822:	d828      	bhi.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003824:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003828:	d02a      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800382a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800382e:	d822      	bhi.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003830:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003834:	d026      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003836:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800383a:	d81c      	bhi.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800383c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003840:	d010      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003842:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003846:	d816      	bhi.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003848:	2b00      	cmp	r3, #0
 800384a:	d01d      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800384c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003850:	d111      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	3304      	adds	r3, #4
 8003856:	2101      	movs	r1, #1
 8003858:	4618      	mov	r0, r3
 800385a:	f000 ffd5 	bl	8004808 <RCCEx_PLL2_Config>
 800385e:	4603      	mov	r3, r0
 8003860:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003862:	e012      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3324      	adds	r3, #36	; 0x24
 8003868:	2101      	movs	r1, #1
 800386a:	4618      	mov	r0, r3
 800386c:	f001 f87e 	bl	800496c <RCCEx_PLL3_Config>
 8003870:	4603      	mov	r3, r0
 8003872:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003874:	e009      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	75fb      	strb	r3, [r7, #23]
      break;
 800387a:	e006      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800387c:	bf00      	nop
 800387e:	e004      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003880:	bf00      	nop
 8003882:	e002      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003884:	bf00      	nop
 8003886:	e000      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003888:	bf00      	nop
    }

    if(ret == HAL_OK)
 800388a:	7dfb      	ldrb	r3, [r7, #23]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d109      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003890:	4b2d      	ldr	r3, [pc, #180]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003894:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800389c:	492a      	ldr	r1, [pc, #168]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	650b      	str	r3, [r1, #80]	; 0x50
 80038a2:	e001      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a4:	7dfb      	ldrb	r3, [r7, #23]
 80038a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d04d      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80038ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038be:	d02e      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80038c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038c4:	d828      	bhi.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80038c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ca:	d02a      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80038cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d0:	d822      	bhi.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80038d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038d6:	d026      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80038d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038dc:	d81c      	bhi.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80038de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038e2:	d010      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80038e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038e8:	d816      	bhi.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d01d      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80038ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038f2:	d111      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3304      	adds	r3, #4
 80038f8:	2101      	movs	r1, #1
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 ff84 	bl	8004808 <RCCEx_PLL2_Config>
 8003900:	4603      	mov	r3, r0
 8003902:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003904:	e012      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	3324      	adds	r3, #36	; 0x24
 800390a:	2101      	movs	r1, #1
 800390c:	4618      	mov	r0, r3
 800390e:	f001 f82d 	bl	800496c <RCCEx_PLL3_Config>
 8003912:	4603      	mov	r3, r0
 8003914:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003916:	e009      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	75fb      	strb	r3, [r7, #23]
      break;
 800391c:	e006      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800391e:	bf00      	nop
 8003920:	e004      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003922:	bf00      	nop
 8003924:	e002      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003926:	bf00      	nop
 8003928:	e000      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800392a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800392c:	7dfb      	ldrb	r3, [r7, #23]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10c      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003932:	4b05      	ldr	r3, [pc, #20]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003936:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003940:	4901      	ldr	r1, [pc, #4]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003942:	4313      	orrs	r3, r2
 8003944:	658b      	str	r3, [r1, #88]	; 0x58
 8003946:	e003      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003948:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800394c:	7dfb      	ldrb	r3, [r7, #23]
 800394e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d02f      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003960:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003964:	d00e      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003966:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800396a:	d814      	bhi.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800396c:	2b00      	cmp	r3, #0
 800396e:	d015      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003970:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003974:	d10f      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003976:	4baf      	ldr	r3, [pc, #700]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397a:	4aae      	ldr	r2, [pc, #696]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800397c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003980:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003982:	e00c      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3304      	adds	r3, #4
 8003988:	2101      	movs	r1, #1
 800398a:	4618      	mov	r0, r3
 800398c:	f000 ff3c 	bl	8004808 <RCCEx_PLL2_Config>
 8003990:	4603      	mov	r3, r0
 8003992:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003994:	e003      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	75fb      	strb	r3, [r7, #23]
      break;
 800399a:	e000      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800399c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800399e:	7dfb      	ldrb	r3, [r7, #23]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d109      	bne.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039a4:	4ba3      	ldr	r3, [pc, #652]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039b0:	49a0      	ldr	r1, [pc, #640]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	650b      	str	r3, [r1, #80]	; 0x50
 80039b6:	e001      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b8:	7dfb      	ldrb	r3, [r7, #23]
 80039ba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d032      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039cc:	2b03      	cmp	r3, #3
 80039ce:	d81b      	bhi.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80039d0:	a201      	add	r2, pc, #4	; (adr r2, 80039d8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80039d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d6:	bf00      	nop
 80039d8:	08003a0f 	.word	0x08003a0f
 80039dc:	080039e9 	.word	0x080039e9
 80039e0:	080039f7 	.word	0x080039f7
 80039e4:	08003a0f 	.word	0x08003a0f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039e8:	4b92      	ldr	r3, [pc, #584]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ec:	4a91      	ldr	r2, [pc, #580]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80039f4:	e00c      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	3304      	adds	r3, #4
 80039fa:	2102      	movs	r1, #2
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 ff03 	bl	8004808 <RCCEx_PLL2_Config>
 8003a02:	4603      	mov	r3, r0
 8003a04:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003a06:	e003      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a0c:	e000      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003a0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a10:	7dfb      	ldrb	r3, [r7, #23]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d109      	bne.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a16:	4b87      	ldr	r3, [pc, #540]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a1a:	f023 0203 	bic.w	r2, r3, #3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a22:	4984      	ldr	r1, [pc, #528]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a28:	e001      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a2a:	7dfb      	ldrb	r3, [r7, #23]
 8003a2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 8086 	beq.w	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a3c:	4b7e      	ldr	r3, [pc, #504]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a7d      	ldr	r2, [pc, #500]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a48:	f7fd fc6c 	bl	8001324 <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a4e:	e009      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a50:	f7fd fc68 	bl	8001324 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b64      	cmp	r3, #100	; 0x64
 8003a5c:	d902      	bls.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	75fb      	strb	r3, [r7, #23]
        break;
 8003a62:	e005      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a64:	4b74      	ldr	r3, [pc, #464]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0ef      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003a70:	7dfb      	ldrb	r3, [r7, #23]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d166      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a76:	4b6f      	ldr	r3, [pc, #444]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a80:	4053      	eors	r3, r2
 8003a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d013      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a8a:	4b6a      	ldr	r3, [pc, #424]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a92:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a94:	4b67      	ldr	r3, [pc, #412]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a98:	4a66      	ldr	r2, [pc, #408]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a9e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003aa0:	4b64      	ldr	r3, [pc, #400]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa4:	4a63      	ldr	r2, [pc, #396]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aaa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003aac:	4a61      	ldr	r2, [pc, #388]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003abc:	d115      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abe:	f7fd fc31 	bl	8001324 <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ac4:	e00b      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac6:	f7fd fc2d 	bl	8001324 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d902      	bls.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	75fb      	strb	r3, [r7, #23]
            break;
 8003adc:	e005      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ade:	4b55      	ldr	r3, [pc, #340]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0ed      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003aea:	7dfb      	ldrb	r3, [r7, #23]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d126      	bne.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003afa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003afe:	d10d      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003b00:	4b4c      	ldr	r3, [pc, #304]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b0e:	0919      	lsrs	r1, r3, #4
 8003b10:	4b4a      	ldr	r3, [pc, #296]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003b12:	400b      	ands	r3, r1
 8003b14:	4947      	ldr	r1, [pc, #284]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	610b      	str	r3, [r1, #16]
 8003b1a:	e005      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003b1c:	4b45      	ldr	r3, [pc, #276]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	4a44      	ldr	r2, [pc, #272]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b22:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b26:	6113      	str	r3, [r2, #16]
 8003b28:	4b42      	ldr	r3, [pc, #264]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b36:	493f      	ldr	r1, [pc, #252]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	670b      	str	r3, [r1, #112]	; 0x70
 8003b3c:	e004      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b3e:	7dfb      	ldrb	r3, [r7, #23]
 8003b40:	75bb      	strb	r3, [r7, #22]
 8003b42:	e001      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b44:	7dfb      	ldrb	r3, [r7, #23]
 8003b46:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 8085 	beq.w	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b5a:	2b28      	cmp	r3, #40	; 0x28
 8003b5c:	d866      	bhi.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003b5e:	a201      	add	r2, pc, #4	; (adr r2, 8003b64 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b64:	08003c41 	.word	0x08003c41
 8003b68:	08003c2d 	.word	0x08003c2d
 8003b6c:	08003c2d 	.word	0x08003c2d
 8003b70:	08003c2d 	.word	0x08003c2d
 8003b74:	08003c2d 	.word	0x08003c2d
 8003b78:	08003c2d 	.word	0x08003c2d
 8003b7c:	08003c2d 	.word	0x08003c2d
 8003b80:	08003c2d 	.word	0x08003c2d
 8003b84:	08003c09 	.word	0x08003c09
 8003b88:	08003c2d 	.word	0x08003c2d
 8003b8c:	08003c2d 	.word	0x08003c2d
 8003b90:	08003c2d 	.word	0x08003c2d
 8003b94:	08003c2d 	.word	0x08003c2d
 8003b98:	08003c2d 	.word	0x08003c2d
 8003b9c:	08003c2d 	.word	0x08003c2d
 8003ba0:	08003c2d 	.word	0x08003c2d
 8003ba4:	08003c1b 	.word	0x08003c1b
 8003ba8:	08003c2d 	.word	0x08003c2d
 8003bac:	08003c2d 	.word	0x08003c2d
 8003bb0:	08003c2d 	.word	0x08003c2d
 8003bb4:	08003c2d 	.word	0x08003c2d
 8003bb8:	08003c2d 	.word	0x08003c2d
 8003bbc:	08003c2d 	.word	0x08003c2d
 8003bc0:	08003c2d 	.word	0x08003c2d
 8003bc4:	08003c41 	.word	0x08003c41
 8003bc8:	08003c2d 	.word	0x08003c2d
 8003bcc:	08003c2d 	.word	0x08003c2d
 8003bd0:	08003c2d 	.word	0x08003c2d
 8003bd4:	08003c2d 	.word	0x08003c2d
 8003bd8:	08003c2d 	.word	0x08003c2d
 8003bdc:	08003c2d 	.word	0x08003c2d
 8003be0:	08003c2d 	.word	0x08003c2d
 8003be4:	08003c41 	.word	0x08003c41
 8003be8:	08003c2d 	.word	0x08003c2d
 8003bec:	08003c2d 	.word	0x08003c2d
 8003bf0:	08003c2d 	.word	0x08003c2d
 8003bf4:	08003c2d 	.word	0x08003c2d
 8003bf8:	08003c2d 	.word	0x08003c2d
 8003bfc:	08003c2d 	.word	0x08003c2d
 8003c00:	08003c2d 	.word	0x08003c2d
 8003c04:	08003c41 	.word	0x08003c41
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 fdfa 	bl	8004808 <RCCEx_PLL2_Config>
 8003c14:	4603      	mov	r3, r0
 8003c16:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003c18:	e013      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3324      	adds	r3, #36	; 0x24
 8003c1e:	2101      	movs	r1, #1
 8003c20:	4618      	mov	r0, r3
 8003c22:	f000 fea3 	bl	800496c <RCCEx_PLL3_Config>
 8003c26:	4603      	mov	r3, r0
 8003c28:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003c2a:	e00a      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c30:	e007      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003c32:	bf00      	nop
 8003c34:	58024400 	.word	0x58024400
 8003c38:	58024800 	.word	0x58024800
 8003c3c:	00ffffcf 	.word	0x00ffffcf
      break;
 8003c40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c42:	7dfb      	ldrb	r3, [r7, #23]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d109      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c48:	4b96      	ldr	r3, [pc, #600]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c54:	4993      	ldr	r1, [pc, #588]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	654b      	str	r3, [r1, #84]	; 0x54
 8003c5a:	e001      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c5c:	7dfb      	ldrb	r3, [r7, #23]
 8003c5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d038      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c70:	2b05      	cmp	r3, #5
 8003c72:	d821      	bhi.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003c74:	a201      	add	r2, pc, #4	; (adr r2, 8003c7c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c7a:	bf00      	nop
 8003c7c:	08003cbf 	.word	0x08003cbf
 8003c80:	08003c95 	.word	0x08003c95
 8003c84:	08003ca7 	.word	0x08003ca7
 8003c88:	08003cbf 	.word	0x08003cbf
 8003c8c:	08003cbf 	.word	0x08003cbf
 8003c90:	08003cbf 	.word	0x08003cbf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3304      	adds	r3, #4
 8003c98:	2101      	movs	r1, #1
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fdb4 	bl	8004808 <RCCEx_PLL2_Config>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003ca4:	e00c      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	3324      	adds	r3, #36	; 0x24
 8003caa:	2101      	movs	r1, #1
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 fe5d 	bl	800496c <RCCEx_PLL3_Config>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003cb6:	e003      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	75fb      	strb	r3, [r7, #23]
      break;
 8003cbc:	e000      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003cbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cc0:	7dfb      	ldrb	r3, [r7, #23]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d109      	bne.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003cc6:	4b77      	ldr	r3, [pc, #476]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cca:	f023 0207 	bic.w	r2, r3, #7
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd2:	4974      	ldr	r1, [pc, #464]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	654b      	str	r3, [r1, #84]	; 0x54
 8003cd8:	e001      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cda:	7dfb      	ldrb	r3, [r7, #23]
 8003cdc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0304 	and.w	r3, r3, #4
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d03a      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf0:	2b05      	cmp	r3, #5
 8003cf2:	d821      	bhi.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003cf4:	a201      	add	r2, pc, #4	; (adr r2, 8003cfc <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfa:	bf00      	nop
 8003cfc:	08003d3f 	.word	0x08003d3f
 8003d00:	08003d15 	.word	0x08003d15
 8003d04:	08003d27 	.word	0x08003d27
 8003d08:	08003d3f 	.word	0x08003d3f
 8003d0c:	08003d3f 	.word	0x08003d3f
 8003d10:	08003d3f 	.word	0x08003d3f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3304      	adds	r3, #4
 8003d18:	2101      	movs	r1, #1
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 fd74 	bl	8004808 <RCCEx_PLL2_Config>
 8003d20:	4603      	mov	r3, r0
 8003d22:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003d24:	e00c      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	3324      	adds	r3, #36	; 0x24
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 fe1d 	bl	800496c <RCCEx_PLL3_Config>
 8003d32:	4603      	mov	r3, r0
 8003d34:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003d36:	e003      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d3c:	e000      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003d3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d40:	7dfb      	ldrb	r3, [r7, #23]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10a      	bne.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d46:	4b57      	ldr	r3, [pc, #348]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4a:	f023 0207 	bic.w	r2, r3, #7
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d54:	4953      	ldr	r1, [pc, #332]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	658b      	str	r3, [r1, #88]	; 0x58
 8003d5a:	e001      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d5c:	7dfb      	ldrb	r3, [r7, #23]
 8003d5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0320 	and.w	r3, r3, #32
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d04b      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d76:	d02e      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003d78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d7c:	d828      	bhi.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d82:	d02a      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d88:	d822      	bhi.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003d8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d8e:	d026      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003d90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d94:	d81c      	bhi.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003d96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d9a:	d010      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003d9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003da0:	d816      	bhi.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d01d      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003da6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003daa:	d111      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3304      	adds	r3, #4
 8003db0:	2100      	movs	r1, #0
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 fd28 	bl	8004808 <RCCEx_PLL2_Config>
 8003db8:	4603      	mov	r3, r0
 8003dba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003dbc:	e012      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3324      	adds	r3, #36	; 0x24
 8003dc2:	2102      	movs	r1, #2
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 fdd1 	bl	800496c <RCCEx_PLL3_Config>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003dce:	e009      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	75fb      	strb	r3, [r7, #23]
      break;
 8003dd4:	e006      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003dd6:	bf00      	nop
 8003dd8:	e004      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003dda:	bf00      	nop
 8003ddc:	e002      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003dde:	bf00      	nop
 8003de0:	e000      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003de2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003de4:	7dfb      	ldrb	r3, [r7, #23]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10a      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dea:	4b2e      	ldr	r3, [pc, #184]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003df8:	492a      	ldr	r1, [pc, #168]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	654b      	str	r3, [r1, #84]	; 0x54
 8003dfe:	e001      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e00:	7dfb      	ldrb	r3, [r7, #23]
 8003e02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d04d      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e16:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e1a:	d02e      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003e1c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e20:	d828      	bhi.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e26:	d02a      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e2c:	d822      	bhi.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003e2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e32:	d026      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003e34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e38:	d81c      	bhi.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003e3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e3e:	d010      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003e40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e44:	d816      	bhi.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d01d      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e4e:	d111      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	3304      	adds	r3, #4
 8003e54:	2100      	movs	r1, #0
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 fcd6 	bl	8004808 <RCCEx_PLL2_Config>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003e60:	e012      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	3324      	adds	r3, #36	; 0x24
 8003e66:	2102      	movs	r1, #2
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 fd7f 	bl	800496c <RCCEx_PLL3_Config>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003e72:	e009      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	75fb      	strb	r3, [r7, #23]
      break;
 8003e78:	e006      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003e7a:	bf00      	nop
 8003e7c:	e004      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003e7e:	bf00      	nop
 8003e80:	e002      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003e82:	bf00      	nop
 8003e84:	e000      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003e86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e88:	7dfb      	ldrb	r3, [r7, #23]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10c      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e8e:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e92:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e9c:	4901      	ldr	r1, [pc, #4]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	658b      	str	r3, [r1, #88]	; 0x58
 8003ea2:	e003      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003ea4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea8:	7dfb      	ldrb	r3, [r7, #23]
 8003eaa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d04b      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ebe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003ec2:	d02e      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003ec4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003ec8:	d828      	bhi.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003eca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ece:	d02a      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ed4:	d822      	bhi.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003ed6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003eda:	d026      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003edc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ee0:	d81c      	bhi.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003ee2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ee6:	d010      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003ee8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003eec:	d816      	bhi.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d01d      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ef6:	d111      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3304      	adds	r3, #4
 8003efc:	2100      	movs	r1, #0
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 fc82 	bl	8004808 <RCCEx_PLL2_Config>
 8003f04:	4603      	mov	r3, r0
 8003f06:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003f08:	e012      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3324      	adds	r3, #36	; 0x24
 8003f0e:	2102      	movs	r1, #2
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 fd2b 	bl	800496c <RCCEx_PLL3_Config>
 8003f16:	4603      	mov	r3, r0
 8003f18:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003f1a:	e009      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f20:	e006      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003f22:	bf00      	nop
 8003f24:	e004      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003f26:	bf00      	nop
 8003f28:	e002      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003f2a:	bf00      	nop
 8003f2c:	e000      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003f2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f30:	7dfb      	ldrb	r3, [r7, #23]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10a      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003f36:	4b9d      	ldr	r3, [pc, #628]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f44:	4999      	ldr	r1, [pc, #612]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	658b      	str	r3, [r1, #88]	; 0x58
 8003f4a:	e001      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f4c:	7dfb      	ldrb	r3, [r7, #23]
 8003f4e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d01a      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f66:	d10a      	bne.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3324      	adds	r3, #36	; 0x24
 8003f6c:	2102      	movs	r1, #2
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fcfc 	bl	800496c <RCCEx_PLL3_Config>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003f7e:	4b8b      	ldr	r3, [pc, #556]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f82:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f8c:	4987      	ldr	r1, [pc, #540]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0310 	and.w	r3, r3, #16
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d01a      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fa8:	d10a      	bne.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	3324      	adds	r3, #36	; 0x24
 8003fae:	2102      	movs	r1, #2
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 fcdb 	bl	800496c <RCCEx_PLL3_Config>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fc0:	4b7a      	ldr	r3, [pc, #488]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fce:	4977      	ldr	r1, [pc, #476]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d034      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003fe6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fea:	d01d      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003fec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ff0:	d817      	bhi.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ffa:	d009      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003ffc:	e011      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	3304      	adds	r3, #4
 8004002:	2100      	movs	r1, #0
 8004004:	4618      	mov	r0, r3
 8004006:	f000 fbff 	bl	8004808 <RCCEx_PLL2_Config>
 800400a:	4603      	mov	r3, r0
 800400c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800400e:	e00c      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3324      	adds	r3, #36	; 0x24
 8004014:	2102      	movs	r1, #2
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fca8 	bl	800496c <RCCEx_PLL3_Config>
 800401c:	4603      	mov	r3, r0
 800401e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004020:	e003      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	75fb      	strb	r3, [r7, #23]
      break;
 8004026:	e000      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004028:	bf00      	nop
    }

    if(ret == HAL_OK)
 800402a:	7dfb      	ldrb	r3, [r7, #23]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10a      	bne.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004030:	4b5e      	ldr	r3, [pc, #376]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004034:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800403e:	495b      	ldr	r1, [pc, #364]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004040:	4313      	orrs	r3, r2
 8004042:	658b      	str	r3, [r1, #88]	; 0x58
 8004044:	e001      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004046:	7dfb      	ldrb	r3, [r7, #23]
 8004048:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d033      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800405c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004060:	d01c      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004062:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004066:	d816      	bhi.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004068:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800406c:	d003      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800406e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004072:	d007      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004074:	e00f      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004076:	4b4d      	ldr	r3, [pc, #308]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407a:	4a4c      	ldr	r2, [pc, #304]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800407c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004080:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004082:	e00c      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3324      	adds	r3, #36	; 0x24
 8004088:	2101      	movs	r1, #1
 800408a:	4618      	mov	r0, r3
 800408c:	f000 fc6e 	bl	800496c <RCCEx_PLL3_Config>
 8004090:	4603      	mov	r3, r0
 8004092:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004094:	e003      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	75fb      	strb	r3, [r7, #23]
      break;
 800409a:	e000      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800409c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800409e:	7dfb      	ldrb	r3, [r7, #23]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10a      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040a4:	4b41      	ldr	r3, [pc, #260]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040b2:	493e      	ldr	r1, [pc, #248]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	654b      	str	r3, [r1, #84]	; 0x54
 80040b8:	e001      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ba:	7dfb      	ldrb	r3, [r7, #23]
 80040bc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d029      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80040d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d6:	d007      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80040d8:	e00f      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040da:	4b34      	ldr	r3, [pc, #208]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040de:	4a33      	ldr	r2, [pc, #204]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80040e6:	e00b      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3304      	adds	r3, #4
 80040ec:	2102      	movs	r1, #2
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 fb8a 	bl	8004808 <RCCEx_PLL2_Config>
 80040f4:	4603      	mov	r3, r0
 80040f6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80040f8:	e002      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	75fb      	strb	r3, [r7, #23]
      break;
 80040fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004100:	7dfb      	ldrb	r3, [r7, #23]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d109      	bne.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004106:	4b29      	ldr	r3, [pc, #164]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800410a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004112:	4926      	ldr	r1, [pc, #152]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004114:	4313      	orrs	r3, r2
 8004116:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004118:	e001      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800411a:	7dfb      	ldrb	r3, [r7, #23]
 800411c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00a      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	3324      	adds	r3, #36	; 0x24
 800412e:	2102      	movs	r1, #2
 8004130:	4618      	mov	r0, r3
 8004132:	f000 fc1b 	bl	800496c <RCCEx_PLL3_Config>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d033      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004150:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004154:	d017      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004156:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800415a:	d811      	bhi.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800415c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004160:	d013      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004162:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004166:	d80b      	bhi.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004168:	2b00      	cmp	r3, #0
 800416a:	d010      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800416c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004170:	d106      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004172:	4b0e      	ldr	r3, [pc, #56]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004176:	4a0d      	ldr	r2, [pc, #52]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800417c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800417e:	e007      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	75fb      	strb	r3, [r7, #23]
      break;
 8004184:	e004      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004186:	bf00      	nop
 8004188:	e002      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800418a:	bf00      	nop
 800418c:	e000      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800418e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004190:	7dfb      	ldrb	r3, [r7, #23]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10c      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004196:	4b05      	ldr	r3, [pc, #20]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041a2:	4902      	ldr	r1, [pc, #8]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	654b      	str	r3, [r1, #84]	; 0x54
 80041a8:	e004      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80041aa:	bf00      	nop
 80041ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b0:	7dfb      	ldrb	r3, [r7, #23]
 80041b2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d008      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041c0:	4b31      	ldr	r3, [pc, #196]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80041c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041cc:	492e      	ldr	r1, [pc, #184]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d009      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80041de:	4b2a      	ldr	r3, [pc, #168]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80041ec:	4926      	ldr	r1, [pc, #152]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d008      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041fe:	4b22      	ldr	r3, [pc, #136]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004202:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800420a:	491f      	ldr	r1, [pc, #124]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800420c:	4313      	orrs	r3, r2
 800420e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00d      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800421c:	4b1a      	ldr	r3, [pc, #104]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	4a19      	ldr	r2, [pc, #100]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004222:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004226:	6113      	str	r3, [r2, #16]
 8004228:	4b17      	ldr	r3, [pc, #92]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004232:	4915      	ldr	r1, [pc, #84]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004234:	4313      	orrs	r3, r2
 8004236:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	da08      	bge.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004240:	4b11      	ldr	r3, [pc, #68]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004244:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800424c:	490e      	ldr	r1, [pc, #56]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800424e:	4313      	orrs	r3, r2
 8004250:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d009      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800425e:	4b0a      	ldr	r3, [pc, #40]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004262:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426c:	4906      	ldr	r1, [pc, #24]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800426e:	4313      	orrs	r3, r2
 8004270:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004272:	7dbb      	ldrb	r3, [r7, #22]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d101      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004278:	2300      	movs	r3, #0
 800427a:	e000      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
}
 800427e:	4618      	mov	r0, r3
 8004280:	3718      	adds	r7, #24
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	58024400 	.word	0x58024400

0800428c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004290:	f7ff f85a 	bl	8003348 <HAL_RCC_GetHCLKFreq>
 8004294:	4602      	mov	r2, r0
 8004296:	4b06      	ldr	r3, [pc, #24]	; (80042b0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	091b      	lsrs	r3, r3, #4
 800429c:	f003 0307 	and.w	r3, r3, #7
 80042a0:	4904      	ldr	r1, [pc, #16]	; (80042b4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80042a2:	5ccb      	ldrb	r3, [r1, r3]
 80042a4:	f003 031f 	and.w	r3, r3, #31
 80042a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	58024400 	.word	0x58024400
 80042b4:	08007294 	.word	0x08007294

080042b8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b089      	sub	sp, #36	; 0x24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042c0:	4ba1      	ldr	r3, [pc, #644]	; (8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c4:	f003 0303 	and.w	r3, r3, #3
 80042c8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80042ca:	4b9f      	ldr	r3, [pc, #636]	; (8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ce:	0b1b      	lsrs	r3, r3, #12
 80042d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042d4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80042d6:	4b9c      	ldr	r3, [pc, #624]	; (8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042da:	091b      	lsrs	r3, r3, #4
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80042e2:	4b99      	ldr	r3, [pc, #612]	; (8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e6:	08db      	lsrs	r3, r3, #3
 80042e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	fb02 f303 	mul.w	r3, r2, r3
 80042f2:	ee07 3a90 	vmov	s15, r3
 80042f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 8111 	beq.w	8004528 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	2b02      	cmp	r3, #2
 800430a:	f000 8083 	beq.w	8004414 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	2b02      	cmp	r3, #2
 8004312:	f200 80a1 	bhi.w	8004458 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d003      	beq.n	8004324 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d056      	beq.n	80043d0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004322:	e099      	b.n	8004458 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004324:	4b88      	ldr	r3, [pc, #544]	; (8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0320 	and.w	r3, r3, #32
 800432c:	2b00      	cmp	r3, #0
 800432e:	d02d      	beq.n	800438c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004330:	4b85      	ldr	r3, [pc, #532]	; (8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	08db      	lsrs	r3, r3, #3
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	4a84      	ldr	r2, [pc, #528]	; (800454c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800433c:	fa22 f303 	lsr.w	r3, r2, r3
 8004340:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	ee07 3a90 	vmov	s15, r3
 8004348:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	ee07 3a90 	vmov	s15, r3
 8004352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800435a:	4b7b      	ldr	r3, [pc, #492]	; (8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004362:	ee07 3a90 	vmov	s15, r3
 8004366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800436a:	ed97 6a03 	vldr	s12, [r7, #12]
 800436e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004550 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800437a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800437e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004386:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800438a:	e087      	b.n	800449c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	ee07 3a90 	vmov	s15, r3
 8004392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004396:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004554 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800439a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800439e:	4b6a      	ldr	r3, [pc, #424]	; (8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043a6:	ee07 3a90 	vmov	s15, r3
 80043aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80043b2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004550 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043ce:	e065      	b.n	800449c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	ee07 3a90 	vmov	s15, r3
 80043d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043da:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004558 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80043de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043e2:	4b59      	ldr	r3, [pc, #356]	; (8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ea:	ee07 3a90 	vmov	s15, r3
 80043ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80043f6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004550 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800440a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800440e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004412:	e043      	b.n	800449c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	ee07 3a90 	vmov	s15, r3
 800441a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800441e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800455c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004426:	4b48      	ldr	r3, [pc, #288]	; (8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800442e:	ee07 3a90 	vmov	s15, r3
 8004432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004436:	ed97 6a03 	vldr	s12, [r7, #12]
 800443a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004550 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800443e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800444a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800444e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004452:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004456:	e021      	b.n	800449c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	ee07 3a90 	vmov	s15, r3
 800445e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004462:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004558 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800446a:	4b37      	ldr	r3, [pc, #220]	; (8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800446c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004472:	ee07 3a90 	vmov	s15, r3
 8004476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800447a:	ed97 6a03 	vldr	s12, [r7, #12]
 800447e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004550 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800448a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800448e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004496:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800449a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800449c:	4b2a      	ldr	r3, [pc, #168]	; (8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800449e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a0:	0a5b      	lsrs	r3, r3, #9
 80044a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044a6:	ee07 3a90 	vmov	s15, r3
 80044aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80044ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044c2:	ee17 2a90 	vmov	r2, s15
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80044ca:	4b1f      	ldr	r3, [pc, #124]	; (8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	0c1b      	lsrs	r3, r3, #16
 80044d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044d4:	ee07 3a90 	vmov	s15, r3
 80044d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80044e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044f0:	ee17 2a90 	vmov	r2, s15
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80044f8:	4b13      	ldr	r3, [pc, #76]	; (8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fc:	0e1b      	lsrs	r3, r3, #24
 80044fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004502:	ee07 3a90 	vmov	s15, r3
 8004506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800450a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800450e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004512:	edd7 6a07 	vldr	s13, [r7, #28]
 8004516:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800451a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800451e:	ee17 2a90 	vmov	r2, s15
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004526:	e008      	b.n	800453a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	609a      	str	r2, [r3, #8]
}
 800453a:	bf00      	nop
 800453c:	3724      	adds	r7, #36	; 0x24
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	58024400 	.word	0x58024400
 800454c:	03d09000 	.word	0x03d09000
 8004550:	46000000 	.word	0x46000000
 8004554:	4c742400 	.word	0x4c742400
 8004558:	4a742400 	.word	0x4a742400
 800455c:	4af42400 	.word	0x4af42400

08004560 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004560:	b480      	push	{r7}
 8004562:	b089      	sub	sp, #36	; 0x24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004568:	4ba1      	ldr	r3, [pc, #644]	; (80047f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800456a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456c:	f003 0303 	and.w	r3, r3, #3
 8004570:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004572:	4b9f      	ldr	r3, [pc, #636]	; (80047f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004576:	0d1b      	lsrs	r3, r3, #20
 8004578:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800457c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800457e:	4b9c      	ldr	r3, [pc, #624]	; (80047f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004582:	0a1b      	lsrs	r3, r3, #8
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800458a:	4b99      	ldr	r3, [pc, #612]	; (80047f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800458c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458e:	08db      	lsrs	r3, r3, #3
 8004590:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	fb02 f303 	mul.w	r3, r2, r3
 800459a:	ee07 3a90 	vmov	s15, r3
 800459e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 8111 	beq.w	80047d0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	f000 8083 	beq.w	80046bc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	f200 80a1 	bhi.w	8004700 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d003      	beq.n	80045cc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d056      	beq.n	8004678 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80045ca:	e099      	b.n	8004700 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045cc:	4b88      	ldr	r3, [pc, #544]	; (80047f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0320 	and.w	r3, r3, #32
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d02d      	beq.n	8004634 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045d8:	4b85      	ldr	r3, [pc, #532]	; (80047f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	08db      	lsrs	r3, r3, #3
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	4a84      	ldr	r2, [pc, #528]	; (80047f4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80045e4:	fa22 f303 	lsr.w	r3, r2, r3
 80045e8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	ee07 3a90 	vmov	s15, r3
 80045f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	ee07 3a90 	vmov	s15, r3
 80045fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004602:	4b7b      	ldr	r3, [pc, #492]	; (80047f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800460a:	ee07 3a90 	vmov	s15, r3
 800460e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004612:	ed97 6a03 	vldr	s12, [r7, #12]
 8004616:	eddf 5a78 	vldr	s11, [pc, #480]	; 80047f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800461a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800461e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800462a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800462e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004632:	e087      	b.n	8004744 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	ee07 3a90 	vmov	s15, r3
 800463a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800463e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80047fc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004646:	4b6a      	ldr	r3, [pc, #424]	; (80047f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800464e:	ee07 3a90 	vmov	s15, r3
 8004652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004656:	ed97 6a03 	vldr	s12, [r7, #12]
 800465a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80047f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800465e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800466a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800466e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004672:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004676:	e065      	b.n	8004744 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	ee07 3a90 	vmov	s15, r3
 800467e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004682:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800468a:	4b59      	ldr	r3, [pc, #356]	; (80047f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004692:	ee07 3a90 	vmov	s15, r3
 8004696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800469a:	ed97 6a03 	vldr	s12, [r7, #12]
 800469e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80047f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046ba:	e043      	b.n	8004744 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	ee07 3a90 	vmov	s15, r3
 80046c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004804 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80046ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ce:	4b48      	ldr	r3, [pc, #288]	; (80047f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046d6:	ee07 3a90 	vmov	s15, r3
 80046da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046de:	ed97 6a03 	vldr	s12, [r7, #12]
 80046e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80047f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046fe:	e021      	b.n	8004744 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	ee07 3a90 	vmov	s15, r3
 8004706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800470a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800470e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004712:	4b37      	ldr	r3, [pc, #220]	; (80047f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800471a:	ee07 3a90 	vmov	s15, r3
 800471e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004722:	ed97 6a03 	vldr	s12, [r7, #12]
 8004726:	eddf 5a34 	vldr	s11, [pc, #208]	; 80047f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800472a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800472e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800473a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800473e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004742:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004744:	4b2a      	ldr	r3, [pc, #168]	; (80047f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004748:	0a5b      	lsrs	r3, r3, #9
 800474a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800474e:	ee07 3a90 	vmov	s15, r3
 8004752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004756:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800475a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800475e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004762:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800476a:	ee17 2a90 	vmov	r2, s15
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004772:	4b1f      	ldr	r3, [pc, #124]	; (80047f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004776:	0c1b      	lsrs	r3, r3, #16
 8004778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800477c:	ee07 3a90 	vmov	s15, r3
 8004780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004784:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004788:	ee37 7a87 	vadd.f32	s14, s15, s14
 800478c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004790:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004794:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004798:	ee17 2a90 	vmov	r2, s15
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80047a0:	4b13      	ldr	r3, [pc, #76]	; (80047f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a4:	0e1b      	lsrs	r3, r3, #24
 80047a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047aa:	ee07 3a90 	vmov	s15, r3
 80047ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80047be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047c6:	ee17 2a90 	vmov	r2, s15
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80047ce:	e008      	b.n	80047e2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	609a      	str	r2, [r3, #8]
}
 80047e2:	bf00      	nop
 80047e4:	3724      	adds	r7, #36	; 0x24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	58024400 	.word	0x58024400
 80047f4:	03d09000 	.word	0x03d09000
 80047f8:	46000000 	.word	0x46000000
 80047fc:	4c742400 	.word	0x4c742400
 8004800:	4a742400 	.word	0x4a742400
 8004804:	4af42400 	.word	0x4af42400

08004808 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004812:	2300      	movs	r3, #0
 8004814:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004816:	4b53      	ldr	r3, [pc, #332]	; (8004964 <RCCEx_PLL2_Config+0x15c>)
 8004818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481a:	f003 0303 	and.w	r3, r3, #3
 800481e:	2b03      	cmp	r3, #3
 8004820:	d101      	bne.n	8004826 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e099      	b.n	800495a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004826:	4b4f      	ldr	r3, [pc, #316]	; (8004964 <RCCEx_PLL2_Config+0x15c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a4e      	ldr	r2, [pc, #312]	; (8004964 <RCCEx_PLL2_Config+0x15c>)
 800482c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004830:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004832:	f7fc fd77 	bl	8001324 <HAL_GetTick>
 8004836:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004838:	e008      	b.n	800484c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800483a:	f7fc fd73 	bl	8001324 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d901      	bls.n	800484c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e086      	b.n	800495a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800484c:	4b45      	ldr	r3, [pc, #276]	; (8004964 <RCCEx_PLL2_Config+0x15c>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1f0      	bne.n	800483a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004858:	4b42      	ldr	r3, [pc, #264]	; (8004964 <RCCEx_PLL2_Config+0x15c>)
 800485a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	031b      	lsls	r3, r3, #12
 8004866:	493f      	ldr	r1, [pc, #252]	; (8004964 <RCCEx_PLL2_Config+0x15c>)
 8004868:	4313      	orrs	r3, r2
 800486a:	628b      	str	r3, [r1, #40]	; 0x28
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	3b01      	subs	r3, #1
 8004872:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	3b01      	subs	r3, #1
 800487c:	025b      	lsls	r3, r3, #9
 800487e:	b29b      	uxth	r3, r3
 8004880:	431a      	orrs	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	3b01      	subs	r3, #1
 8004888:	041b      	lsls	r3, r3, #16
 800488a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800488e:	431a      	orrs	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	3b01      	subs	r3, #1
 8004896:	061b      	lsls	r3, r3, #24
 8004898:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800489c:	4931      	ldr	r1, [pc, #196]	; (8004964 <RCCEx_PLL2_Config+0x15c>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80048a2:	4b30      	ldr	r3, [pc, #192]	; (8004964 <RCCEx_PLL2_Config+0x15c>)
 80048a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	492d      	ldr	r1, [pc, #180]	; (8004964 <RCCEx_PLL2_Config+0x15c>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80048b4:	4b2b      	ldr	r3, [pc, #172]	; (8004964 <RCCEx_PLL2_Config+0x15c>)
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	f023 0220 	bic.w	r2, r3, #32
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	4928      	ldr	r1, [pc, #160]	; (8004964 <RCCEx_PLL2_Config+0x15c>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80048c6:	4b27      	ldr	r3, [pc, #156]	; (8004964 <RCCEx_PLL2_Config+0x15c>)
 80048c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ca:	4a26      	ldr	r2, [pc, #152]	; (8004964 <RCCEx_PLL2_Config+0x15c>)
 80048cc:	f023 0310 	bic.w	r3, r3, #16
 80048d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80048d2:	4b24      	ldr	r3, [pc, #144]	; (8004964 <RCCEx_PLL2_Config+0x15c>)
 80048d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048d6:	4b24      	ldr	r3, [pc, #144]	; (8004968 <RCCEx_PLL2_Config+0x160>)
 80048d8:	4013      	ands	r3, r2
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	69d2      	ldr	r2, [r2, #28]
 80048de:	00d2      	lsls	r2, r2, #3
 80048e0:	4920      	ldr	r1, [pc, #128]	; (8004964 <RCCEx_PLL2_Config+0x15c>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80048e6:	4b1f      	ldr	r3, [pc, #124]	; (8004964 <RCCEx_PLL2_Config+0x15c>)
 80048e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ea:	4a1e      	ldr	r2, [pc, #120]	; (8004964 <RCCEx_PLL2_Config+0x15c>)
 80048ec:	f043 0310 	orr.w	r3, r3, #16
 80048f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d106      	bne.n	8004906 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80048f8:	4b1a      	ldr	r3, [pc, #104]	; (8004964 <RCCEx_PLL2_Config+0x15c>)
 80048fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fc:	4a19      	ldr	r2, [pc, #100]	; (8004964 <RCCEx_PLL2_Config+0x15c>)
 80048fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004902:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004904:	e00f      	b.n	8004926 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d106      	bne.n	800491a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800490c:	4b15      	ldr	r3, [pc, #84]	; (8004964 <RCCEx_PLL2_Config+0x15c>)
 800490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004910:	4a14      	ldr	r2, [pc, #80]	; (8004964 <RCCEx_PLL2_Config+0x15c>)
 8004912:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004916:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004918:	e005      	b.n	8004926 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800491a:	4b12      	ldr	r3, [pc, #72]	; (8004964 <RCCEx_PLL2_Config+0x15c>)
 800491c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491e:	4a11      	ldr	r2, [pc, #68]	; (8004964 <RCCEx_PLL2_Config+0x15c>)
 8004920:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004924:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004926:	4b0f      	ldr	r3, [pc, #60]	; (8004964 <RCCEx_PLL2_Config+0x15c>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a0e      	ldr	r2, [pc, #56]	; (8004964 <RCCEx_PLL2_Config+0x15c>)
 800492c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004930:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004932:	f7fc fcf7 	bl	8001324 <HAL_GetTick>
 8004936:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004938:	e008      	b.n	800494c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800493a:	f7fc fcf3 	bl	8001324 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	d901      	bls.n	800494c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e006      	b.n	800495a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800494c:	4b05      	ldr	r3, [pc, #20]	; (8004964 <RCCEx_PLL2_Config+0x15c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d0f0      	beq.n	800493a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004958:	7bfb      	ldrb	r3, [r7, #15]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	58024400 	.word	0x58024400
 8004968:	ffff0007 	.word	0xffff0007

0800496c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004976:	2300      	movs	r3, #0
 8004978:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800497a:	4b53      	ldr	r3, [pc, #332]	; (8004ac8 <RCCEx_PLL3_Config+0x15c>)
 800497c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497e:	f003 0303 	and.w	r3, r3, #3
 8004982:	2b03      	cmp	r3, #3
 8004984:	d101      	bne.n	800498a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e099      	b.n	8004abe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800498a:	4b4f      	ldr	r3, [pc, #316]	; (8004ac8 <RCCEx_PLL3_Config+0x15c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a4e      	ldr	r2, [pc, #312]	; (8004ac8 <RCCEx_PLL3_Config+0x15c>)
 8004990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004994:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004996:	f7fc fcc5 	bl	8001324 <HAL_GetTick>
 800499a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800499c:	e008      	b.n	80049b0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800499e:	f7fc fcc1 	bl	8001324 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d901      	bls.n	80049b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e086      	b.n	8004abe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80049b0:	4b45      	ldr	r3, [pc, #276]	; (8004ac8 <RCCEx_PLL3_Config+0x15c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1f0      	bne.n	800499e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80049bc:	4b42      	ldr	r3, [pc, #264]	; (8004ac8 <RCCEx_PLL3_Config+0x15c>)
 80049be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	051b      	lsls	r3, r3, #20
 80049ca:	493f      	ldr	r1, [pc, #252]	; (8004ac8 <RCCEx_PLL3_Config+0x15c>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	628b      	str	r3, [r1, #40]	; 0x28
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	3b01      	subs	r3, #1
 80049d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	3b01      	subs	r3, #1
 80049e0:	025b      	lsls	r3, r3, #9
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	431a      	orrs	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	3b01      	subs	r3, #1
 80049ec:	041b      	lsls	r3, r3, #16
 80049ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	3b01      	subs	r3, #1
 80049fa:	061b      	lsls	r3, r3, #24
 80049fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a00:	4931      	ldr	r1, [pc, #196]	; (8004ac8 <RCCEx_PLL3_Config+0x15c>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004a06:	4b30      	ldr	r3, [pc, #192]	; (8004ac8 <RCCEx_PLL3_Config+0x15c>)
 8004a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	492d      	ldr	r1, [pc, #180]	; (8004ac8 <RCCEx_PLL3_Config+0x15c>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004a18:	4b2b      	ldr	r3, [pc, #172]	; (8004ac8 <RCCEx_PLL3_Config+0x15c>)
 8004a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	4928      	ldr	r1, [pc, #160]	; (8004ac8 <RCCEx_PLL3_Config+0x15c>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004a2a:	4b27      	ldr	r3, [pc, #156]	; (8004ac8 <RCCEx_PLL3_Config+0x15c>)
 8004a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2e:	4a26      	ldr	r2, [pc, #152]	; (8004ac8 <RCCEx_PLL3_Config+0x15c>)
 8004a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004a36:	4b24      	ldr	r3, [pc, #144]	; (8004ac8 <RCCEx_PLL3_Config+0x15c>)
 8004a38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a3a:	4b24      	ldr	r3, [pc, #144]	; (8004acc <RCCEx_PLL3_Config+0x160>)
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	69d2      	ldr	r2, [r2, #28]
 8004a42:	00d2      	lsls	r2, r2, #3
 8004a44:	4920      	ldr	r1, [pc, #128]	; (8004ac8 <RCCEx_PLL3_Config+0x15c>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004a4a:	4b1f      	ldr	r3, [pc, #124]	; (8004ac8 <RCCEx_PLL3_Config+0x15c>)
 8004a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4e:	4a1e      	ldr	r2, [pc, #120]	; (8004ac8 <RCCEx_PLL3_Config+0x15c>)
 8004a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d106      	bne.n	8004a6a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004a5c:	4b1a      	ldr	r3, [pc, #104]	; (8004ac8 <RCCEx_PLL3_Config+0x15c>)
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	4a19      	ldr	r2, [pc, #100]	; (8004ac8 <RCCEx_PLL3_Config+0x15c>)
 8004a62:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a68:	e00f      	b.n	8004a8a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d106      	bne.n	8004a7e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004a70:	4b15      	ldr	r3, [pc, #84]	; (8004ac8 <RCCEx_PLL3_Config+0x15c>)
 8004a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a74:	4a14      	ldr	r2, [pc, #80]	; (8004ac8 <RCCEx_PLL3_Config+0x15c>)
 8004a76:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a7c:	e005      	b.n	8004a8a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004a7e:	4b12      	ldr	r3, [pc, #72]	; (8004ac8 <RCCEx_PLL3_Config+0x15c>)
 8004a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a82:	4a11      	ldr	r2, [pc, #68]	; (8004ac8 <RCCEx_PLL3_Config+0x15c>)
 8004a84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a88:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004a8a:	4b0f      	ldr	r3, [pc, #60]	; (8004ac8 <RCCEx_PLL3_Config+0x15c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a0e      	ldr	r2, [pc, #56]	; (8004ac8 <RCCEx_PLL3_Config+0x15c>)
 8004a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a96:	f7fc fc45 	bl	8001324 <HAL_GetTick>
 8004a9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a9c:	e008      	b.n	8004ab0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004a9e:	f7fc fc41 	bl	8001324 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d901      	bls.n	8004ab0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e006      	b.n	8004abe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ab0:	4b05      	ldr	r3, [pc, #20]	; (8004ac8 <RCCEx_PLL3_Config+0x15c>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d0f0      	beq.n	8004a9e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	58024400 	.word	0x58024400
 8004acc:	ffff0007 	.word	0xffff0007

08004ad0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e042      	b.n	8004b68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d106      	bne.n	8004afa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f7fc f907 	bl	8000d08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2224      	movs	r2, #36	; 0x24
 8004afe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 0201 	bic.w	r2, r2, #1
 8004b10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f82c 	bl	8004b70 <UART_SetConfig>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d101      	bne.n	8004b22 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e022      	b.n	8004b68 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d002      	beq.n	8004b30 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 fd88 	bl	8005640 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f042 0201 	orr.w	r2, r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 fe0f 	bl	8005784 <UART_CheckIdleState>
 8004b66:	4603      	mov	r3, r0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b74:	b092      	sub	sp, #72	; 0x48
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	69db      	ldr	r3, [r3, #28]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	4bbe      	ldr	r3, [pc, #760]	; (8004e98 <UART_SetConfig+0x328>)
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	6812      	ldr	r2, [r2, #0]
 8004ba6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ba8:	430b      	orrs	r3, r1
 8004baa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	68da      	ldr	r2, [r3, #12]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4ab3      	ldr	r2, [pc, #716]	; (8004e9c <UART_SetConfig+0x32c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d004      	beq.n	8004bdc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689a      	ldr	r2, [r3, #8]
 8004be2:	4baf      	ldr	r3, [pc, #700]	; (8004ea0 <UART_SetConfig+0x330>)
 8004be4:	4013      	ands	r3, r2
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	6812      	ldr	r2, [r2, #0]
 8004bea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004bec:	430b      	orrs	r3, r1
 8004bee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf6:	f023 010f 	bic.w	r1, r3, #15
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4aa6      	ldr	r2, [pc, #664]	; (8004ea4 <UART_SetConfig+0x334>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d177      	bne.n	8004d00 <UART_SetConfig+0x190>
 8004c10:	4ba5      	ldr	r3, [pc, #660]	; (8004ea8 <UART_SetConfig+0x338>)
 8004c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c18:	2b28      	cmp	r3, #40	; 0x28
 8004c1a:	d86d      	bhi.n	8004cf8 <UART_SetConfig+0x188>
 8004c1c:	a201      	add	r2, pc, #4	; (adr r2, 8004c24 <UART_SetConfig+0xb4>)
 8004c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c22:	bf00      	nop
 8004c24:	08004cc9 	.word	0x08004cc9
 8004c28:	08004cf9 	.word	0x08004cf9
 8004c2c:	08004cf9 	.word	0x08004cf9
 8004c30:	08004cf9 	.word	0x08004cf9
 8004c34:	08004cf9 	.word	0x08004cf9
 8004c38:	08004cf9 	.word	0x08004cf9
 8004c3c:	08004cf9 	.word	0x08004cf9
 8004c40:	08004cf9 	.word	0x08004cf9
 8004c44:	08004cd1 	.word	0x08004cd1
 8004c48:	08004cf9 	.word	0x08004cf9
 8004c4c:	08004cf9 	.word	0x08004cf9
 8004c50:	08004cf9 	.word	0x08004cf9
 8004c54:	08004cf9 	.word	0x08004cf9
 8004c58:	08004cf9 	.word	0x08004cf9
 8004c5c:	08004cf9 	.word	0x08004cf9
 8004c60:	08004cf9 	.word	0x08004cf9
 8004c64:	08004cd9 	.word	0x08004cd9
 8004c68:	08004cf9 	.word	0x08004cf9
 8004c6c:	08004cf9 	.word	0x08004cf9
 8004c70:	08004cf9 	.word	0x08004cf9
 8004c74:	08004cf9 	.word	0x08004cf9
 8004c78:	08004cf9 	.word	0x08004cf9
 8004c7c:	08004cf9 	.word	0x08004cf9
 8004c80:	08004cf9 	.word	0x08004cf9
 8004c84:	08004ce1 	.word	0x08004ce1
 8004c88:	08004cf9 	.word	0x08004cf9
 8004c8c:	08004cf9 	.word	0x08004cf9
 8004c90:	08004cf9 	.word	0x08004cf9
 8004c94:	08004cf9 	.word	0x08004cf9
 8004c98:	08004cf9 	.word	0x08004cf9
 8004c9c:	08004cf9 	.word	0x08004cf9
 8004ca0:	08004cf9 	.word	0x08004cf9
 8004ca4:	08004ce9 	.word	0x08004ce9
 8004ca8:	08004cf9 	.word	0x08004cf9
 8004cac:	08004cf9 	.word	0x08004cf9
 8004cb0:	08004cf9 	.word	0x08004cf9
 8004cb4:	08004cf9 	.word	0x08004cf9
 8004cb8:	08004cf9 	.word	0x08004cf9
 8004cbc:	08004cf9 	.word	0x08004cf9
 8004cc0:	08004cf9 	.word	0x08004cf9
 8004cc4:	08004cf1 	.word	0x08004cf1
 8004cc8:	2301      	movs	r3, #1
 8004cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cce:	e222      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004cd0:	2304      	movs	r3, #4
 8004cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cd6:	e21e      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004cd8:	2308      	movs	r3, #8
 8004cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cde:	e21a      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004ce0:	2310      	movs	r3, #16
 8004ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ce6:	e216      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004ce8:	2320      	movs	r3, #32
 8004cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cee:	e212      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004cf0:	2340      	movs	r3, #64	; 0x40
 8004cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cf6:	e20e      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004cf8:	2380      	movs	r3, #128	; 0x80
 8004cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cfe:	e20a      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a69      	ldr	r2, [pc, #420]	; (8004eac <UART_SetConfig+0x33c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d130      	bne.n	8004d6c <UART_SetConfig+0x1fc>
 8004d0a:	4b67      	ldr	r3, [pc, #412]	; (8004ea8 <UART_SetConfig+0x338>)
 8004d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	2b05      	cmp	r3, #5
 8004d14:	d826      	bhi.n	8004d64 <UART_SetConfig+0x1f4>
 8004d16:	a201      	add	r2, pc, #4	; (adr r2, 8004d1c <UART_SetConfig+0x1ac>)
 8004d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1c:	08004d35 	.word	0x08004d35
 8004d20:	08004d3d 	.word	0x08004d3d
 8004d24:	08004d45 	.word	0x08004d45
 8004d28:	08004d4d 	.word	0x08004d4d
 8004d2c:	08004d55 	.word	0x08004d55
 8004d30:	08004d5d 	.word	0x08004d5d
 8004d34:	2300      	movs	r3, #0
 8004d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d3a:	e1ec      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004d3c:	2304      	movs	r3, #4
 8004d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d42:	e1e8      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004d44:	2308      	movs	r3, #8
 8004d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d4a:	e1e4      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004d4c:	2310      	movs	r3, #16
 8004d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d52:	e1e0      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004d54:	2320      	movs	r3, #32
 8004d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d5a:	e1dc      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004d5c:	2340      	movs	r3, #64	; 0x40
 8004d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d62:	e1d8      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004d64:	2380      	movs	r3, #128	; 0x80
 8004d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d6a:	e1d4      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a4f      	ldr	r2, [pc, #316]	; (8004eb0 <UART_SetConfig+0x340>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d130      	bne.n	8004dd8 <UART_SetConfig+0x268>
 8004d76:	4b4c      	ldr	r3, [pc, #304]	; (8004ea8 <UART_SetConfig+0x338>)
 8004d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7a:	f003 0307 	and.w	r3, r3, #7
 8004d7e:	2b05      	cmp	r3, #5
 8004d80:	d826      	bhi.n	8004dd0 <UART_SetConfig+0x260>
 8004d82:	a201      	add	r2, pc, #4	; (adr r2, 8004d88 <UART_SetConfig+0x218>)
 8004d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d88:	08004da1 	.word	0x08004da1
 8004d8c:	08004da9 	.word	0x08004da9
 8004d90:	08004db1 	.word	0x08004db1
 8004d94:	08004db9 	.word	0x08004db9
 8004d98:	08004dc1 	.word	0x08004dc1
 8004d9c:	08004dc9 	.word	0x08004dc9
 8004da0:	2300      	movs	r3, #0
 8004da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004da6:	e1b6      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004da8:	2304      	movs	r3, #4
 8004daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dae:	e1b2      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004db0:	2308      	movs	r3, #8
 8004db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004db6:	e1ae      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004db8:	2310      	movs	r3, #16
 8004dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dbe:	e1aa      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004dc0:	2320      	movs	r3, #32
 8004dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dc6:	e1a6      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004dc8:	2340      	movs	r3, #64	; 0x40
 8004dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dce:	e1a2      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004dd0:	2380      	movs	r3, #128	; 0x80
 8004dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dd6:	e19e      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a35      	ldr	r2, [pc, #212]	; (8004eb4 <UART_SetConfig+0x344>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d130      	bne.n	8004e44 <UART_SetConfig+0x2d4>
 8004de2:	4b31      	ldr	r3, [pc, #196]	; (8004ea8 <UART_SetConfig+0x338>)
 8004de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	2b05      	cmp	r3, #5
 8004dec:	d826      	bhi.n	8004e3c <UART_SetConfig+0x2cc>
 8004dee:	a201      	add	r2, pc, #4	; (adr r2, 8004df4 <UART_SetConfig+0x284>)
 8004df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df4:	08004e0d 	.word	0x08004e0d
 8004df8:	08004e15 	.word	0x08004e15
 8004dfc:	08004e1d 	.word	0x08004e1d
 8004e00:	08004e25 	.word	0x08004e25
 8004e04:	08004e2d 	.word	0x08004e2d
 8004e08:	08004e35 	.word	0x08004e35
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e12:	e180      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004e14:	2304      	movs	r3, #4
 8004e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e1a:	e17c      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004e1c:	2308      	movs	r3, #8
 8004e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e22:	e178      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004e24:	2310      	movs	r3, #16
 8004e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e2a:	e174      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004e2c:	2320      	movs	r3, #32
 8004e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e32:	e170      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004e34:	2340      	movs	r3, #64	; 0x40
 8004e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e3a:	e16c      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004e3c:	2380      	movs	r3, #128	; 0x80
 8004e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e42:	e168      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a1b      	ldr	r2, [pc, #108]	; (8004eb8 <UART_SetConfig+0x348>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d142      	bne.n	8004ed4 <UART_SetConfig+0x364>
 8004e4e:	4b16      	ldr	r3, [pc, #88]	; (8004ea8 <UART_SetConfig+0x338>)
 8004e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	2b05      	cmp	r3, #5
 8004e58:	d838      	bhi.n	8004ecc <UART_SetConfig+0x35c>
 8004e5a:	a201      	add	r2, pc, #4	; (adr r2, 8004e60 <UART_SetConfig+0x2f0>)
 8004e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e60:	08004e79 	.word	0x08004e79
 8004e64:	08004e81 	.word	0x08004e81
 8004e68:	08004e89 	.word	0x08004e89
 8004e6c:	08004e91 	.word	0x08004e91
 8004e70:	08004ebd 	.word	0x08004ebd
 8004e74:	08004ec5 	.word	0x08004ec5
 8004e78:	2300      	movs	r3, #0
 8004e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e7e:	e14a      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004e80:	2304      	movs	r3, #4
 8004e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e86:	e146      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004e88:	2308      	movs	r3, #8
 8004e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e8e:	e142      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004e90:	2310      	movs	r3, #16
 8004e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e96:	e13e      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004e98:	cfff69f3 	.word	0xcfff69f3
 8004e9c:	58000c00 	.word	0x58000c00
 8004ea0:	11fff4ff 	.word	0x11fff4ff
 8004ea4:	40011000 	.word	0x40011000
 8004ea8:	58024400 	.word	0x58024400
 8004eac:	40004400 	.word	0x40004400
 8004eb0:	40004800 	.word	0x40004800
 8004eb4:	40004c00 	.word	0x40004c00
 8004eb8:	40005000 	.word	0x40005000
 8004ebc:	2320      	movs	r3, #32
 8004ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ec2:	e128      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004ec4:	2340      	movs	r3, #64	; 0x40
 8004ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eca:	e124      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004ecc:	2380      	movs	r3, #128	; 0x80
 8004ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ed2:	e120      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4acb      	ldr	r2, [pc, #812]	; (8005208 <UART_SetConfig+0x698>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d176      	bne.n	8004fcc <UART_SetConfig+0x45c>
 8004ede:	4bcb      	ldr	r3, [pc, #812]	; (800520c <UART_SetConfig+0x69c>)
 8004ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ee6:	2b28      	cmp	r3, #40	; 0x28
 8004ee8:	d86c      	bhi.n	8004fc4 <UART_SetConfig+0x454>
 8004eea:	a201      	add	r2, pc, #4	; (adr r2, 8004ef0 <UART_SetConfig+0x380>)
 8004eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef0:	08004f95 	.word	0x08004f95
 8004ef4:	08004fc5 	.word	0x08004fc5
 8004ef8:	08004fc5 	.word	0x08004fc5
 8004efc:	08004fc5 	.word	0x08004fc5
 8004f00:	08004fc5 	.word	0x08004fc5
 8004f04:	08004fc5 	.word	0x08004fc5
 8004f08:	08004fc5 	.word	0x08004fc5
 8004f0c:	08004fc5 	.word	0x08004fc5
 8004f10:	08004f9d 	.word	0x08004f9d
 8004f14:	08004fc5 	.word	0x08004fc5
 8004f18:	08004fc5 	.word	0x08004fc5
 8004f1c:	08004fc5 	.word	0x08004fc5
 8004f20:	08004fc5 	.word	0x08004fc5
 8004f24:	08004fc5 	.word	0x08004fc5
 8004f28:	08004fc5 	.word	0x08004fc5
 8004f2c:	08004fc5 	.word	0x08004fc5
 8004f30:	08004fa5 	.word	0x08004fa5
 8004f34:	08004fc5 	.word	0x08004fc5
 8004f38:	08004fc5 	.word	0x08004fc5
 8004f3c:	08004fc5 	.word	0x08004fc5
 8004f40:	08004fc5 	.word	0x08004fc5
 8004f44:	08004fc5 	.word	0x08004fc5
 8004f48:	08004fc5 	.word	0x08004fc5
 8004f4c:	08004fc5 	.word	0x08004fc5
 8004f50:	08004fad 	.word	0x08004fad
 8004f54:	08004fc5 	.word	0x08004fc5
 8004f58:	08004fc5 	.word	0x08004fc5
 8004f5c:	08004fc5 	.word	0x08004fc5
 8004f60:	08004fc5 	.word	0x08004fc5
 8004f64:	08004fc5 	.word	0x08004fc5
 8004f68:	08004fc5 	.word	0x08004fc5
 8004f6c:	08004fc5 	.word	0x08004fc5
 8004f70:	08004fb5 	.word	0x08004fb5
 8004f74:	08004fc5 	.word	0x08004fc5
 8004f78:	08004fc5 	.word	0x08004fc5
 8004f7c:	08004fc5 	.word	0x08004fc5
 8004f80:	08004fc5 	.word	0x08004fc5
 8004f84:	08004fc5 	.word	0x08004fc5
 8004f88:	08004fc5 	.word	0x08004fc5
 8004f8c:	08004fc5 	.word	0x08004fc5
 8004f90:	08004fbd 	.word	0x08004fbd
 8004f94:	2301      	movs	r3, #1
 8004f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f9a:	e0bc      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004f9c:	2304      	movs	r3, #4
 8004f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fa2:	e0b8      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004fa4:	2308      	movs	r3, #8
 8004fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004faa:	e0b4      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004fac:	2310      	movs	r3, #16
 8004fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fb2:	e0b0      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004fb4:	2320      	movs	r3, #32
 8004fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fba:	e0ac      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004fbc:	2340      	movs	r3, #64	; 0x40
 8004fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fc2:	e0a8      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004fc4:	2380      	movs	r3, #128	; 0x80
 8004fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fca:	e0a4      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a8f      	ldr	r2, [pc, #572]	; (8005210 <UART_SetConfig+0x6a0>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d130      	bne.n	8005038 <UART_SetConfig+0x4c8>
 8004fd6:	4b8d      	ldr	r3, [pc, #564]	; (800520c <UART_SetConfig+0x69c>)
 8004fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	2b05      	cmp	r3, #5
 8004fe0:	d826      	bhi.n	8005030 <UART_SetConfig+0x4c0>
 8004fe2:	a201      	add	r2, pc, #4	; (adr r2, 8004fe8 <UART_SetConfig+0x478>)
 8004fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe8:	08005001 	.word	0x08005001
 8004fec:	08005009 	.word	0x08005009
 8004ff0:	08005011 	.word	0x08005011
 8004ff4:	08005019 	.word	0x08005019
 8004ff8:	08005021 	.word	0x08005021
 8004ffc:	08005029 	.word	0x08005029
 8005000:	2300      	movs	r3, #0
 8005002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005006:	e086      	b.n	8005116 <UART_SetConfig+0x5a6>
 8005008:	2304      	movs	r3, #4
 800500a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800500e:	e082      	b.n	8005116 <UART_SetConfig+0x5a6>
 8005010:	2308      	movs	r3, #8
 8005012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005016:	e07e      	b.n	8005116 <UART_SetConfig+0x5a6>
 8005018:	2310      	movs	r3, #16
 800501a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800501e:	e07a      	b.n	8005116 <UART_SetConfig+0x5a6>
 8005020:	2320      	movs	r3, #32
 8005022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005026:	e076      	b.n	8005116 <UART_SetConfig+0x5a6>
 8005028:	2340      	movs	r3, #64	; 0x40
 800502a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800502e:	e072      	b.n	8005116 <UART_SetConfig+0x5a6>
 8005030:	2380      	movs	r3, #128	; 0x80
 8005032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005036:	e06e      	b.n	8005116 <UART_SetConfig+0x5a6>
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a75      	ldr	r2, [pc, #468]	; (8005214 <UART_SetConfig+0x6a4>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d130      	bne.n	80050a4 <UART_SetConfig+0x534>
 8005042:	4b72      	ldr	r3, [pc, #456]	; (800520c <UART_SetConfig+0x69c>)
 8005044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005046:	f003 0307 	and.w	r3, r3, #7
 800504a:	2b05      	cmp	r3, #5
 800504c:	d826      	bhi.n	800509c <UART_SetConfig+0x52c>
 800504e:	a201      	add	r2, pc, #4	; (adr r2, 8005054 <UART_SetConfig+0x4e4>)
 8005050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005054:	0800506d 	.word	0x0800506d
 8005058:	08005075 	.word	0x08005075
 800505c:	0800507d 	.word	0x0800507d
 8005060:	08005085 	.word	0x08005085
 8005064:	0800508d 	.word	0x0800508d
 8005068:	08005095 	.word	0x08005095
 800506c:	2300      	movs	r3, #0
 800506e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005072:	e050      	b.n	8005116 <UART_SetConfig+0x5a6>
 8005074:	2304      	movs	r3, #4
 8005076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800507a:	e04c      	b.n	8005116 <UART_SetConfig+0x5a6>
 800507c:	2308      	movs	r3, #8
 800507e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005082:	e048      	b.n	8005116 <UART_SetConfig+0x5a6>
 8005084:	2310      	movs	r3, #16
 8005086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800508a:	e044      	b.n	8005116 <UART_SetConfig+0x5a6>
 800508c:	2320      	movs	r3, #32
 800508e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005092:	e040      	b.n	8005116 <UART_SetConfig+0x5a6>
 8005094:	2340      	movs	r3, #64	; 0x40
 8005096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800509a:	e03c      	b.n	8005116 <UART_SetConfig+0x5a6>
 800509c:	2380      	movs	r3, #128	; 0x80
 800509e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050a2:	e038      	b.n	8005116 <UART_SetConfig+0x5a6>
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a5b      	ldr	r2, [pc, #364]	; (8005218 <UART_SetConfig+0x6a8>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d130      	bne.n	8005110 <UART_SetConfig+0x5a0>
 80050ae:	4b57      	ldr	r3, [pc, #348]	; (800520c <UART_SetConfig+0x69c>)
 80050b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b2:	f003 0307 	and.w	r3, r3, #7
 80050b6:	2b05      	cmp	r3, #5
 80050b8:	d826      	bhi.n	8005108 <UART_SetConfig+0x598>
 80050ba:	a201      	add	r2, pc, #4	; (adr r2, 80050c0 <UART_SetConfig+0x550>)
 80050bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c0:	080050d9 	.word	0x080050d9
 80050c4:	080050e1 	.word	0x080050e1
 80050c8:	080050e9 	.word	0x080050e9
 80050cc:	080050f1 	.word	0x080050f1
 80050d0:	080050f9 	.word	0x080050f9
 80050d4:	08005101 	.word	0x08005101
 80050d8:	2302      	movs	r3, #2
 80050da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050de:	e01a      	b.n	8005116 <UART_SetConfig+0x5a6>
 80050e0:	2304      	movs	r3, #4
 80050e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050e6:	e016      	b.n	8005116 <UART_SetConfig+0x5a6>
 80050e8:	2308      	movs	r3, #8
 80050ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ee:	e012      	b.n	8005116 <UART_SetConfig+0x5a6>
 80050f0:	2310      	movs	r3, #16
 80050f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050f6:	e00e      	b.n	8005116 <UART_SetConfig+0x5a6>
 80050f8:	2320      	movs	r3, #32
 80050fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050fe:	e00a      	b.n	8005116 <UART_SetConfig+0x5a6>
 8005100:	2340      	movs	r3, #64	; 0x40
 8005102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005106:	e006      	b.n	8005116 <UART_SetConfig+0x5a6>
 8005108:	2380      	movs	r3, #128	; 0x80
 800510a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800510e:	e002      	b.n	8005116 <UART_SetConfig+0x5a6>
 8005110:	2380      	movs	r3, #128	; 0x80
 8005112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a3f      	ldr	r2, [pc, #252]	; (8005218 <UART_SetConfig+0x6a8>)
 800511c:	4293      	cmp	r3, r2
 800511e:	f040 80f8 	bne.w	8005312 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005122:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005126:	2b20      	cmp	r3, #32
 8005128:	dc46      	bgt.n	80051b8 <UART_SetConfig+0x648>
 800512a:	2b02      	cmp	r3, #2
 800512c:	f2c0 8082 	blt.w	8005234 <UART_SetConfig+0x6c4>
 8005130:	3b02      	subs	r3, #2
 8005132:	2b1e      	cmp	r3, #30
 8005134:	d87e      	bhi.n	8005234 <UART_SetConfig+0x6c4>
 8005136:	a201      	add	r2, pc, #4	; (adr r2, 800513c <UART_SetConfig+0x5cc>)
 8005138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800513c:	080051bf 	.word	0x080051bf
 8005140:	08005235 	.word	0x08005235
 8005144:	080051c7 	.word	0x080051c7
 8005148:	08005235 	.word	0x08005235
 800514c:	08005235 	.word	0x08005235
 8005150:	08005235 	.word	0x08005235
 8005154:	080051d7 	.word	0x080051d7
 8005158:	08005235 	.word	0x08005235
 800515c:	08005235 	.word	0x08005235
 8005160:	08005235 	.word	0x08005235
 8005164:	08005235 	.word	0x08005235
 8005168:	08005235 	.word	0x08005235
 800516c:	08005235 	.word	0x08005235
 8005170:	08005235 	.word	0x08005235
 8005174:	080051e7 	.word	0x080051e7
 8005178:	08005235 	.word	0x08005235
 800517c:	08005235 	.word	0x08005235
 8005180:	08005235 	.word	0x08005235
 8005184:	08005235 	.word	0x08005235
 8005188:	08005235 	.word	0x08005235
 800518c:	08005235 	.word	0x08005235
 8005190:	08005235 	.word	0x08005235
 8005194:	08005235 	.word	0x08005235
 8005198:	08005235 	.word	0x08005235
 800519c:	08005235 	.word	0x08005235
 80051a0:	08005235 	.word	0x08005235
 80051a4:	08005235 	.word	0x08005235
 80051a8:	08005235 	.word	0x08005235
 80051ac:	08005235 	.word	0x08005235
 80051b0:	08005235 	.word	0x08005235
 80051b4:	08005227 	.word	0x08005227
 80051b8:	2b40      	cmp	r3, #64	; 0x40
 80051ba:	d037      	beq.n	800522c <UART_SetConfig+0x6bc>
 80051bc:	e03a      	b.n	8005234 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80051be:	f7ff f865 	bl	800428c <HAL_RCCEx_GetD3PCLK1Freq>
 80051c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80051c4:	e03c      	b.n	8005240 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7ff f874 	bl	80042b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80051d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051d4:	e034      	b.n	8005240 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051d6:	f107 0318 	add.w	r3, r7, #24
 80051da:	4618      	mov	r0, r3
 80051dc:	f7ff f9c0 	bl	8004560 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051e4:	e02c      	b.n	8005240 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051e6:	4b09      	ldr	r3, [pc, #36]	; (800520c <UART_SetConfig+0x69c>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0320 	and.w	r3, r3, #32
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d016      	beq.n	8005220 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80051f2:	4b06      	ldr	r3, [pc, #24]	; (800520c <UART_SetConfig+0x69c>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	08db      	lsrs	r3, r3, #3
 80051f8:	f003 0303 	and.w	r3, r3, #3
 80051fc:	4a07      	ldr	r2, [pc, #28]	; (800521c <UART_SetConfig+0x6ac>)
 80051fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005202:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005204:	e01c      	b.n	8005240 <UART_SetConfig+0x6d0>
 8005206:	bf00      	nop
 8005208:	40011400 	.word	0x40011400
 800520c:	58024400 	.word	0x58024400
 8005210:	40007800 	.word	0x40007800
 8005214:	40007c00 	.word	0x40007c00
 8005218:	58000c00 	.word	0x58000c00
 800521c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005220:	4b9d      	ldr	r3, [pc, #628]	; (8005498 <UART_SetConfig+0x928>)
 8005222:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005224:	e00c      	b.n	8005240 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005226:	4b9d      	ldr	r3, [pc, #628]	; (800549c <UART_SetConfig+0x92c>)
 8005228:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800522a:	e009      	b.n	8005240 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800522c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005230:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005232:	e005      	b.n	8005240 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005234:	2300      	movs	r3, #0
 8005236:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800523e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005242:	2b00      	cmp	r3, #0
 8005244:	f000 81de 	beq.w	8005604 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524c:	4a94      	ldr	r2, [pc, #592]	; (80054a0 <UART_SetConfig+0x930>)
 800524e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005252:	461a      	mov	r2, r3
 8005254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005256:	fbb3 f3f2 	udiv	r3, r3, r2
 800525a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	4613      	mov	r3, r2
 8005262:	005b      	lsls	r3, r3, #1
 8005264:	4413      	add	r3, r2
 8005266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005268:	429a      	cmp	r2, r3
 800526a:	d305      	bcc.n	8005278 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005272:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005274:	429a      	cmp	r2, r3
 8005276:	d903      	bls.n	8005280 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800527e:	e1c1      	b.n	8005604 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005282:	2200      	movs	r2, #0
 8005284:	60bb      	str	r3, [r7, #8]
 8005286:	60fa      	str	r2, [r7, #12]
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528c:	4a84      	ldr	r2, [pc, #528]	; (80054a0 <UART_SetConfig+0x930>)
 800528e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005292:	b29b      	uxth	r3, r3
 8005294:	2200      	movs	r2, #0
 8005296:	603b      	str	r3, [r7, #0]
 8005298:	607a      	str	r2, [r7, #4]
 800529a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800529e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80052a2:	f7fb f86d 	bl	8000380 <__aeabi_uldivmod>
 80052a6:	4602      	mov	r2, r0
 80052a8:	460b      	mov	r3, r1
 80052aa:	4610      	mov	r0, r2
 80052ac:	4619      	mov	r1, r3
 80052ae:	f04f 0200 	mov.w	r2, #0
 80052b2:	f04f 0300 	mov.w	r3, #0
 80052b6:	020b      	lsls	r3, r1, #8
 80052b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80052bc:	0202      	lsls	r2, r0, #8
 80052be:	6979      	ldr	r1, [r7, #20]
 80052c0:	6849      	ldr	r1, [r1, #4]
 80052c2:	0849      	lsrs	r1, r1, #1
 80052c4:	2000      	movs	r0, #0
 80052c6:	460c      	mov	r4, r1
 80052c8:	4605      	mov	r5, r0
 80052ca:	eb12 0804 	adds.w	r8, r2, r4
 80052ce:	eb43 0905 	adc.w	r9, r3, r5
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	469a      	mov	sl, r3
 80052da:	4693      	mov	fp, r2
 80052dc:	4652      	mov	r2, sl
 80052de:	465b      	mov	r3, fp
 80052e0:	4640      	mov	r0, r8
 80052e2:	4649      	mov	r1, r9
 80052e4:	f7fb f84c 	bl	8000380 <__aeabi_uldivmod>
 80052e8:	4602      	mov	r2, r0
 80052ea:	460b      	mov	r3, r1
 80052ec:	4613      	mov	r3, r2
 80052ee:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052f6:	d308      	bcc.n	800530a <UART_SetConfig+0x79a>
 80052f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052fe:	d204      	bcs.n	800530a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005306:	60da      	str	r2, [r3, #12]
 8005308:	e17c      	b.n	8005604 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005310:	e178      	b.n	8005604 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800531a:	f040 80c5 	bne.w	80054a8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800531e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005322:	2b20      	cmp	r3, #32
 8005324:	dc48      	bgt.n	80053b8 <UART_SetConfig+0x848>
 8005326:	2b00      	cmp	r3, #0
 8005328:	db7b      	blt.n	8005422 <UART_SetConfig+0x8b2>
 800532a:	2b20      	cmp	r3, #32
 800532c:	d879      	bhi.n	8005422 <UART_SetConfig+0x8b2>
 800532e:	a201      	add	r2, pc, #4	; (adr r2, 8005334 <UART_SetConfig+0x7c4>)
 8005330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005334:	080053bf 	.word	0x080053bf
 8005338:	080053c7 	.word	0x080053c7
 800533c:	08005423 	.word	0x08005423
 8005340:	08005423 	.word	0x08005423
 8005344:	080053cf 	.word	0x080053cf
 8005348:	08005423 	.word	0x08005423
 800534c:	08005423 	.word	0x08005423
 8005350:	08005423 	.word	0x08005423
 8005354:	080053df 	.word	0x080053df
 8005358:	08005423 	.word	0x08005423
 800535c:	08005423 	.word	0x08005423
 8005360:	08005423 	.word	0x08005423
 8005364:	08005423 	.word	0x08005423
 8005368:	08005423 	.word	0x08005423
 800536c:	08005423 	.word	0x08005423
 8005370:	08005423 	.word	0x08005423
 8005374:	080053ef 	.word	0x080053ef
 8005378:	08005423 	.word	0x08005423
 800537c:	08005423 	.word	0x08005423
 8005380:	08005423 	.word	0x08005423
 8005384:	08005423 	.word	0x08005423
 8005388:	08005423 	.word	0x08005423
 800538c:	08005423 	.word	0x08005423
 8005390:	08005423 	.word	0x08005423
 8005394:	08005423 	.word	0x08005423
 8005398:	08005423 	.word	0x08005423
 800539c:	08005423 	.word	0x08005423
 80053a0:	08005423 	.word	0x08005423
 80053a4:	08005423 	.word	0x08005423
 80053a8:	08005423 	.word	0x08005423
 80053ac:	08005423 	.word	0x08005423
 80053b0:	08005423 	.word	0x08005423
 80053b4:	08005415 	.word	0x08005415
 80053b8:	2b40      	cmp	r3, #64	; 0x40
 80053ba:	d02e      	beq.n	800541a <UART_SetConfig+0x8aa>
 80053bc:	e031      	b.n	8005422 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053be:	f7fd fff3 	bl	80033a8 <HAL_RCC_GetPCLK1Freq>
 80053c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80053c4:	e033      	b.n	800542e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053c6:	f7fe f805 	bl	80033d4 <HAL_RCC_GetPCLK2Freq>
 80053ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80053cc:	e02f      	b.n	800542e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7fe ff70 	bl	80042b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80053d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053dc:	e027      	b.n	800542e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053de:	f107 0318 	add.w	r3, r7, #24
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7ff f8bc 	bl	8004560 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053ec:	e01f      	b.n	800542e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053ee:	4b2d      	ldr	r3, [pc, #180]	; (80054a4 <UART_SetConfig+0x934>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0320 	and.w	r3, r3, #32
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d009      	beq.n	800540e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80053fa:	4b2a      	ldr	r3, [pc, #168]	; (80054a4 <UART_SetConfig+0x934>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	08db      	lsrs	r3, r3, #3
 8005400:	f003 0303 	and.w	r3, r3, #3
 8005404:	4a24      	ldr	r2, [pc, #144]	; (8005498 <UART_SetConfig+0x928>)
 8005406:	fa22 f303 	lsr.w	r3, r2, r3
 800540a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800540c:	e00f      	b.n	800542e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800540e:	4b22      	ldr	r3, [pc, #136]	; (8005498 <UART_SetConfig+0x928>)
 8005410:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005412:	e00c      	b.n	800542e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005414:	4b21      	ldr	r3, [pc, #132]	; (800549c <UART_SetConfig+0x92c>)
 8005416:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005418:	e009      	b.n	800542e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800541a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800541e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005420:	e005      	b.n	800542e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005422:	2300      	movs	r3, #0
 8005424:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800542c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800542e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005430:	2b00      	cmp	r3, #0
 8005432:	f000 80e7 	beq.w	8005604 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543a:	4a19      	ldr	r2, [pc, #100]	; (80054a0 <UART_SetConfig+0x930>)
 800543c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005440:	461a      	mov	r2, r3
 8005442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005444:	fbb3 f3f2 	udiv	r3, r3, r2
 8005448:	005a      	lsls	r2, r3, #1
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	085b      	lsrs	r3, r3, #1
 8005450:	441a      	add	r2, r3
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	fbb2 f3f3 	udiv	r3, r2, r3
 800545a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800545c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545e:	2b0f      	cmp	r3, #15
 8005460:	d916      	bls.n	8005490 <UART_SetConfig+0x920>
 8005462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005468:	d212      	bcs.n	8005490 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800546a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546c:	b29b      	uxth	r3, r3
 800546e:	f023 030f 	bic.w	r3, r3, #15
 8005472:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005476:	085b      	lsrs	r3, r3, #1
 8005478:	b29b      	uxth	r3, r3
 800547a:	f003 0307 	and.w	r3, r3, #7
 800547e:	b29a      	uxth	r2, r3
 8005480:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005482:	4313      	orrs	r3, r2
 8005484:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800548c:	60da      	str	r2, [r3, #12]
 800548e:	e0b9      	b.n	8005604 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005496:	e0b5      	b.n	8005604 <UART_SetConfig+0xa94>
 8005498:	03d09000 	.word	0x03d09000
 800549c:	003d0900 	.word	0x003d0900
 80054a0:	080072a4 	.word	0x080072a4
 80054a4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80054a8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80054ac:	2b20      	cmp	r3, #32
 80054ae:	dc49      	bgt.n	8005544 <UART_SetConfig+0x9d4>
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	db7c      	blt.n	80055ae <UART_SetConfig+0xa3e>
 80054b4:	2b20      	cmp	r3, #32
 80054b6:	d87a      	bhi.n	80055ae <UART_SetConfig+0xa3e>
 80054b8:	a201      	add	r2, pc, #4	; (adr r2, 80054c0 <UART_SetConfig+0x950>)
 80054ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054be:	bf00      	nop
 80054c0:	0800554b 	.word	0x0800554b
 80054c4:	08005553 	.word	0x08005553
 80054c8:	080055af 	.word	0x080055af
 80054cc:	080055af 	.word	0x080055af
 80054d0:	0800555b 	.word	0x0800555b
 80054d4:	080055af 	.word	0x080055af
 80054d8:	080055af 	.word	0x080055af
 80054dc:	080055af 	.word	0x080055af
 80054e0:	0800556b 	.word	0x0800556b
 80054e4:	080055af 	.word	0x080055af
 80054e8:	080055af 	.word	0x080055af
 80054ec:	080055af 	.word	0x080055af
 80054f0:	080055af 	.word	0x080055af
 80054f4:	080055af 	.word	0x080055af
 80054f8:	080055af 	.word	0x080055af
 80054fc:	080055af 	.word	0x080055af
 8005500:	0800557b 	.word	0x0800557b
 8005504:	080055af 	.word	0x080055af
 8005508:	080055af 	.word	0x080055af
 800550c:	080055af 	.word	0x080055af
 8005510:	080055af 	.word	0x080055af
 8005514:	080055af 	.word	0x080055af
 8005518:	080055af 	.word	0x080055af
 800551c:	080055af 	.word	0x080055af
 8005520:	080055af 	.word	0x080055af
 8005524:	080055af 	.word	0x080055af
 8005528:	080055af 	.word	0x080055af
 800552c:	080055af 	.word	0x080055af
 8005530:	080055af 	.word	0x080055af
 8005534:	080055af 	.word	0x080055af
 8005538:	080055af 	.word	0x080055af
 800553c:	080055af 	.word	0x080055af
 8005540:	080055a1 	.word	0x080055a1
 8005544:	2b40      	cmp	r3, #64	; 0x40
 8005546:	d02e      	beq.n	80055a6 <UART_SetConfig+0xa36>
 8005548:	e031      	b.n	80055ae <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800554a:	f7fd ff2d 	bl	80033a8 <HAL_RCC_GetPCLK1Freq>
 800554e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005550:	e033      	b.n	80055ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005552:	f7fd ff3f 	bl	80033d4 <HAL_RCC_GetPCLK2Freq>
 8005556:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005558:	e02f      	b.n	80055ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800555a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800555e:	4618      	mov	r0, r3
 8005560:	f7fe feaa 	bl	80042b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005566:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005568:	e027      	b.n	80055ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800556a:	f107 0318 	add.w	r3, r7, #24
 800556e:	4618      	mov	r0, r3
 8005570:	f7fe fff6 	bl	8004560 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005578:	e01f      	b.n	80055ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800557a:	4b2d      	ldr	r3, [pc, #180]	; (8005630 <UART_SetConfig+0xac0>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0320 	and.w	r3, r3, #32
 8005582:	2b00      	cmp	r3, #0
 8005584:	d009      	beq.n	800559a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005586:	4b2a      	ldr	r3, [pc, #168]	; (8005630 <UART_SetConfig+0xac0>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	08db      	lsrs	r3, r3, #3
 800558c:	f003 0303 	and.w	r3, r3, #3
 8005590:	4a28      	ldr	r2, [pc, #160]	; (8005634 <UART_SetConfig+0xac4>)
 8005592:	fa22 f303 	lsr.w	r3, r2, r3
 8005596:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005598:	e00f      	b.n	80055ba <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800559a:	4b26      	ldr	r3, [pc, #152]	; (8005634 <UART_SetConfig+0xac4>)
 800559c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800559e:	e00c      	b.n	80055ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80055a0:	4b25      	ldr	r3, [pc, #148]	; (8005638 <UART_SetConfig+0xac8>)
 80055a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055a4:	e009      	b.n	80055ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055ac:	e005      	b.n	80055ba <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80055b8:	bf00      	nop
    }

    if (pclk != 0U)
 80055ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d021      	beq.n	8005604 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	4a1d      	ldr	r2, [pc, #116]	; (800563c <UART_SetConfig+0xacc>)
 80055c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055ca:	461a      	mov	r2, r3
 80055cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	085b      	lsrs	r3, r3, #1
 80055d8:	441a      	add	r2, r3
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e6:	2b0f      	cmp	r3, #15
 80055e8:	d909      	bls.n	80055fe <UART_SetConfig+0xa8e>
 80055ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055f0:	d205      	bcs.n	80055fe <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	60da      	str	r2, [r3, #12]
 80055fc:	e002      	b.n	8005604 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	2201      	movs	r2, #1
 8005608:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	2201      	movs	r2, #1
 8005610:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	2200      	movs	r2, #0
 8005618:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2200      	movs	r2, #0
 800561e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005620:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005624:	4618      	mov	r0, r3
 8005626:	3748      	adds	r7, #72	; 0x48
 8005628:	46bd      	mov	sp, r7
 800562a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800562e:	bf00      	nop
 8005630:	58024400 	.word	0x58024400
 8005634:	03d09000 	.word	0x03d09000
 8005638:	003d0900 	.word	0x003d0900
 800563c:	080072a4 	.word	0x080072a4

08005640 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00a      	beq.n	800566a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00a      	beq.n	800568c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005690:	f003 0304 	and.w	r3, r3, #4
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00a      	beq.n	80056ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b2:	f003 0308 	and.w	r3, r3, #8
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00a      	beq.n	80056d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d4:	f003 0310 	and.w	r3, r3, #16
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00a      	beq.n	80056f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f6:	f003 0320 	and.w	r3, r3, #32
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00a      	beq.n	8005714 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	430a      	orrs	r2, r1
 8005712:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571c:	2b00      	cmp	r3, #0
 800571e:	d01a      	beq.n	8005756 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800573a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800573e:	d10a      	bne.n	8005756 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00a      	beq.n	8005778 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	430a      	orrs	r2, r1
 8005776:	605a      	str	r2, [r3, #4]
  }
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af02      	add	r7, sp, #8
 800578a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005794:	f7fb fdc6 	bl	8001324 <HAL_GetTick>
 8005798:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0308 	and.w	r3, r3, #8
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d10e      	bne.n	80057c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f82f 	bl	800581a <UART_WaitOnFlagUntilTimeout>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d001      	beq.n	80057c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e025      	b.n	8005812 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0304 	and.w	r3, r3, #4
 80057d0:	2b04      	cmp	r3, #4
 80057d2:	d10e      	bne.n	80057f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f819 	bl	800581a <UART_WaitOnFlagUntilTimeout>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d001      	beq.n	80057f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e00f      	b.n	8005812 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2220      	movs	r2, #32
 80057f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2220      	movs	r2, #32
 80057fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b09c      	sub	sp, #112	; 0x70
 800581e:	af00      	add	r7, sp, #0
 8005820:	60f8      	str	r0, [r7, #12]
 8005822:	60b9      	str	r1, [r7, #8]
 8005824:	603b      	str	r3, [r7, #0]
 8005826:	4613      	mov	r3, r2
 8005828:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800582a:	e0a9      	b.n	8005980 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800582c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800582e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005832:	f000 80a5 	beq.w	8005980 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005836:	f7fb fd75 	bl	8001324 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005842:	429a      	cmp	r2, r3
 8005844:	d302      	bcc.n	800584c <UART_WaitOnFlagUntilTimeout+0x32>
 8005846:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005848:	2b00      	cmp	r3, #0
 800584a:	d140      	bne.n	80058ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005854:	e853 3f00 	ldrex	r3, [r3]
 8005858:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800585a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800585c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005860:	667b      	str	r3, [r7, #100]	; 0x64
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	461a      	mov	r2, r3
 8005868:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800586a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800586c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005870:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005872:	e841 2300 	strex	r3, r2, [r1]
 8005876:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1e6      	bne.n	800584c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	3308      	adds	r3, #8
 8005884:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005888:	e853 3f00 	ldrex	r3, [r3]
 800588c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800588e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005890:	f023 0301 	bic.w	r3, r3, #1
 8005894:	663b      	str	r3, [r7, #96]	; 0x60
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3308      	adds	r3, #8
 800589c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800589e:	64ba      	str	r2, [r7, #72]	; 0x48
 80058a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80058a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058a6:	e841 2300 	strex	r3, r2, [r1]
 80058aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80058ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1e5      	bne.n	800587e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2220      	movs	r2, #32
 80058b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2220      	movs	r2, #32
 80058be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e069      	b.n	80059a2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0304 	and.w	r3, r3, #4
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d051      	beq.n	8005980 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058ea:	d149      	bne.n	8005980 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fe:	e853 3f00 	ldrex	r3, [r3]
 8005902:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005906:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800590a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	461a      	mov	r2, r3
 8005912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005914:	637b      	str	r3, [r7, #52]	; 0x34
 8005916:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005918:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800591a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800591c:	e841 2300 	strex	r3, r2, [r1]
 8005920:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1e6      	bne.n	80058f6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	3308      	adds	r3, #8
 800592e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	e853 3f00 	ldrex	r3, [r3]
 8005936:	613b      	str	r3, [r7, #16]
   return(result);
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	f023 0301 	bic.w	r3, r3, #1
 800593e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3308      	adds	r3, #8
 8005946:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005948:	623a      	str	r2, [r7, #32]
 800594a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594c:	69f9      	ldr	r1, [r7, #28]
 800594e:	6a3a      	ldr	r2, [r7, #32]
 8005950:	e841 2300 	strex	r3, r2, [r1]
 8005954:	61bb      	str	r3, [r7, #24]
   return(result);
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1e5      	bne.n	8005928 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2220      	movs	r2, #32
 8005960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2220      	movs	r2, #32
 8005968:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2220      	movs	r2, #32
 8005970:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e010      	b.n	80059a2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	69da      	ldr	r2, [r3, #28]
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	4013      	ands	r3, r2
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	429a      	cmp	r2, r3
 800598e:	bf0c      	ite	eq
 8005990:	2301      	moveq	r3, #1
 8005992:	2300      	movne	r3, #0
 8005994:	b2db      	uxtb	r3, r3
 8005996:	461a      	mov	r2, r3
 8005998:	79fb      	ldrb	r3, [r7, #7]
 800599a:	429a      	cmp	r2, r3
 800599c:	f43f af46 	beq.w	800582c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3770      	adds	r7, #112	; 0x70
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b085      	sub	sp, #20
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d101      	bne.n	80059c0 <HAL_UARTEx_DisableFifoMode+0x16>
 80059bc:	2302      	movs	r3, #2
 80059be:	e027      	b.n	8005a10 <HAL_UARTEx_DisableFifoMode+0x66>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2224      	movs	r2, #36	; 0x24
 80059cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 0201 	bic.w	r2, r2, #1
 80059e6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80059ee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2220      	movs	r2, #32
 8005a02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d101      	bne.n	8005a34 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005a30:	2302      	movs	r3, #2
 8005a32:	e02d      	b.n	8005a90 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2224      	movs	r2, #36	; 0x24
 8005a40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f022 0201 	bic.w	r2, r2, #1
 8005a5a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 f84f 	bl	8005b14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2220      	movs	r2, #32
 8005a82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d101      	bne.n	8005ab0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005aac:	2302      	movs	r3, #2
 8005aae:	e02d      	b.n	8005b0c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2224      	movs	r2, #36	; 0x24
 8005abc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 0201 	bic.w	r2, r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	683a      	ldr	r2, [r7, #0]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f811 	bl	8005b14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2220      	movs	r2, #32
 8005afe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d108      	bne.n	8005b36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005b34:	e031      	b.n	8005b9a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005b36:	2310      	movs	r3, #16
 8005b38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005b3a:	2310      	movs	r3, #16
 8005b3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	0e5b      	lsrs	r3, r3, #25
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	f003 0307 	and.w	r3, r3, #7
 8005b4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	0f5b      	lsrs	r3, r3, #29
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	f003 0307 	and.w	r3, r3, #7
 8005b5c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b5e:	7bbb      	ldrb	r3, [r7, #14]
 8005b60:	7b3a      	ldrb	r2, [r7, #12]
 8005b62:	4911      	ldr	r1, [pc, #68]	; (8005ba8 <UARTEx_SetNbDataToProcess+0x94>)
 8005b64:	5c8a      	ldrb	r2, [r1, r2]
 8005b66:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005b6a:	7b3a      	ldrb	r2, [r7, #12]
 8005b6c:	490f      	ldr	r1, [pc, #60]	; (8005bac <UARTEx_SetNbDataToProcess+0x98>)
 8005b6e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b70:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b7c:	7bfb      	ldrb	r3, [r7, #15]
 8005b7e:	7b7a      	ldrb	r2, [r7, #13]
 8005b80:	4909      	ldr	r1, [pc, #36]	; (8005ba8 <UARTEx_SetNbDataToProcess+0x94>)
 8005b82:	5c8a      	ldrb	r2, [r1, r2]
 8005b84:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005b88:	7b7a      	ldrb	r2, [r7, #13]
 8005b8a:	4908      	ldr	r1, [pc, #32]	; (8005bac <UARTEx_SetNbDataToProcess+0x98>)
 8005b8c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b8e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005b9a:	bf00      	nop
 8005b9c:	3714      	adds	r7, #20
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	080072bc 	.word	0x080072bc
 8005bac:	080072c4 	.word	0x080072c4

08005bb0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bb0:	b084      	sub	sp, #16
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b084      	sub	sp, #16
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
 8005bba:	f107 001c 	add.w	r0, r7, #28
 8005bbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d120      	bne.n	8005c0a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	68da      	ldr	r2, [r3, #12]
 8005bd8:	4b2a      	ldr	r3, [pc, #168]	; (8005c84 <USB_CoreInit+0xd4>)
 8005bda:	4013      	ands	r3, r2
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d105      	bne.n	8005bfe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 faac 	bl	800615c <USB_CoreReset>
 8005c04:	4603      	mov	r3, r0
 8005c06:	73fb      	strb	r3, [r7, #15]
 8005c08:	e01a      	b.n	8005c40 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 faa0 	bl	800615c <USB_CoreReset>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d106      	bne.n	8005c34 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	639a      	str	r2, [r3, #56]	; 0x38
 8005c32:	e005      	b.n	8005c40 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d116      	bne.n	8005c74 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c54:	4b0c      	ldr	r3, [pc, #48]	; (8005c88 <USB_CoreInit+0xd8>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f043 0206 	orr.w	r2, r3, #6
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f043 0220 	orr.w	r2, r3, #32
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c80:	b004      	add	sp, #16
 8005c82:	4770      	bx	lr
 8005c84:	ffbdffbf 	.word	0xffbdffbf
 8005c88:	03ee0000 	.word	0x03ee0000

08005c8c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f023 0201 	bic.w	r2, r3, #1
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b084      	sub	sp, #16
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005cca:	78fb      	ldrb	r3, [r7, #3]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d115      	bne.n	8005cfc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005cdc:	2001      	movs	r0, #1
 8005cde:	f7fb fb2d 	bl	800133c <HAL_Delay>
      ms++;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fa29 	bl	8006140 <USB_GetMode>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d01e      	beq.n	8005d32 <USB_SetCurrentMode+0x84>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2b31      	cmp	r3, #49	; 0x31
 8005cf8:	d9f0      	bls.n	8005cdc <USB_SetCurrentMode+0x2e>
 8005cfa:	e01a      	b.n	8005d32 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005cfc:	78fb      	ldrb	r3, [r7, #3]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d115      	bne.n	8005d2e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005d0e:	2001      	movs	r0, #1
 8005d10:	f7fb fb14 	bl	800133c <HAL_Delay>
      ms++;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	3301      	adds	r3, #1
 8005d18:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fa10 	bl	8006140 <USB_GetMode>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d005      	beq.n	8005d32 <USB_SetCurrentMode+0x84>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2b31      	cmp	r3, #49	; 0x31
 8005d2a:	d9f0      	bls.n	8005d0e <USB_SetCurrentMode+0x60>
 8005d2c:	e001      	b.n	8005d32 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e005      	b.n	8005d3e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2b32      	cmp	r3, #50	; 0x32
 8005d36:	d101      	bne.n	8005d3c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e000      	b.n	8005d3e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
	...

08005d48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d48:	b084      	sub	sp, #16
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b086      	sub	sp, #24
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
 8005d52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005d56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005d62:	2300      	movs	r3, #0
 8005d64:	613b      	str	r3, [r7, #16]
 8005d66:	e009      	b.n	8005d7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	3340      	adds	r3, #64	; 0x40
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	4413      	add	r3, r2
 8005d72:	2200      	movs	r2, #0
 8005d74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	613b      	str	r3, [r7, #16]
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	2b0e      	cmp	r3, #14
 8005d80:	d9f2      	bls.n	8005d68 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d11c      	bne.n	8005dc2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d96:	f043 0302 	orr.w	r3, r3, #2
 8005d9a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	601a      	str	r2, [r3, #0]
 8005dc0:	e005      	b.n	8005dce <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005de0:	4619      	mov	r1, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005de8:	461a      	mov	r2, r3
 8005dea:	680b      	ldr	r3, [r1, #0]
 8005dec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d10c      	bne.n	8005e0e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d104      	bne.n	8005e04 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 f965 	bl	80060cc <USB_SetDevSpeed>
 8005e02:	e008      	b.n	8005e16 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005e04:	2101      	movs	r1, #1
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f960 	bl	80060cc <USB_SetDevSpeed>
 8005e0c:	e003      	b.n	8005e16 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005e0e:	2103      	movs	r1, #3
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 f95b 	bl	80060cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e16:	2110      	movs	r1, #16
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 f8f3 	bl	8006004 <USB_FlushTxFifo>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d001      	beq.n	8005e28 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 f91f 	bl	800606c <USB_FlushRxFifo>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d001      	beq.n	8005e38 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e3e:	461a      	mov	r2, r3
 8005e40:	2300      	movs	r3, #0
 8005e42:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e56:	461a      	mov	r2, r3
 8005e58:	2300      	movs	r3, #0
 8005e5a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	613b      	str	r3, [r7, #16]
 8005e60:	e043      	b.n	8005eea <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e78:	d118      	bne.n	8005eac <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10a      	bne.n	8005e96 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	015a      	lsls	r2, r3, #5
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	4413      	add	r3, r2
 8005e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e92:	6013      	str	r3, [r2, #0]
 8005e94:	e013      	b.n	8005ebe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ea8:	6013      	str	r3, [r2, #0]
 8005eaa:	e008      	b.n	8005ebe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb8:	461a      	mov	r2, r3
 8005eba:	2300      	movs	r3, #0
 8005ebc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	015a      	lsls	r2, r3, #5
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eca:	461a      	mov	r2, r3
 8005ecc:	2300      	movs	r3, #0
 8005ece:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005edc:	461a      	mov	r2, r3
 8005ede:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ee2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	613b      	str	r3, [r7, #16]
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d3b7      	bcc.n	8005e62 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	613b      	str	r3, [r7, #16]
 8005ef6:	e043      	b.n	8005f80 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	015a      	lsls	r2, r3, #5
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	4413      	add	r3, r2
 8005f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f0e:	d118      	bne.n	8005f42 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10a      	bne.n	8005f2c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f22:	461a      	mov	r2, r3
 8005f24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f28:	6013      	str	r3, [r2, #0]
 8005f2a:	e013      	b.n	8005f54 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	015a      	lsls	r2, r3, #5
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f38:	461a      	mov	r2, r3
 8005f3a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f3e:	6013      	str	r3, [r2, #0]
 8005f40:	e008      	b.n	8005f54 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	015a      	lsls	r2, r3, #5
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f4e:	461a      	mov	r2, r3
 8005f50:	2300      	movs	r3, #0
 8005f52:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f60:	461a      	mov	r2, r3
 8005f62:	2300      	movs	r3, #0
 8005f64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	015a      	lsls	r2, r3, #5
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f72:	461a      	mov	r2, r3
 8005f74:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f78:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	613b      	str	r3, [r7, #16]
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d3b7      	bcc.n	8005ef8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f9a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005fa8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d105      	bne.n	8005fbc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	f043 0210 	orr.w	r2, r3, #16
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	699a      	ldr	r2, [r3, #24]
 8005fc0:	4b0e      	ldr	r3, [pc, #56]	; (8005ffc <USB_DevInit+0x2b4>)
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d005      	beq.n	8005fda <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	f043 0208 	orr.w	r2, r3, #8
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d105      	bne.n	8005fec <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	699a      	ldr	r2, [r3, #24]
 8005fe4:	4b06      	ldr	r3, [pc, #24]	; (8006000 <USB_DevInit+0x2b8>)
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3718      	adds	r7, #24
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ff8:	b004      	add	sp, #16
 8005ffa:	4770      	bx	lr
 8005ffc:	803c3800 	.word	0x803c3800
 8006000:	40000004 	.word	0x40000004

08006004 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800600e:	2300      	movs	r3, #0
 8006010:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	3301      	adds	r3, #1
 8006016:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	4a13      	ldr	r2, [pc, #76]	; (8006068 <USB_FlushTxFifo+0x64>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d901      	bls.n	8006024 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e01b      	b.n	800605c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	2b00      	cmp	r3, #0
 800602a:	daf2      	bge.n	8006012 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800602c:	2300      	movs	r3, #0
 800602e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	019b      	lsls	r3, r3, #6
 8006034:	f043 0220 	orr.w	r2, r3, #32
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	3301      	adds	r3, #1
 8006040:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	4a08      	ldr	r2, [pc, #32]	; (8006068 <USB_FlushTxFifo+0x64>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d901      	bls.n	800604e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e006      	b.n	800605c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	f003 0320 	and.w	r3, r3, #32
 8006056:	2b20      	cmp	r3, #32
 8006058:	d0f0      	beq.n	800603c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3714      	adds	r7, #20
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr
 8006068:	00030d40 	.word	0x00030d40

0800606c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006074:	2300      	movs	r3, #0
 8006076:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	3301      	adds	r3, #1
 800607c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	4a11      	ldr	r2, [pc, #68]	; (80060c8 <USB_FlushRxFifo+0x5c>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d901      	bls.n	800608a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e018      	b.n	80060bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	2b00      	cmp	r3, #0
 8006090:	daf2      	bge.n	8006078 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006092:	2300      	movs	r3, #0
 8006094:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2210      	movs	r2, #16
 800609a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	3301      	adds	r3, #1
 80060a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	4a08      	ldr	r2, [pc, #32]	; (80060c8 <USB_FlushRxFifo+0x5c>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d901      	bls.n	80060ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e006      	b.n	80060bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	f003 0310 	and.w	r3, r3, #16
 80060b6:	2b10      	cmp	r3, #16
 80060b8:	d0f0      	beq.n	800609c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3714      	adds	r7, #20
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr
 80060c8:	00030d40 	.word	0x00030d40

080060cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	460b      	mov	r3, r1
 80060d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	78fb      	ldrb	r3, [r7, #3]
 80060e6:	68f9      	ldr	r1, [r7, #12]
 80060e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060ec:	4313      	orrs	r3, r2
 80060ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80060fe:	b480      	push	{r7}
 8006100:	b085      	sub	sp, #20
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006118:	f023 0303 	bic.w	r3, r3, #3
 800611c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800612c:	f043 0302 	orr.w	r3, r3, #2
 8006130:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	f003 0301 	and.w	r3, r3, #1
}
 8006150:	4618      	mov	r0, r3
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006164:	2300      	movs	r3, #0
 8006166:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	3301      	adds	r3, #1
 800616c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	4a13      	ldr	r2, [pc, #76]	; (80061c0 <USB_CoreReset+0x64>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d901      	bls.n	800617a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e01b      	b.n	80061b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	2b00      	cmp	r3, #0
 8006180:	daf2      	bge.n	8006168 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006182:	2300      	movs	r3, #0
 8006184:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	f043 0201 	orr.w	r2, r3, #1
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	3301      	adds	r3, #1
 8006196:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4a09      	ldr	r2, [pc, #36]	; (80061c0 <USB_CoreReset+0x64>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d901      	bls.n	80061a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e006      	b.n	80061b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d0f0      	beq.n	8006192 <USB_CoreReset+0x36>

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3714      	adds	r7, #20
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	00030d40 	.word	0x00030d40

080061c4 <__errno>:
 80061c4:	4b01      	ldr	r3, [pc, #4]	; (80061cc <__errno+0x8>)
 80061c6:	6818      	ldr	r0, [r3, #0]
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	24000010 	.word	0x24000010

080061d0 <__sflush_r>:
 80061d0:	898a      	ldrh	r2, [r1, #12]
 80061d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061d6:	4605      	mov	r5, r0
 80061d8:	0710      	lsls	r0, r2, #28
 80061da:	460c      	mov	r4, r1
 80061dc:	d458      	bmi.n	8006290 <__sflush_r+0xc0>
 80061de:	684b      	ldr	r3, [r1, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	dc05      	bgt.n	80061f0 <__sflush_r+0x20>
 80061e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	dc02      	bgt.n	80061f0 <__sflush_r+0x20>
 80061ea:	2000      	movs	r0, #0
 80061ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061f2:	2e00      	cmp	r6, #0
 80061f4:	d0f9      	beq.n	80061ea <__sflush_r+0x1a>
 80061f6:	2300      	movs	r3, #0
 80061f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80061fc:	682f      	ldr	r7, [r5, #0]
 80061fe:	602b      	str	r3, [r5, #0]
 8006200:	d032      	beq.n	8006268 <__sflush_r+0x98>
 8006202:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006204:	89a3      	ldrh	r3, [r4, #12]
 8006206:	075a      	lsls	r2, r3, #29
 8006208:	d505      	bpl.n	8006216 <__sflush_r+0x46>
 800620a:	6863      	ldr	r3, [r4, #4]
 800620c:	1ac0      	subs	r0, r0, r3
 800620e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006210:	b10b      	cbz	r3, 8006216 <__sflush_r+0x46>
 8006212:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006214:	1ac0      	subs	r0, r0, r3
 8006216:	2300      	movs	r3, #0
 8006218:	4602      	mov	r2, r0
 800621a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800621c:	6a21      	ldr	r1, [r4, #32]
 800621e:	4628      	mov	r0, r5
 8006220:	47b0      	blx	r6
 8006222:	1c43      	adds	r3, r0, #1
 8006224:	89a3      	ldrh	r3, [r4, #12]
 8006226:	d106      	bne.n	8006236 <__sflush_r+0x66>
 8006228:	6829      	ldr	r1, [r5, #0]
 800622a:	291d      	cmp	r1, #29
 800622c:	d82c      	bhi.n	8006288 <__sflush_r+0xb8>
 800622e:	4a2a      	ldr	r2, [pc, #168]	; (80062d8 <__sflush_r+0x108>)
 8006230:	40ca      	lsrs	r2, r1
 8006232:	07d6      	lsls	r6, r2, #31
 8006234:	d528      	bpl.n	8006288 <__sflush_r+0xb8>
 8006236:	2200      	movs	r2, #0
 8006238:	6062      	str	r2, [r4, #4]
 800623a:	04d9      	lsls	r1, r3, #19
 800623c:	6922      	ldr	r2, [r4, #16]
 800623e:	6022      	str	r2, [r4, #0]
 8006240:	d504      	bpl.n	800624c <__sflush_r+0x7c>
 8006242:	1c42      	adds	r2, r0, #1
 8006244:	d101      	bne.n	800624a <__sflush_r+0x7a>
 8006246:	682b      	ldr	r3, [r5, #0]
 8006248:	b903      	cbnz	r3, 800624c <__sflush_r+0x7c>
 800624a:	6560      	str	r0, [r4, #84]	; 0x54
 800624c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800624e:	602f      	str	r7, [r5, #0]
 8006250:	2900      	cmp	r1, #0
 8006252:	d0ca      	beq.n	80061ea <__sflush_r+0x1a>
 8006254:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006258:	4299      	cmp	r1, r3
 800625a:	d002      	beq.n	8006262 <__sflush_r+0x92>
 800625c:	4628      	mov	r0, r5
 800625e:	f000 f9b1 	bl	80065c4 <_free_r>
 8006262:	2000      	movs	r0, #0
 8006264:	6360      	str	r0, [r4, #52]	; 0x34
 8006266:	e7c1      	b.n	80061ec <__sflush_r+0x1c>
 8006268:	6a21      	ldr	r1, [r4, #32]
 800626a:	2301      	movs	r3, #1
 800626c:	4628      	mov	r0, r5
 800626e:	47b0      	blx	r6
 8006270:	1c41      	adds	r1, r0, #1
 8006272:	d1c7      	bne.n	8006204 <__sflush_r+0x34>
 8006274:	682b      	ldr	r3, [r5, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d0c4      	beq.n	8006204 <__sflush_r+0x34>
 800627a:	2b1d      	cmp	r3, #29
 800627c:	d001      	beq.n	8006282 <__sflush_r+0xb2>
 800627e:	2b16      	cmp	r3, #22
 8006280:	d101      	bne.n	8006286 <__sflush_r+0xb6>
 8006282:	602f      	str	r7, [r5, #0]
 8006284:	e7b1      	b.n	80061ea <__sflush_r+0x1a>
 8006286:	89a3      	ldrh	r3, [r4, #12]
 8006288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800628c:	81a3      	strh	r3, [r4, #12]
 800628e:	e7ad      	b.n	80061ec <__sflush_r+0x1c>
 8006290:	690f      	ldr	r7, [r1, #16]
 8006292:	2f00      	cmp	r7, #0
 8006294:	d0a9      	beq.n	80061ea <__sflush_r+0x1a>
 8006296:	0793      	lsls	r3, r2, #30
 8006298:	680e      	ldr	r6, [r1, #0]
 800629a:	bf08      	it	eq
 800629c:	694b      	ldreq	r3, [r1, #20]
 800629e:	600f      	str	r7, [r1, #0]
 80062a0:	bf18      	it	ne
 80062a2:	2300      	movne	r3, #0
 80062a4:	eba6 0807 	sub.w	r8, r6, r7
 80062a8:	608b      	str	r3, [r1, #8]
 80062aa:	f1b8 0f00 	cmp.w	r8, #0
 80062ae:	dd9c      	ble.n	80061ea <__sflush_r+0x1a>
 80062b0:	6a21      	ldr	r1, [r4, #32]
 80062b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80062b4:	4643      	mov	r3, r8
 80062b6:	463a      	mov	r2, r7
 80062b8:	4628      	mov	r0, r5
 80062ba:	47b0      	blx	r6
 80062bc:	2800      	cmp	r0, #0
 80062be:	dc06      	bgt.n	80062ce <__sflush_r+0xfe>
 80062c0:	89a3      	ldrh	r3, [r4, #12]
 80062c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062c6:	81a3      	strh	r3, [r4, #12]
 80062c8:	f04f 30ff 	mov.w	r0, #4294967295
 80062cc:	e78e      	b.n	80061ec <__sflush_r+0x1c>
 80062ce:	4407      	add	r7, r0
 80062d0:	eba8 0800 	sub.w	r8, r8, r0
 80062d4:	e7e9      	b.n	80062aa <__sflush_r+0xda>
 80062d6:	bf00      	nop
 80062d8:	20400001 	.word	0x20400001

080062dc <_fflush_r>:
 80062dc:	b538      	push	{r3, r4, r5, lr}
 80062de:	690b      	ldr	r3, [r1, #16]
 80062e0:	4605      	mov	r5, r0
 80062e2:	460c      	mov	r4, r1
 80062e4:	b913      	cbnz	r3, 80062ec <_fflush_r+0x10>
 80062e6:	2500      	movs	r5, #0
 80062e8:	4628      	mov	r0, r5
 80062ea:	bd38      	pop	{r3, r4, r5, pc}
 80062ec:	b118      	cbz	r0, 80062f6 <_fflush_r+0x1a>
 80062ee:	6983      	ldr	r3, [r0, #24]
 80062f0:	b90b      	cbnz	r3, 80062f6 <_fflush_r+0x1a>
 80062f2:	f000 f899 	bl	8006428 <__sinit>
 80062f6:	4b14      	ldr	r3, [pc, #80]	; (8006348 <_fflush_r+0x6c>)
 80062f8:	429c      	cmp	r4, r3
 80062fa:	d11b      	bne.n	8006334 <_fflush_r+0x58>
 80062fc:	686c      	ldr	r4, [r5, #4]
 80062fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d0ef      	beq.n	80062e6 <_fflush_r+0xa>
 8006306:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006308:	07d0      	lsls	r0, r2, #31
 800630a:	d404      	bmi.n	8006316 <_fflush_r+0x3a>
 800630c:	0599      	lsls	r1, r3, #22
 800630e:	d402      	bmi.n	8006316 <_fflush_r+0x3a>
 8006310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006312:	f000 f94c 	bl	80065ae <__retarget_lock_acquire_recursive>
 8006316:	4628      	mov	r0, r5
 8006318:	4621      	mov	r1, r4
 800631a:	f7ff ff59 	bl	80061d0 <__sflush_r>
 800631e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006320:	07da      	lsls	r2, r3, #31
 8006322:	4605      	mov	r5, r0
 8006324:	d4e0      	bmi.n	80062e8 <_fflush_r+0xc>
 8006326:	89a3      	ldrh	r3, [r4, #12]
 8006328:	059b      	lsls	r3, r3, #22
 800632a:	d4dd      	bmi.n	80062e8 <_fflush_r+0xc>
 800632c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800632e:	f000 f93f 	bl	80065b0 <__retarget_lock_release_recursive>
 8006332:	e7d9      	b.n	80062e8 <_fflush_r+0xc>
 8006334:	4b05      	ldr	r3, [pc, #20]	; (800634c <_fflush_r+0x70>)
 8006336:	429c      	cmp	r4, r3
 8006338:	d101      	bne.n	800633e <_fflush_r+0x62>
 800633a:	68ac      	ldr	r4, [r5, #8]
 800633c:	e7df      	b.n	80062fe <_fflush_r+0x22>
 800633e:	4b04      	ldr	r3, [pc, #16]	; (8006350 <_fflush_r+0x74>)
 8006340:	429c      	cmp	r4, r3
 8006342:	bf08      	it	eq
 8006344:	68ec      	ldreq	r4, [r5, #12]
 8006346:	e7da      	b.n	80062fe <_fflush_r+0x22>
 8006348:	080072ec 	.word	0x080072ec
 800634c:	0800730c 	.word	0x0800730c
 8006350:	080072cc 	.word	0x080072cc

08006354 <fflush>:
 8006354:	4601      	mov	r1, r0
 8006356:	b920      	cbnz	r0, 8006362 <fflush+0xe>
 8006358:	4b04      	ldr	r3, [pc, #16]	; (800636c <fflush+0x18>)
 800635a:	4905      	ldr	r1, [pc, #20]	; (8006370 <fflush+0x1c>)
 800635c:	6818      	ldr	r0, [r3, #0]
 800635e:	f000 b8e1 	b.w	8006524 <_fwalk_reent>
 8006362:	4b04      	ldr	r3, [pc, #16]	; (8006374 <fflush+0x20>)
 8006364:	6818      	ldr	r0, [r3, #0]
 8006366:	f7ff bfb9 	b.w	80062dc <_fflush_r>
 800636a:	bf00      	nop
 800636c:	0800732c 	.word	0x0800732c
 8006370:	080062dd 	.word	0x080062dd
 8006374:	24000010 	.word	0x24000010

08006378 <std>:
 8006378:	2300      	movs	r3, #0
 800637a:	b510      	push	{r4, lr}
 800637c:	4604      	mov	r4, r0
 800637e:	e9c0 3300 	strd	r3, r3, [r0]
 8006382:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006386:	6083      	str	r3, [r0, #8]
 8006388:	8181      	strh	r1, [r0, #12]
 800638a:	6643      	str	r3, [r0, #100]	; 0x64
 800638c:	81c2      	strh	r2, [r0, #14]
 800638e:	6183      	str	r3, [r0, #24]
 8006390:	4619      	mov	r1, r3
 8006392:	2208      	movs	r2, #8
 8006394:	305c      	adds	r0, #92	; 0x5c
 8006396:	f000 f90c 	bl	80065b2 <memset>
 800639a:	4b05      	ldr	r3, [pc, #20]	; (80063b0 <std+0x38>)
 800639c:	6263      	str	r3, [r4, #36]	; 0x24
 800639e:	4b05      	ldr	r3, [pc, #20]	; (80063b4 <std+0x3c>)
 80063a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80063a2:	4b05      	ldr	r3, [pc, #20]	; (80063b8 <std+0x40>)
 80063a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80063a6:	4b05      	ldr	r3, [pc, #20]	; (80063bc <std+0x44>)
 80063a8:	6224      	str	r4, [r4, #32]
 80063aa:	6323      	str	r3, [r4, #48]	; 0x30
 80063ac:	bd10      	pop	{r4, pc}
 80063ae:	bf00      	nop
 80063b0:	080068c1 	.word	0x080068c1
 80063b4:	080068e3 	.word	0x080068e3
 80063b8:	0800691b 	.word	0x0800691b
 80063bc:	0800693f 	.word	0x0800693f

080063c0 <_cleanup_r>:
 80063c0:	4901      	ldr	r1, [pc, #4]	; (80063c8 <_cleanup_r+0x8>)
 80063c2:	f000 b8af 	b.w	8006524 <_fwalk_reent>
 80063c6:	bf00      	nop
 80063c8:	080062dd 	.word	0x080062dd

080063cc <__sfmoreglue>:
 80063cc:	b570      	push	{r4, r5, r6, lr}
 80063ce:	2268      	movs	r2, #104	; 0x68
 80063d0:	1e4d      	subs	r5, r1, #1
 80063d2:	4355      	muls	r5, r2
 80063d4:	460e      	mov	r6, r1
 80063d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80063da:	f000 f95f 	bl	800669c <_malloc_r>
 80063de:	4604      	mov	r4, r0
 80063e0:	b140      	cbz	r0, 80063f4 <__sfmoreglue+0x28>
 80063e2:	2100      	movs	r1, #0
 80063e4:	e9c0 1600 	strd	r1, r6, [r0]
 80063e8:	300c      	adds	r0, #12
 80063ea:	60a0      	str	r0, [r4, #8]
 80063ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80063f0:	f000 f8df 	bl	80065b2 <memset>
 80063f4:	4620      	mov	r0, r4
 80063f6:	bd70      	pop	{r4, r5, r6, pc}

080063f8 <__sfp_lock_acquire>:
 80063f8:	4801      	ldr	r0, [pc, #4]	; (8006400 <__sfp_lock_acquire+0x8>)
 80063fa:	f000 b8d8 	b.w	80065ae <__retarget_lock_acquire_recursive>
 80063fe:	bf00      	nop
 8006400:	240007e5 	.word	0x240007e5

08006404 <__sfp_lock_release>:
 8006404:	4801      	ldr	r0, [pc, #4]	; (800640c <__sfp_lock_release+0x8>)
 8006406:	f000 b8d3 	b.w	80065b0 <__retarget_lock_release_recursive>
 800640a:	bf00      	nop
 800640c:	240007e5 	.word	0x240007e5

08006410 <__sinit_lock_acquire>:
 8006410:	4801      	ldr	r0, [pc, #4]	; (8006418 <__sinit_lock_acquire+0x8>)
 8006412:	f000 b8cc 	b.w	80065ae <__retarget_lock_acquire_recursive>
 8006416:	bf00      	nop
 8006418:	240007e6 	.word	0x240007e6

0800641c <__sinit_lock_release>:
 800641c:	4801      	ldr	r0, [pc, #4]	; (8006424 <__sinit_lock_release+0x8>)
 800641e:	f000 b8c7 	b.w	80065b0 <__retarget_lock_release_recursive>
 8006422:	bf00      	nop
 8006424:	240007e6 	.word	0x240007e6

08006428 <__sinit>:
 8006428:	b510      	push	{r4, lr}
 800642a:	4604      	mov	r4, r0
 800642c:	f7ff fff0 	bl	8006410 <__sinit_lock_acquire>
 8006430:	69a3      	ldr	r3, [r4, #24]
 8006432:	b11b      	cbz	r3, 800643c <__sinit+0x14>
 8006434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006438:	f7ff bff0 	b.w	800641c <__sinit_lock_release>
 800643c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006440:	6523      	str	r3, [r4, #80]	; 0x50
 8006442:	4b13      	ldr	r3, [pc, #76]	; (8006490 <__sinit+0x68>)
 8006444:	4a13      	ldr	r2, [pc, #76]	; (8006494 <__sinit+0x6c>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	62a2      	str	r2, [r4, #40]	; 0x28
 800644a:	42a3      	cmp	r3, r4
 800644c:	bf04      	itt	eq
 800644e:	2301      	moveq	r3, #1
 8006450:	61a3      	streq	r3, [r4, #24]
 8006452:	4620      	mov	r0, r4
 8006454:	f000 f820 	bl	8006498 <__sfp>
 8006458:	6060      	str	r0, [r4, #4]
 800645a:	4620      	mov	r0, r4
 800645c:	f000 f81c 	bl	8006498 <__sfp>
 8006460:	60a0      	str	r0, [r4, #8]
 8006462:	4620      	mov	r0, r4
 8006464:	f000 f818 	bl	8006498 <__sfp>
 8006468:	2200      	movs	r2, #0
 800646a:	60e0      	str	r0, [r4, #12]
 800646c:	2104      	movs	r1, #4
 800646e:	6860      	ldr	r0, [r4, #4]
 8006470:	f7ff ff82 	bl	8006378 <std>
 8006474:	68a0      	ldr	r0, [r4, #8]
 8006476:	2201      	movs	r2, #1
 8006478:	2109      	movs	r1, #9
 800647a:	f7ff ff7d 	bl	8006378 <std>
 800647e:	68e0      	ldr	r0, [r4, #12]
 8006480:	2202      	movs	r2, #2
 8006482:	2112      	movs	r1, #18
 8006484:	f7ff ff78 	bl	8006378 <std>
 8006488:	2301      	movs	r3, #1
 800648a:	61a3      	str	r3, [r4, #24]
 800648c:	e7d2      	b.n	8006434 <__sinit+0xc>
 800648e:	bf00      	nop
 8006490:	0800732c 	.word	0x0800732c
 8006494:	080063c1 	.word	0x080063c1

08006498 <__sfp>:
 8006498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800649a:	4607      	mov	r7, r0
 800649c:	f7ff ffac 	bl	80063f8 <__sfp_lock_acquire>
 80064a0:	4b1e      	ldr	r3, [pc, #120]	; (800651c <__sfp+0x84>)
 80064a2:	681e      	ldr	r6, [r3, #0]
 80064a4:	69b3      	ldr	r3, [r6, #24]
 80064a6:	b913      	cbnz	r3, 80064ae <__sfp+0x16>
 80064a8:	4630      	mov	r0, r6
 80064aa:	f7ff ffbd 	bl	8006428 <__sinit>
 80064ae:	3648      	adds	r6, #72	; 0x48
 80064b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80064b4:	3b01      	subs	r3, #1
 80064b6:	d503      	bpl.n	80064c0 <__sfp+0x28>
 80064b8:	6833      	ldr	r3, [r6, #0]
 80064ba:	b30b      	cbz	r3, 8006500 <__sfp+0x68>
 80064bc:	6836      	ldr	r6, [r6, #0]
 80064be:	e7f7      	b.n	80064b0 <__sfp+0x18>
 80064c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80064c4:	b9d5      	cbnz	r5, 80064fc <__sfp+0x64>
 80064c6:	4b16      	ldr	r3, [pc, #88]	; (8006520 <__sfp+0x88>)
 80064c8:	60e3      	str	r3, [r4, #12]
 80064ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80064ce:	6665      	str	r5, [r4, #100]	; 0x64
 80064d0:	f000 f86c 	bl	80065ac <__retarget_lock_init_recursive>
 80064d4:	f7ff ff96 	bl	8006404 <__sfp_lock_release>
 80064d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80064dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80064e0:	6025      	str	r5, [r4, #0]
 80064e2:	61a5      	str	r5, [r4, #24]
 80064e4:	2208      	movs	r2, #8
 80064e6:	4629      	mov	r1, r5
 80064e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80064ec:	f000 f861 	bl	80065b2 <memset>
 80064f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80064f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80064f8:	4620      	mov	r0, r4
 80064fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064fc:	3468      	adds	r4, #104	; 0x68
 80064fe:	e7d9      	b.n	80064b4 <__sfp+0x1c>
 8006500:	2104      	movs	r1, #4
 8006502:	4638      	mov	r0, r7
 8006504:	f7ff ff62 	bl	80063cc <__sfmoreglue>
 8006508:	4604      	mov	r4, r0
 800650a:	6030      	str	r0, [r6, #0]
 800650c:	2800      	cmp	r0, #0
 800650e:	d1d5      	bne.n	80064bc <__sfp+0x24>
 8006510:	f7ff ff78 	bl	8006404 <__sfp_lock_release>
 8006514:	230c      	movs	r3, #12
 8006516:	603b      	str	r3, [r7, #0]
 8006518:	e7ee      	b.n	80064f8 <__sfp+0x60>
 800651a:	bf00      	nop
 800651c:	0800732c 	.word	0x0800732c
 8006520:	ffff0001 	.word	0xffff0001

08006524 <_fwalk_reent>:
 8006524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006528:	4606      	mov	r6, r0
 800652a:	4688      	mov	r8, r1
 800652c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006530:	2700      	movs	r7, #0
 8006532:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006536:	f1b9 0901 	subs.w	r9, r9, #1
 800653a:	d505      	bpl.n	8006548 <_fwalk_reent+0x24>
 800653c:	6824      	ldr	r4, [r4, #0]
 800653e:	2c00      	cmp	r4, #0
 8006540:	d1f7      	bne.n	8006532 <_fwalk_reent+0xe>
 8006542:	4638      	mov	r0, r7
 8006544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006548:	89ab      	ldrh	r3, [r5, #12]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d907      	bls.n	800655e <_fwalk_reent+0x3a>
 800654e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006552:	3301      	adds	r3, #1
 8006554:	d003      	beq.n	800655e <_fwalk_reent+0x3a>
 8006556:	4629      	mov	r1, r5
 8006558:	4630      	mov	r0, r6
 800655a:	47c0      	blx	r8
 800655c:	4307      	orrs	r7, r0
 800655e:	3568      	adds	r5, #104	; 0x68
 8006560:	e7e9      	b.n	8006536 <_fwalk_reent+0x12>
	...

08006564 <__libc_init_array>:
 8006564:	b570      	push	{r4, r5, r6, lr}
 8006566:	4d0d      	ldr	r5, [pc, #52]	; (800659c <__libc_init_array+0x38>)
 8006568:	4c0d      	ldr	r4, [pc, #52]	; (80065a0 <__libc_init_array+0x3c>)
 800656a:	1b64      	subs	r4, r4, r5
 800656c:	10a4      	asrs	r4, r4, #2
 800656e:	2600      	movs	r6, #0
 8006570:	42a6      	cmp	r6, r4
 8006572:	d109      	bne.n	8006588 <__libc_init_array+0x24>
 8006574:	4d0b      	ldr	r5, [pc, #44]	; (80065a4 <__libc_init_array+0x40>)
 8006576:	4c0c      	ldr	r4, [pc, #48]	; (80065a8 <__libc_init_array+0x44>)
 8006578:	f000 fe6e 	bl	8007258 <_init>
 800657c:	1b64      	subs	r4, r4, r5
 800657e:	10a4      	asrs	r4, r4, #2
 8006580:	2600      	movs	r6, #0
 8006582:	42a6      	cmp	r6, r4
 8006584:	d105      	bne.n	8006592 <__libc_init_array+0x2e>
 8006586:	bd70      	pop	{r4, r5, r6, pc}
 8006588:	f855 3b04 	ldr.w	r3, [r5], #4
 800658c:	4798      	blx	r3
 800658e:	3601      	adds	r6, #1
 8006590:	e7ee      	b.n	8006570 <__libc_init_array+0xc>
 8006592:	f855 3b04 	ldr.w	r3, [r5], #4
 8006596:	4798      	blx	r3
 8006598:	3601      	adds	r6, #1
 800659a:	e7f2      	b.n	8006582 <__libc_init_array+0x1e>
 800659c:	0800736c 	.word	0x0800736c
 80065a0:	0800736c 	.word	0x0800736c
 80065a4:	0800736c 	.word	0x0800736c
 80065a8:	08007370 	.word	0x08007370

080065ac <__retarget_lock_init_recursive>:
 80065ac:	4770      	bx	lr

080065ae <__retarget_lock_acquire_recursive>:
 80065ae:	4770      	bx	lr

080065b0 <__retarget_lock_release_recursive>:
 80065b0:	4770      	bx	lr

080065b2 <memset>:
 80065b2:	4402      	add	r2, r0
 80065b4:	4603      	mov	r3, r0
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d100      	bne.n	80065bc <memset+0xa>
 80065ba:	4770      	bx	lr
 80065bc:	f803 1b01 	strb.w	r1, [r3], #1
 80065c0:	e7f9      	b.n	80065b6 <memset+0x4>
	...

080065c4 <_free_r>:
 80065c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065c6:	2900      	cmp	r1, #0
 80065c8:	d044      	beq.n	8006654 <_free_r+0x90>
 80065ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065ce:	9001      	str	r0, [sp, #4]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f1a1 0404 	sub.w	r4, r1, #4
 80065d6:	bfb8      	it	lt
 80065d8:	18e4      	addlt	r4, r4, r3
 80065da:	f000 fb0f 	bl	8006bfc <__malloc_lock>
 80065de:	4a1e      	ldr	r2, [pc, #120]	; (8006658 <_free_r+0x94>)
 80065e0:	9801      	ldr	r0, [sp, #4]
 80065e2:	6813      	ldr	r3, [r2, #0]
 80065e4:	b933      	cbnz	r3, 80065f4 <_free_r+0x30>
 80065e6:	6063      	str	r3, [r4, #4]
 80065e8:	6014      	str	r4, [r2, #0]
 80065ea:	b003      	add	sp, #12
 80065ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065f0:	f000 bb0a 	b.w	8006c08 <__malloc_unlock>
 80065f4:	42a3      	cmp	r3, r4
 80065f6:	d908      	bls.n	800660a <_free_r+0x46>
 80065f8:	6825      	ldr	r5, [r4, #0]
 80065fa:	1961      	adds	r1, r4, r5
 80065fc:	428b      	cmp	r3, r1
 80065fe:	bf01      	itttt	eq
 8006600:	6819      	ldreq	r1, [r3, #0]
 8006602:	685b      	ldreq	r3, [r3, #4]
 8006604:	1949      	addeq	r1, r1, r5
 8006606:	6021      	streq	r1, [r4, #0]
 8006608:	e7ed      	b.n	80065e6 <_free_r+0x22>
 800660a:	461a      	mov	r2, r3
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	b10b      	cbz	r3, 8006614 <_free_r+0x50>
 8006610:	42a3      	cmp	r3, r4
 8006612:	d9fa      	bls.n	800660a <_free_r+0x46>
 8006614:	6811      	ldr	r1, [r2, #0]
 8006616:	1855      	adds	r5, r2, r1
 8006618:	42a5      	cmp	r5, r4
 800661a:	d10b      	bne.n	8006634 <_free_r+0x70>
 800661c:	6824      	ldr	r4, [r4, #0]
 800661e:	4421      	add	r1, r4
 8006620:	1854      	adds	r4, r2, r1
 8006622:	42a3      	cmp	r3, r4
 8006624:	6011      	str	r1, [r2, #0]
 8006626:	d1e0      	bne.n	80065ea <_free_r+0x26>
 8006628:	681c      	ldr	r4, [r3, #0]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	6053      	str	r3, [r2, #4]
 800662e:	4421      	add	r1, r4
 8006630:	6011      	str	r1, [r2, #0]
 8006632:	e7da      	b.n	80065ea <_free_r+0x26>
 8006634:	d902      	bls.n	800663c <_free_r+0x78>
 8006636:	230c      	movs	r3, #12
 8006638:	6003      	str	r3, [r0, #0]
 800663a:	e7d6      	b.n	80065ea <_free_r+0x26>
 800663c:	6825      	ldr	r5, [r4, #0]
 800663e:	1961      	adds	r1, r4, r5
 8006640:	428b      	cmp	r3, r1
 8006642:	bf04      	itt	eq
 8006644:	6819      	ldreq	r1, [r3, #0]
 8006646:	685b      	ldreq	r3, [r3, #4]
 8006648:	6063      	str	r3, [r4, #4]
 800664a:	bf04      	itt	eq
 800664c:	1949      	addeq	r1, r1, r5
 800664e:	6021      	streq	r1, [r4, #0]
 8006650:	6054      	str	r4, [r2, #4]
 8006652:	e7ca      	b.n	80065ea <_free_r+0x26>
 8006654:	b003      	add	sp, #12
 8006656:	bd30      	pop	{r4, r5, pc}
 8006658:	240007e8 	.word	0x240007e8

0800665c <sbrk_aligned>:
 800665c:	b570      	push	{r4, r5, r6, lr}
 800665e:	4e0e      	ldr	r6, [pc, #56]	; (8006698 <sbrk_aligned+0x3c>)
 8006660:	460c      	mov	r4, r1
 8006662:	6831      	ldr	r1, [r6, #0]
 8006664:	4605      	mov	r5, r0
 8006666:	b911      	cbnz	r1, 800666e <sbrk_aligned+0x12>
 8006668:	f000 f91a 	bl	80068a0 <_sbrk_r>
 800666c:	6030      	str	r0, [r6, #0]
 800666e:	4621      	mov	r1, r4
 8006670:	4628      	mov	r0, r5
 8006672:	f000 f915 	bl	80068a0 <_sbrk_r>
 8006676:	1c43      	adds	r3, r0, #1
 8006678:	d00a      	beq.n	8006690 <sbrk_aligned+0x34>
 800667a:	1cc4      	adds	r4, r0, #3
 800667c:	f024 0403 	bic.w	r4, r4, #3
 8006680:	42a0      	cmp	r0, r4
 8006682:	d007      	beq.n	8006694 <sbrk_aligned+0x38>
 8006684:	1a21      	subs	r1, r4, r0
 8006686:	4628      	mov	r0, r5
 8006688:	f000 f90a 	bl	80068a0 <_sbrk_r>
 800668c:	3001      	adds	r0, #1
 800668e:	d101      	bne.n	8006694 <sbrk_aligned+0x38>
 8006690:	f04f 34ff 	mov.w	r4, #4294967295
 8006694:	4620      	mov	r0, r4
 8006696:	bd70      	pop	{r4, r5, r6, pc}
 8006698:	240007ec 	.word	0x240007ec

0800669c <_malloc_r>:
 800669c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066a0:	1ccd      	adds	r5, r1, #3
 80066a2:	f025 0503 	bic.w	r5, r5, #3
 80066a6:	3508      	adds	r5, #8
 80066a8:	2d0c      	cmp	r5, #12
 80066aa:	bf38      	it	cc
 80066ac:	250c      	movcc	r5, #12
 80066ae:	2d00      	cmp	r5, #0
 80066b0:	4607      	mov	r7, r0
 80066b2:	db01      	blt.n	80066b8 <_malloc_r+0x1c>
 80066b4:	42a9      	cmp	r1, r5
 80066b6:	d905      	bls.n	80066c4 <_malloc_r+0x28>
 80066b8:	230c      	movs	r3, #12
 80066ba:	603b      	str	r3, [r7, #0]
 80066bc:	2600      	movs	r6, #0
 80066be:	4630      	mov	r0, r6
 80066c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066c4:	4e2e      	ldr	r6, [pc, #184]	; (8006780 <_malloc_r+0xe4>)
 80066c6:	f000 fa99 	bl	8006bfc <__malloc_lock>
 80066ca:	6833      	ldr	r3, [r6, #0]
 80066cc:	461c      	mov	r4, r3
 80066ce:	bb34      	cbnz	r4, 800671e <_malloc_r+0x82>
 80066d0:	4629      	mov	r1, r5
 80066d2:	4638      	mov	r0, r7
 80066d4:	f7ff ffc2 	bl	800665c <sbrk_aligned>
 80066d8:	1c43      	adds	r3, r0, #1
 80066da:	4604      	mov	r4, r0
 80066dc:	d14d      	bne.n	800677a <_malloc_r+0xde>
 80066de:	6834      	ldr	r4, [r6, #0]
 80066e0:	4626      	mov	r6, r4
 80066e2:	2e00      	cmp	r6, #0
 80066e4:	d140      	bne.n	8006768 <_malloc_r+0xcc>
 80066e6:	6823      	ldr	r3, [r4, #0]
 80066e8:	4631      	mov	r1, r6
 80066ea:	4638      	mov	r0, r7
 80066ec:	eb04 0803 	add.w	r8, r4, r3
 80066f0:	f000 f8d6 	bl	80068a0 <_sbrk_r>
 80066f4:	4580      	cmp	r8, r0
 80066f6:	d13a      	bne.n	800676e <_malloc_r+0xd2>
 80066f8:	6821      	ldr	r1, [r4, #0]
 80066fa:	3503      	adds	r5, #3
 80066fc:	1a6d      	subs	r5, r5, r1
 80066fe:	f025 0503 	bic.w	r5, r5, #3
 8006702:	3508      	adds	r5, #8
 8006704:	2d0c      	cmp	r5, #12
 8006706:	bf38      	it	cc
 8006708:	250c      	movcc	r5, #12
 800670a:	4629      	mov	r1, r5
 800670c:	4638      	mov	r0, r7
 800670e:	f7ff ffa5 	bl	800665c <sbrk_aligned>
 8006712:	3001      	adds	r0, #1
 8006714:	d02b      	beq.n	800676e <_malloc_r+0xd2>
 8006716:	6823      	ldr	r3, [r4, #0]
 8006718:	442b      	add	r3, r5
 800671a:	6023      	str	r3, [r4, #0]
 800671c:	e00e      	b.n	800673c <_malloc_r+0xa0>
 800671e:	6822      	ldr	r2, [r4, #0]
 8006720:	1b52      	subs	r2, r2, r5
 8006722:	d41e      	bmi.n	8006762 <_malloc_r+0xc6>
 8006724:	2a0b      	cmp	r2, #11
 8006726:	d916      	bls.n	8006756 <_malloc_r+0xba>
 8006728:	1961      	adds	r1, r4, r5
 800672a:	42a3      	cmp	r3, r4
 800672c:	6025      	str	r5, [r4, #0]
 800672e:	bf18      	it	ne
 8006730:	6059      	strne	r1, [r3, #4]
 8006732:	6863      	ldr	r3, [r4, #4]
 8006734:	bf08      	it	eq
 8006736:	6031      	streq	r1, [r6, #0]
 8006738:	5162      	str	r2, [r4, r5]
 800673a:	604b      	str	r3, [r1, #4]
 800673c:	4638      	mov	r0, r7
 800673e:	f104 060b 	add.w	r6, r4, #11
 8006742:	f000 fa61 	bl	8006c08 <__malloc_unlock>
 8006746:	f026 0607 	bic.w	r6, r6, #7
 800674a:	1d23      	adds	r3, r4, #4
 800674c:	1af2      	subs	r2, r6, r3
 800674e:	d0b6      	beq.n	80066be <_malloc_r+0x22>
 8006750:	1b9b      	subs	r3, r3, r6
 8006752:	50a3      	str	r3, [r4, r2]
 8006754:	e7b3      	b.n	80066be <_malloc_r+0x22>
 8006756:	6862      	ldr	r2, [r4, #4]
 8006758:	42a3      	cmp	r3, r4
 800675a:	bf0c      	ite	eq
 800675c:	6032      	streq	r2, [r6, #0]
 800675e:	605a      	strne	r2, [r3, #4]
 8006760:	e7ec      	b.n	800673c <_malloc_r+0xa0>
 8006762:	4623      	mov	r3, r4
 8006764:	6864      	ldr	r4, [r4, #4]
 8006766:	e7b2      	b.n	80066ce <_malloc_r+0x32>
 8006768:	4634      	mov	r4, r6
 800676a:	6876      	ldr	r6, [r6, #4]
 800676c:	e7b9      	b.n	80066e2 <_malloc_r+0x46>
 800676e:	230c      	movs	r3, #12
 8006770:	603b      	str	r3, [r7, #0]
 8006772:	4638      	mov	r0, r7
 8006774:	f000 fa48 	bl	8006c08 <__malloc_unlock>
 8006778:	e7a1      	b.n	80066be <_malloc_r+0x22>
 800677a:	6025      	str	r5, [r4, #0]
 800677c:	e7de      	b.n	800673c <_malloc_r+0xa0>
 800677e:	bf00      	nop
 8006780:	240007e8 	.word	0x240007e8

08006784 <iprintf>:
 8006784:	b40f      	push	{r0, r1, r2, r3}
 8006786:	4b0a      	ldr	r3, [pc, #40]	; (80067b0 <iprintf+0x2c>)
 8006788:	b513      	push	{r0, r1, r4, lr}
 800678a:	681c      	ldr	r4, [r3, #0]
 800678c:	b124      	cbz	r4, 8006798 <iprintf+0x14>
 800678e:	69a3      	ldr	r3, [r4, #24]
 8006790:	b913      	cbnz	r3, 8006798 <iprintf+0x14>
 8006792:	4620      	mov	r0, r4
 8006794:	f7ff fe48 	bl	8006428 <__sinit>
 8006798:	ab05      	add	r3, sp, #20
 800679a:	9a04      	ldr	r2, [sp, #16]
 800679c:	68a1      	ldr	r1, [r4, #8]
 800679e:	9301      	str	r3, [sp, #4]
 80067a0:	4620      	mov	r0, r4
 80067a2:	f000 fa61 	bl	8006c68 <_vfiprintf_r>
 80067a6:	b002      	add	sp, #8
 80067a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067ac:	b004      	add	sp, #16
 80067ae:	4770      	bx	lr
 80067b0:	24000010 	.word	0x24000010

080067b4 <_puts_r>:
 80067b4:	b570      	push	{r4, r5, r6, lr}
 80067b6:	460e      	mov	r6, r1
 80067b8:	4605      	mov	r5, r0
 80067ba:	b118      	cbz	r0, 80067c4 <_puts_r+0x10>
 80067bc:	6983      	ldr	r3, [r0, #24]
 80067be:	b90b      	cbnz	r3, 80067c4 <_puts_r+0x10>
 80067c0:	f7ff fe32 	bl	8006428 <__sinit>
 80067c4:	69ab      	ldr	r3, [r5, #24]
 80067c6:	68ac      	ldr	r4, [r5, #8]
 80067c8:	b913      	cbnz	r3, 80067d0 <_puts_r+0x1c>
 80067ca:	4628      	mov	r0, r5
 80067cc:	f7ff fe2c 	bl	8006428 <__sinit>
 80067d0:	4b2c      	ldr	r3, [pc, #176]	; (8006884 <_puts_r+0xd0>)
 80067d2:	429c      	cmp	r4, r3
 80067d4:	d120      	bne.n	8006818 <_puts_r+0x64>
 80067d6:	686c      	ldr	r4, [r5, #4]
 80067d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067da:	07db      	lsls	r3, r3, #31
 80067dc:	d405      	bmi.n	80067ea <_puts_r+0x36>
 80067de:	89a3      	ldrh	r3, [r4, #12]
 80067e0:	0598      	lsls	r0, r3, #22
 80067e2:	d402      	bmi.n	80067ea <_puts_r+0x36>
 80067e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067e6:	f7ff fee2 	bl	80065ae <__retarget_lock_acquire_recursive>
 80067ea:	89a3      	ldrh	r3, [r4, #12]
 80067ec:	0719      	lsls	r1, r3, #28
 80067ee:	d51d      	bpl.n	800682c <_puts_r+0x78>
 80067f0:	6923      	ldr	r3, [r4, #16]
 80067f2:	b1db      	cbz	r3, 800682c <_puts_r+0x78>
 80067f4:	3e01      	subs	r6, #1
 80067f6:	68a3      	ldr	r3, [r4, #8]
 80067f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80067fc:	3b01      	subs	r3, #1
 80067fe:	60a3      	str	r3, [r4, #8]
 8006800:	bb39      	cbnz	r1, 8006852 <_puts_r+0x9e>
 8006802:	2b00      	cmp	r3, #0
 8006804:	da38      	bge.n	8006878 <_puts_r+0xc4>
 8006806:	4622      	mov	r2, r4
 8006808:	210a      	movs	r1, #10
 800680a:	4628      	mov	r0, r5
 800680c:	f000 f89c 	bl	8006948 <__swbuf_r>
 8006810:	3001      	adds	r0, #1
 8006812:	d011      	beq.n	8006838 <_puts_r+0x84>
 8006814:	250a      	movs	r5, #10
 8006816:	e011      	b.n	800683c <_puts_r+0x88>
 8006818:	4b1b      	ldr	r3, [pc, #108]	; (8006888 <_puts_r+0xd4>)
 800681a:	429c      	cmp	r4, r3
 800681c:	d101      	bne.n	8006822 <_puts_r+0x6e>
 800681e:	68ac      	ldr	r4, [r5, #8]
 8006820:	e7da      	b.n	80067d8 <_puts_r+0x24>
 8006822:	4b1a      	ldr	r3, [pc, #104]	; (800688c <_puts_r+0xd8>)
 8006824:	429c      	cmp	r4, r3
 8006826:	bf08      	it	eq
 8006828:	68ec      	ldreq	r4, [r5, #12]
 800682a:	e7d5      	b.n	80067d8 <_puts_r+0x24>
 800682c:	4621      	mov	r1, r4
 800682e:	4628      	mov	r0, r5
 8006830:	f000 f8ee 	bl	8006a10 <__swsetup_r>
 8006834:	2800      	cmp	r0, #0
 8006836:	d0dd      	beq.n	80067f4 <_puts_r+0x40>
 8006838:	f04f 35ff 	mov.w	r5, #4294967295
 800683c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800683e:	07da      	lsls	r2, r3, #31
 8006840:	d405      	bmi.n	800684e <_puts_r+0x9a>
 8006842:	89a3      	ldrh	r3, [r4, #12]
 8006844:	059b      	lsls	r3, r3, #22
 8006846:	d402      	bmi.n	800684e <_puts_r+0x9a>
 8006848:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800684a:	f7ff feb1 	bl	80065b0 <__retarget_lock_release_recursive>
 800684e:	4628      	mov	r0, r5
 8006850:	bd70      	pop	{r4, r5, r6, pc}
 8006852:	2b00      	cmp	r3, #0
 8006854:	da04      	bge.n	8006860 <_puts_r+0xac>
 8006856:	69a2      	ldr	r2, [r4, #24]
 8006858:	429a      	cmp	r2, r3
 800685a:	dc06      	bgt.n	800686a <_puts_r+0xb6>
 800685c:	290a      	cmp	r1, #10
 800685e:	d004      	beq.n	800686a <_puts_r+0xb6>
 8006860:	6823      	ldr	r3, [r4, #0]
 8006862:	1c5a      	adds	r2, r3, #1
 8006864:	6022      	str	r2, [r4, #0]
 8006866:	7019      	strb	r1, [r3, #0]
 8006868:	e7c5      	b.n	80067f6 <_puts_r+0x42>
 800686a:	4622      	mov	r2, r4
 800686c:	4628      	mov	r0, r5
 800686e:	f000 f86b 	bl	8006948 <__swbuf_r>
 8006872:	3001      	adds	r0, #1
 8006874:	d1bf      	bne.n	80067f6 <_puts_r+0x42>
 8006876:	e7df      	b.n	8006838 <_puts_r+0x84>
 8006878:	6823      	ldr	r3, [r4, #0]
 800687a:	250a      	movs	r5, #10
 800687c:	1c5a      	adds	r2, r3, #1
 800687e:	6022      	str	r2, [r4, #0]
 8006880:	701d      	strb	r5, [r3, #0]
 8006882:	e7db      	b.n	800683c <_puts_r+0x88>
 8006884:	080072ec 	.word	0x080072ec
 8006888:	0800730c 	.word	0x0800730c
 800688c:	080072cc 	.word	0x080072cc

08006890 <puts>:
 8006890:	4b02      	ldr	r3, [pc, #8]	; (800689c <puts+0xc>)
 8006892:	4601      	mov	r1, r0
 8006894:	6818      	ldr	r0, [r3, #0]
 8006896:	f7ff bf8d 	b.w	80067b4 <_puts_r>
 800689a:	bf00      	nop
 800689c:	24000010 	.word	0x24000010

080068a0 <_sbrk_r>:
 80068a0:	b538      	push	{r3, r4, r5, lr}
 80068a2:	4d06      	ldr	r5, [pc, #24]	; (80068bc <_sbrk_r+0x1c>)
 80068a4:	2300      	movs	r3, #0
 80068a6:	4604      	mov	r4, r0
 80068a8:	4608      	mov	r0, r1
 80068aa:	602b      	str	r3, [r5, #0]
 80068ac:	f7fa fbcc 	bl	8001048 <_sbrk>
 80068b0:	1c43      	adds	r3, r0, #1
 80068b2:	d102      	bne.n	80068ba <_sbrk_r+0x1a>
 80068b4:	682b      	ldr	r3, [r5, #0]
 80068b6:	b103      	cbz	r3, 80068ba <_sbrk_r+0x1a>
 80068b8:	6023      	str	r3, [r4, #0]
 80068ba:	bd38      	pop	{r3, r4, r5, pc}
 80068bc:	240007f0 	.word	0x240007f0

080068c0 <__sread>:
 80068c0:	b510      	push	{r4, lr}
 80068c2:	460c      	mov	r4, r1
 80068c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068c8:	f000 fc92 	bl	80071f0 <_read_r>
 80068cc:	2800      	cmp	r0, #0
 80068ce:	bfab      	itete	ge
 80068d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80068d2:	89a3      	ldrhlt	r3, [r4, #12]
 80068d4:	181b      	addge	r3, r3, r0
 80068d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80068da:	bfac      	ite	ge
 80068dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80068de:	81a3      	strhlt	r3, [r4, #12]
 80068e0:	bd10      	pop	{r4, pc}

080068e2 <__swrite>:
 80068e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068e6:	461f      	mov	r7, r3
 80068e8:	898b      	ldrh	r3, [r1, #12]
 80068ea:	05db      	lsls	r3, r3, #23
 80068ec:	4605      	mov	r5, r0
 80068ee:	460c      	mov	r4, r1
 80068f0:	4616      	mov	r6, r2
 80068f2:	d505      	bpl.n	8006900 <__swrite+0x1e>
 80068f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068f8:	2302      	movs	r3, #2
 80068fa:	2200      	movs	r2, #0
 80068fc:	f000 f906 	bl	8006b0c <_lseek_r>
 8006900:	89a3      	ldrh	r3, [r4, #12]
 8006902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006906:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800690a:	81a3      	strh	r3, [r4, #12]
 800690c:	4632      	mov	r2, r6
 800690e:	463b      	mov	r3, r7
 8006910:	4628      	mov	r0, r5
 8006912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006916:	f000 b869 	b.w	80069ec <_write_r>

0800691a <__sseek>:
 800691a:	b510      	push	{r4, lr}
 800691c:	460c      	mov	r4, r1
 800691e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006922:	f000 f8f3 	bl	8006b0c <_lseek_r>
 8006926:	1c43      	adds	r3, r0, #1
 8006928:	89a3      	ldrh	r3, [r4, #12]
 800692a:	bf15      	itete	ne
 800692c:	6560      	strne	r0, [r4, #84]	; 0x54
 800692e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006932:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006936:	81a3      	strheq	r3, [r4, #12]
 8006938:	bf18      	it	ne
 800693a:	81a3      	strhne	r3, [r4, #12]
 800693c:	bd10      	pop	{r4, pc}

0800693e <__sclose>:
 800693e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006942:	f000 b8d3 	b.w	8006aec <_close_r>
	...

08006948 <__swbuf_r>:
 8006948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694a:	460e      	mov	r6, r1
 800694c:	4614      	mov	r4, r2
 800694e:	4605      	mov	r5, r0
 8006950:	b118      	cbz	r0, 800695a <__swbuf_r+0x12>
 8006952:	6983      	ldr	r3, [r0, #24]
 8006954:	b90b      	cbnz	r3, 800695a <__swbuf_r+0x12>
 8006956:	f7ff fd67 	bl	8006428 <__sinit>
 800695a:	4b21      	ldr	r3, [pc, #132]	; (80069e0 <__swbuf_r+0x98>)
 800695c:	429c      	cmp	r4, r3
 800695e:	d12b      	bne.n	80069b8 <__swbuf_r+0x70>
 8006960:	686c      	ldr	r4, [r5, #4]
 8006962:	69a3      	ldr	r3, [r4, #24]
 8006964:	60a3      	str	r3, [r4, #8]
 8006966:	89a3      	ldrh	r3, [r4, #12]
 8006968:	071a      	lsls	r2, r3, #28
 800696a:	d52f      	bpl.n	80069cc <__swbuf_r+0x84>
 800696c:	6923      	ldr	r3, [r4, #16]
 800696e:	b36b      	cbz	r3, 80069cc <__swbuf_r+0x84>
 8006970:	6923      	ldr	r3, [r4, #16]
 8006972:	6820      	ldr	r0, [r4, #0]
 8006974:	1ac0      	subs	r0, r0, r3
 8006976:	6963      	ldr	r3, [r4, #20]
 8006978:	b2f6      	uxtb	r6, r6
 800697a:	4283      	cmp	r3, r0
 800697c:	4637      	mov	r7, r6
 800697e:	dc04      	bgt.n	800698a <__swbuf_r+0x42>
 8006980:	4621      	mov	r1, r4
 8006982:	4628      	mov	r0, r5
 8006984:	f7ff fcaa 	bl	80062dc <_fflush_r>
 8006988:	bb30      	cbnz	r0, 80069d8 <__swbuf_r+0x90>
 800698a:	68a3      	ldr	r3, [r4, #8]
 800698c:	3b01      	subs	r3, #1
 800698e:	60a3      	str	r3, [r4, #8]
 8006990:	6823      	ldr	r3, [r4, #0]
 8006992:	1c5a      	adds	r2, r3, #1
 8006994:	6022      	str	r2, [r4, #0]
 8006996:	701e      	strb	r6, [r3, #0]
 8006998:	6963      	ldr	r3, [r4, #20]
 800699a:	3001      	adds	r0, #1
 800699c:	4283      	cmp	r3, r0
 800699e:	d004      	beq.n	80069aa <__swbuf_r+0x62>
 80069a0:	89a3      	ldrh	r3, [r4, #12]
 80069a2:	07db      	lsls	r3, r3, #31
 80069a4:	d506      	bpl.n	80069b4 <__swbuf_r+0x6c>
 80069a6:	2e0a      	cmp	r6, #10
 80069a8:	d104      	bne.n	80069b4 <__swbuf_r+0x6c>
 80069aa:	4621      	mov	r1, r4
 80069ac:	4628      	mov	r0, r5
 80069ae:	f7ff fc95 	bl	80062dc <_fflush_r>
 80069b2:	b988      	cbnz	r0, 80069d8 <__swbuf_r+0x90>
 80069b4:	4638      	mov	r0, r7
 80069b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069b8:	4b0a      	ldr	r3, [pc, #40]	; (80069e4 <__swbuf_r+0x9c>)
 80069ba:	429c      	cmp	r4, r3
 80069bc:	d101      	bne.n	80069c2 <__swbuf_r+0x7a>
 80069be:	68ac      	ldr	r4, [r5, #8]
 80069c0:	e7cf      	b.n	8006962 <__swbuf_r+0x1a>
 80069c2:	4b09      	ldr	r3, [pc, #36]	; (80069e8 <__swbuf_r+0xa0>)
 80069c4:	429c      	cmp	r4, r3
 80069c6:	bf08      	it	eq
 80069c8:	68ec      	ldreq	r4, [r5, #12]
 80069ca:	e7ca      	b.n	8006962 <__swbuf_r+0x1a>
 80069cc:	4621      	mov	r1, r4
 80069ce:	4628      	mov	r0, r5
 80069d0:	f000 f81e 	bl	8006a10 <__swsetup_r>
 80069d4:	2800      	cmp	r0, #0
 80069d6:	d0cb      	beq.n	8006970 <__swbuf_r+0x28>
 80069d8:	f04f 37ff 	mov.w	r7, #4294967295
 80069dc:	e7ea      	b.n	80069b4 <__swbuf_r+0x6c>
 80069de:	bf00      	nop
 80069e0:	080072ec 	.word	0x080072ec
 80069e4:	0800730c 	.word	0x0800730c
 80069e8:	080072cc 	.word	0x080072cc

080069ec <_write_r>:
 80069ec:	b538      	push	{r3, r4, r5, lr}
 80069ee:	4d07      	ldr	r5, [pc, #28]	; (8006a0c <_write_r+0x20>)
 80069f0:	4604      	mov	r4, r0
 80069f2:	4608      	mov	r0, r1
 80069f4:	4611      	mov	r1, r2
 80069f6:	2200      	movs	r2, #0
 80069f8:	602a      	str	r2, [r5, #0]
 80069fa:	461a      	mov	r2, r3
 80069fc:	f7fa fad3 	bl	8000fa6 <_write>
 8006a00:	1c43      	adds	r3, r0, #1
 8006a02:	d102      	bne.n	8006a0a <_write_r+0x1e>
 8006a04:	682b      	ldr	r3, [r5, #0]
 8006a06:	b103      	cbz	r3, 8006a0a <_write_r+0x1e>
 8006a08:	6023      	str	r3, [r4, #0]
 8006a0a:	bd38      	pop	{r3, r4, r5, pc}
 8006a0c:	240007f0 	.word	0x240007f0

08006a10 <__swsetup_r>:
 8006a10:	4b32      	ldr	r3, [pc, #200]	; (8006adc <__swsetup_r+0xcc>)
 8006a12:	b570      	push	{r4, r5, r6, lr}
 8006a14:	681d      	ldr	r5, [r3, #0]
 8006a16:	4606      	mov	r6, r0
 8006a18:	460c      	mov	r4, r1
 8006a1a:	b125      	cbz	r5, 8006a26 <__swsetup_r+0x16>
 8006a1c:	69ab      	ldr	r3, [r5, #24]
 8006a1e:	b913      	cbnz	r3, 8006a26 <__swsetup_r+0x16>
 8006a20:	4628      	mov	r0, r5
 8006a22:	f7ff fd01 	bl	8006428 <__sinit>
 8006a26:	4b2e      	ldr	r3, [pc, #184]	; (8006ae0 <__swsetup_r+0xd0>)
 8006a28:	429c      	cmp	r4, r3
 8006a2a:	d10f      	bne.n	8006a4c <__swsetup_r+0x3c>
 8006a2c:	686c      	ldr	r4, [r5, #4]
 8006a2e:	89a3      	ldrh	r3, [r4, #12]
 8006a30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a34:	0719      	lsls	r1, r3, #28
 8006a36:	d42c      	bmi.n	8006a92 <__swsetup_r+0x82>
 8006a38:	06dd      	lsls	r5, r3, #27
 8006a3a:	d411      	bmi.n	8006a60 <__swsetup_r+0x50>
 8006a3c:	2309      	movs	r3, #9
 8006a3e:	6033      	str	r3, [r6, #0]
 8006a40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a44:	81a3      	strh	r3, [r4, #12]
 8006a46:	f04f 30ff 	mov.w	r0, #4294967295
 8006a4a:	e03e      	b.n	8006aca <__swsetup_r+0xba>
 8006a4c:	4b25      	ldr	r3, [pc, #148]	; (8006ae4 <__swsetup_r+0xd4>)
 8006a4e:	429c      	cmp	r4, r3
 8006a50:	d101      	bne.n	8006a56 <__swsetup_r+0x46>
 8006a52:	68ac      	ldr	r4, [r5, #8]
 8006a54:	e7eb      	b.n	8006a2e <__swsetup_r+0x1e>
 8006a56:	4b24      	ldr	r3, [pc, #144]	; (8006ae8 <__swsetup_r+0xd8>)
 8006a58:	429c      	cmp	r4, r3
 8006a5a:	bf08      	it	eq
 8006a5c:	68ec      	ldreq	r4, [r5, #12]
 8006a5e:	e7e6      	b.n	8006a2e <__swsetup_r+0x1e>
 8006a60:	0758      	lsls	r0, r3, #29
 8006a62:	d512      	bpl.n	8006a8a <__swsetup_r+0x7a>
 8006a64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a66:	b141      	cbz	r1, 8006a7a <__swsetup_r+0x6a>
 8006a68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a6c:	4299      	cmp	r1, r3
 8006a6e:	d002      	beq.n	8006a76 <__swsetup_r+0x66>
 8006a70:	4630      	mov	r0, r6
 8006a72:	f7ff fda7 	bl	80065c4 <_free_r>
 8006a76:	2300      	movs	r3, #0
 8006a78:	6363      	str	r3, [r4, #52]	; 0x34
 8006a7a:	89a3      	ldrh	r3, [r4, #12]
 8006a7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a80:	81a3      	strh	r3, [r4, #12]
 8006a82:	2300      	movs	r3, #0
 8006a84:	6063      	str	r3, [r4, #4]
 8006a86:	6923      	ldr	r3, [r4, #16]
 8006a88:	6023      	str	r3, [r4, #0]
 8006a8a:	89a3      	ldrh	r3, [r4, #12]
 8006a8c:	f043 0308 	orr.w	r3, r3, #8
 8006a90:	81a3      	strh	r3, [r4, #12]
 8006a92:	6923      	ldr	r3, [r4, #16]
 8006a94:	b94b      	cbnz	r3, 8006aaa <__swsetup_r+0x9a>
 8006a96:	89a3      	ldrh	r3, [r4, #12]
 8006a98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006aa0:	d003      	beq.n	8006aaa <__swsetup_r+0x9a>
 8006aa2:	4621      	mov	r1, r4
 8006aa4:	4630      	mov	r0, r6
 8006aa6:	f000 f869 	bl	8006b7c <__smakebuf_r>
 8006aaa:	89a0      	ldrh	r0, [r4, #12]
 8006aac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ab0:	f010 0301 	ands.w	r3, r0, #1
 8006ab4:	d00a      	beq.n	8006acc <__swsetup_r+0xbc>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	60a3      	str	r3, [r4, #8]
 8006aba:	6963      	ldr	r3, [r4, #20]
 8006abc:	425b      	negs	r3, r3
 8006abe:	61a3      	str	r3, [r4, #24]
 8006ac0:	6923      	ldr	r3, [r4, #16]
 8006ac2:	b943      	cbnz	r3, 8006ad6 <__swsetup_r+0xc6>
 8006ac4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006ac8:	d1ba      	bne.n	8006a40 <__swsetup_r+0x30>
 8006aca:	bd70      	pop	{r4, r5, r6, pc}
 8006acc:	0781      	lsls	r1, r0, #30
 8006ace:	bf58      	it	pl
 8006ad0:	6963      	ldrpl	r3, [r4, #20]
 8006ad2:	60a3      	str	r3, [r4, #8]
 8006ad4:	e7f4      	b.n	8006ac0 <__swsetup_r+0xb0>
 8006ad6:	2000      	movs	r0, #0
 8006ad8:	e7f7      	b.n	8006aca <__swsetup_r+0xba>
 8006ada:	bf00      	nop
 8006adc:	24000010 	.word	0x24000010
 8006ae0:	080072ec 	.word	0x080072ec
 8006ae4:	0800730c 	.word	0x0800730c
 8006ae8:	080072cc 	.word	0x080072cc

08006aec <_close_r>:
 8006aec:	b538      	push	{r3, r4, r5, lr}
 8006aee:	4d06      	ldr	r5, [pc, #24]	; (8006b08 <_close_r+0x1c>)
 8006af0:	2300      	movs	r3, #0
 8006af2:	4604      	mov	r4, r0
 8006af4:	4608      	mov	r0, r1
 8006af6:	602b      	str	r3, [r5, #0]
 8006af8:	f7fa fa71 	bl	8000fde <_close>
 8006afc:	1c43      	adds	r3, r0, #1
 8006afe:	d102      	bne.n	8006b06 <_close_r+0x1a>
 8006b00:	682b      	ldr	r3, [r5, #0]
 8006b02:	b103      	cbz	r3, 8006b06 <_close_r+0x1a>
 8006b04:	6023      	str	r3, [r4, #0]
 8006b06:	bd38      	pop	{r3, r4, r5, pc}
 8006b08:	240007f0 	.word	0x240007f0

08006b0c <_lseek_r>:
 8006b0c:	b538      	push	{r3, r4, r5, lr}
 8006b0e:	4d07      	ldr	r5, [pc, #28]	; (8006b2c <_lseek_r+0x20>)
 8006b10:	4604      	mov	r4, r0
 8006b12:	4608      	mov	r0, r1
 8006b14:	4611      	mov	r1, r2
 8006b16:	2200      	movs	r2, #0
 8006b18:	602a      	str	r2, [r5, #0]
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	f7fa fa86 	bl	800102c <_lseek>
 8006b20:	1c43      	adds	r3, r0, #1
 8006b22:	d102      	bne.n	8006b2a <_lseek_r+0x1e>
 8006b24:	682b      	ldr	r3, [r5, #0]
 8006b26:	b103      	cbz	r3, 8006b2a <_lseek_r+0x1e>
 8006b28:	6023      	str	r3, [r4, #0]
 8006b2a:	bd38      	pop	{r3, r4, r5, pc}
 8006b2c:	240007f0 	.word	0x240007f0

08006b30 <__swhatbuf_r>:
 8006b30:	b570      	push	{r4, r5, r6, lr}
 8006b32:	460e      	mov	r6, r1
 8006b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b38:	2900      	cmp	r1, #0
 8006b3a:	b096      	sub	sp, #88	; 0x58
 8006b3c:	4614      	mov	r4, r2
 8006b3e:	461d      	mov	r5, r3
 8006b40:	da08      	bge.n	8006b54 <__swhatbuf_r+0x24>
 8006b42:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006b46:	2200      	movs	r2, #0
 8006b48:	602a      	str	r2, [r5, #0]
 8006b4a:	061a      	lsls	r2, r3, #24
 8006b4c:	d410      	bmi.n	8006b70 <__swhatbuf_r+0x40>
 8006b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b52:	e00e      	b.n	8006b72 <__swhatbuf_r+0x42>
 8006b54:	466a      	mov	r2, sp
 8006b56:	f000 fb5d 	bl	8007214 <_fstat_r>
 8006b5a:	2800      	cmp	r0, #0
 8006b5c:	dbf1      	blt.n	8006b42 <__swhatbuf_r+0x12>
 8006b5e:	9a01      	ldr	r2, [sp, #4]
 8006b60:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006b64:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006b68:	425a      	negs	r2, r3
 8006b6a:	415a      	adcs	r2, r3
 8006b6c:	602a      	str	r2, [r5, #0]
 8006b6e:	e7ee      	b.n	8006b4e <__swhatbuf_r+0x1e>
 8006b70:	2340      	movs	r3, #64	; 0x40
 8006b72:	2000      	movs	r0, #0
 8006b74:	6023      	str	r3, [r4, #0]
 8006b76:	b016      	add	sp, #88	; 0x58
 8006b78:	bd70      	pop	{r4, r5, r6, pc}
	...

08006b7c <__smakebuf_r>:
 8006b7c:	898b      	ldrh	r3, [r1, #12]
 8006b7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b80:	079d      	lsls	r5, r3, #30
 8006b82:	4606      	mov	r6, r0
 8006b84:	460c      	mov	r4, r1
 8006b86:	d507      	bpl.n	8006b98 <__smakebuf_r+0x1c>
 8006b88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b8c:	6023      	str	r3, [r4, #0]
 8006b8e:	6123      	str	r3, [r4, #16]
 8006b90:	2301      	movs	r3, #1
 8006b92:	6163      	str	r3, [r4, #20]
 8006b94:	b002      	add	sp, #8
 8006b96:	bd70      	pop	{r4, r5, r6, pc}
 8006b98:	ab01      	add	r3, sp, #4
 8006b9a:	466a      	mov	r2, sp
 8006b9c:	f7ff ffc8 	bl	8006b30 <__swhatbuf_r>
 8006ba0:	9900      	ldr	r1, [sp, #0]
 8006ba2:	4605      	mov	r5, r0
 8006ba4:	4630      	mov	r0, r6
 8006ba6:	f7ff fd79 	bl	800669c <_malloc_r>
 8006baa:	b948      	cbnz	r0, 8006bc0 <__smakebuf_r+0x44>
 8006bac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bb0:	059a      	lsls	r2, r3, #22
 8006bb2:	d4ef      	bmi.n	8006b94 <__smakebuf_r+0x18>
 8006bb4:	f023 0303 	bic.w	r3, r3, #3
 8006bb8:	f043 0302 	orr.w	r3, r3, #2
 8006bbc:	81a3      	strh	r3, [r4, #12]
 8006bbe:	e7e3      	b.n	8006b88 <__smakebuf_r+0xc>
 8006bc0:	4b0d      	ldr	r3, [pc, #52]	; (8006bf8 <__smakebuf_r+0x7c>)
 8006bc2:	62b3      	str	r3, [r6, #40]	; 0x28
 8006bc4:	89a3      	ldrh	r3, [r4, #12]
 8006bc6:	6020      	str	r0, [r4, #0]
 8006bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bcc:	81a3      	strh	r3, [r4, #12]
 8006bce:	9b00      	ldr	r3, [sp, #0]
 8006bd0:	6163      	str	r3, [r4, #20]
 8006bd2:	9b01      	ldr	r3, [sp, #4]
 8006bd4:	6120      	str	r0, [r4, #16]
 8006bd6:	b15b      	cbz	r3, 8006bf0 <__smakebuf_r+0x74>
 8006bd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bdc:	4630      	mov	r0, r6
 8006bde:	f000 fb2b 	bl	8007238 <_isatty_r>
 8006be2:	b128      	cbz	r0, 8006bf0 <__smakebuf_r+0x74>
 8006be4:	89a3      	ldrh	r3, [r4, #12]
 8006be6:	f023 0303 	bic.w	r3, r3, #3
 8006bea:	f043 0301 	orr.w	r3, r3, #1
 8006bee:	81a3      	strh	r3, [r4, #12]
 8006bf0:	89a0      	ldrh	r0, [r4, #12]
 8006bf2:	4305      	orrs	r5, r0
 8006bf4:	81a5      	strh	r5, [r4, #12]
 8006bf6:	e7cd      	b.n	8006b94 <__smakebuf_r+0x18>
 8006bf8:	080063c1 	.word	0x080063c1

08006bfc <__malloc_lock>:
 8006bfc:	4801      	ldr	r0, [pc, #4]	; (8006c04 <__malloc_lock+0x8>)
 8006bfe:	f7ff bcd6 	b.w	80065ae <__retarget_lock_acquire_recursive>
 8006c02:	bf00      	nop
 8006c04:	240007e4 	.word	0x240007e4

08006c08 <__malloc_unlock>:
 8006c08:	4801      	ldr	r0, [pc, #4]	; (8006c10 <__malloc_unlock+0x8>)
 8006c0a:	f7ff bcd1 	b.w	80065b0 <__retarget_lock_release_recursive>
 8006c0e:	bf00      	nop
 8006c10:	240007e4 	.word	0x240007e4

08006c14 <__sfputc_r>:
 8006c14:	6893      	ldr	r3, [r2, #8]
 8006c16:	3b01      	subs	r3, #1
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	b410      	push	{r4}
 8006c1c:	6093      	str	r3, [r2, #8]
 8006c1e:	da08      	bge.n	8006c32 <__sfputc_r+0x1e>
 8006c20:	6994      	ldr	r4, [r2, #24]
 8006c22:	42a3      	cmp	r3, r4
 8006c24:	db01      	blt.n	8006c2a <__sfputc_r+0x16>
 8006c26:	290a      	cmp	r1, #10
 8006c28:	d103      	bne.n	8006c32 <__sfputc_r+0x1e>
 8006c2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c2e:	f7ff be8b 	b.w	8006948 <__swbuf_r>
 8006c32:	6813      	ldr	r3, [r2, #0]
 8006c34:	1c58      	adds	r0, r3, #1
 8006c36:	6010      	str	r0, [r2, #0]
 8006c38:	7019      	strb	r1, [r3, #0]
 8006c3a:	4608      	mov	r0, r1
 8006c3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c40:	4770      	bx	lr

08006c42 <__sfputs_r>:
 8006c42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c44:	4606      	mov	r6, r0
 8006c46:	460f      	mov	r7, r1
 8006c48:	4614      	mov	r4, r2
 8006c4a:	18d5      	adds	r5, r2, r3
 8006c4c:	42ac      	cmp	r4, r5
 8006c4e:	d101      	bne.n	8006c54 <__sfputs_r+0x12>
 8006c50:	2000      	movs	r0, #0
 8006c52:	e007      	b.n	8006c64 <__sfputs_r+0x22>
 8006c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c58:	463a      	mov	r2, r7
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	f7ff ffda 	bl	8006c14 <__sfputc_r>
 8006c60:	1c43      	adds	r3, r0, #1
 8006c62:	d1f3      	bne.n	8006c4c <__sfputs_r+0xa>
 8006c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c68 <_vfiprintf_r>:
 8006c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c6c:	460d      	mov	r5, r1
 8006c6e:	b09d      	sub	sp, #116	; 0x74
 8006c70:	4614      	mov	r4, r2
 8006c72:	4698      	mov	r8, r3
 8006c74:	4606      	mov	r6, r0
 8006c76:	b118      	cbz	r0, 8006c80 <_vfiprintf_r+0x18>
 8006c78:	6983      	ldr	r3, [r0, #24]
 8006c7a:	b90b      	cbnz	r3, 8006c80 <_vfiprintf_r+0x18>
 8006c7c:	f7ff fbd4 	bl	8006428 <__sinit>
 8006c80:	4b89      	ldr	r3, [pc, #548]	; (8006ea8 <_vfiprintf_r+0x240>)
 8006c82:	429d      	cmp	r5, r3
 8006c84:	d11b      	bne.n	8006cbe <_vfiprintf_r+0x56>
 8006c86:	6875      	ldr	r5, [r6, #4]
 8006c88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c8a:	07d9      	lsls	r1, r3, #31
 8006c8c:	d405      	bmi.n	8006c9a <_vfiprintf_r+0x32>
 8006c8e:	89ab      	ldrh	r3, [r5, #12]
 8006c90:	059a      	lsls	r2, r3, #22
 8006c92:	d402      	bmi.n	8006c9a <_vfiprintf_r+0x32>
 8006c94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c96:	f7ff fc8a 	bl	80065ae <__retarget_lock_acquire_recursive>
 8006c9a:	89ab      	ldrh	r3, [r5, #12]
 8006c9c:	071b      	lsls	r3, r3, #28
 8006c9e:	d501      	bpl.n	8006ca4 <_vfiprintf_r+0x3c>
 8006ca0:	692b      	ldr	r3, [r5, #16]
 8006ca2:	b9eb      	cbnz	r3, 8006ce0 <_vfiprintf_r+0x78>
 8006ca4:	4629      	mov	r1, r5
 8006ca6:	4630      	mov	r0, r6
 8006ca8:	f7ff feb2 	bl	8006a10 <__swsetup_r>
 8006cac:	b1c0      	cbz	r0, 8006ce0 <_vfiprintf_r+0x78>
 8006cae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cb0:	07dc      	lsls	r4, r3, #31
 8006cb2:	d50e      	bpl.n	8006cd2 <_vfiprintf_r+0x6a>
 8006cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb8:	b01d      	add	sp, #116	; 0x74
 8006cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cbe:	4b7b      	ldr	r3, [pc, #492]	; (8006eac <_vfiprintf_r+0x244>)
 8006cc0:	429d      	cmp	r5, r3
 8006cc2:	d101      	bne.n	8006cc8 <_vfiprintf_r+0x60>
 8006cc4:	68b5      	ldr	r5, [r6, #8]
 8006cc6:	e7df      	b.n	8006c88 <_vfiprintf_r+0x20>
 8006cc8:	4b79      	ldr	r3, [pc, #484]	; (8006eb0 <_vfiprintf_r+0x248>)
 8006cca:	429d      	cmp	r5, r3
 8006ccc:	bf08      	it	eq
 8006cce:	68f5      	ldreq	r5, [r6, #12]
 8006cd0:	e7da      	b.n	8006c88 <_vfiprintf_r+0x20>
 8006cd2:	89ab      	ldrh	r3, [r5, #12]
 8006cd4:	0598      	lsls	r0, r3, #22
 8006cd6:	d4ed      	bmi.n	8006cb4 <_vfiprintf_r+0x4c>
 8006cd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cda:	f7ff fc69 	bl	80065b0 <__retarget_lock_release_recursive>
 8006cde:	e7e9      	b.n	8006cb4 <_vfiprintf_r+0x4c>
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ce4:	2320      	movs	r3, #32
 8006ce6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cea:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cee:	2330      	movs	r3, #48	; 0x30
 8006cf0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006eb4 <_vfiprintf_r+0x24c>
 8006cf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006cf8:	f04f 0901 	mov.w	r9, #1
 8006cfc:	4623      	mov	r3, r4
 8006cfe:	469a      	mov	sl, r3
 8006d00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d04:	b10a      	cbz	r2, 8006d0a <_vfiprintf_r+0xa2>
 8006d06:	2a25      	cmp	r2, #37	; 0x25
 8006d08:	d1f9      	bne.n	8006cfe <_vfiprintf_r+0x96>
 8006d0a:	ebba 0b04 	subs.w	fp, sl, r4
 8006d0e:	d00b      	beq.n	8006d28 <_vfiprintf_r+0xc0>
 8006d10:	465b      	mov	r3, fp
 8006d12:	4622      	mov	r2, r4
 8006d14:	4629      	mov	r1, r5
 8006d16:	4630      	mov	r0, r6
 8006d18:	f7ff ff93 	bl	8006c42 <__sfputs_r>
 8006d1c:	3001      	adds	r0, #1
 8006d1e:	f000 80aa 	beq.w	8006e76 <_vfiprintf_r+0x20e>
 8006d22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d24:	445a      	add	r2, fp
 8006d26:	9209      	str	r2, [sp, #36]	; 0x24
 8006d28:	f89a 3000 	ldrb.w	r3, [sl]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f000 80a2 	beq.w	8006e76 <_vfiprintf_r+0x20e>
 8006d32:	2300      	movs	r3, #0
 8006d34:	f04f 32ff 	mov.w	r2, #4294967295
 8006d38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d3c:	f10a 0a01 	add.w	sl, sl, #1
 8006d40:	9304      	str	r3, [sp, #16]
 8006d42:	9307      	str	r3, [sp, #28]
 8006d44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d48:	931a      	str	r3, [sp, #104]	; 0x68
 8006d4a:	4654      	mov	r4, sl
 8006d4c:	2205      	movs	r2, #5
 8006d4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d52:	4858      	ldr	r0, [pc, #352]	; (8006eb4 <_vfiprintf_r+0x24c>)
 8006d54:	f7f9 fac4 	bl	80002e0 <memchr>
 8006d58:	9a04      	ldr	r2, [sp, #16]
 8006d5a:	b9d8      	cbnz	r0, 8006d94 <_vfiprintf_r+0x12c>
 8006d5c:	06d1      	lsls	r1, r2, #27
 8006d5e:	bf44      	itt	mi
 8006d60:	2320      	movmi	r3, #32
 8006d62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d66:	0713      	lsls	r3, r2, #28
 8006d68:	bf44      	itt	mi
 8006d6a:	232b      	movmi	r3, #43	; 0x2b
 8006d6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d70:	f89a 3000 	ldrb.w	r3, [sl]
 8006d74:	2b2a      	cmp	r3, #42	; 0x2a
 8006d76:	d015      	beq.n	8006da4 <_vfiprintf_r+0x13c>
 8006d78:	9a07      	ldr	r2, [sp, #28]
 8006d7a:	4654      	mov	r4, sl
 8006d7c:	2000      	movs	r0, #0
 8006d7e:	f04f 0c0a 	mov.w	ip, #10
 8006d82:	4621      	mov	r1, r4
 8006d84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d88:	3b30      	subs	r3, #48	; 0x30
 8006d8a:	2b09      	cmp	r3, #9
 8006d8c:	d94e      	bls.n	8006e2c <_vfiprintf_r+0x1c4>
 8006d8e:	b1b0      	cbz	r0, 8006dbe <_vfiprintf_r+0x156>
 8006d90:	9207      	str	r2, [sp, #28]
 8006d92:	e014      	b.n	8006dbe <_vfiprintf_r+0x156>
 8006d94:	eba0 0308 	sub.w	r3, r0, r8
 8006d98:	fa09 f303 	lsl.w	r3, r9, r3
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	9304      	str	r3, [sp, #16]
 8006da0:	46a2      	mov	sl, r4
 8006da2:	e7d2      	b.n	8006d4a <_vfiprintf_r+0xe2>
 8006da4:	9b03      	ldr	r3, [sp, #12]
 8006da6:	1d19      	adds	r1, r3, #4
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	9103      	str	r1, [sp, #12]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	bfbb      	ittet	lt
 8006db0:	425b      	neglt	r3, r3
 8006db2:	f042 0202 	orrlt.w	r2, r2, #2
 8006db6:	9307      	strge	r3, [sp, #28]
 8006db8:	9307      	strlt	r3, [sp, #28]
 8006dba:	bfb8      	it	lt
 8006dbc:	9204      	strlt	r2, [sp, #16]
 8006dbe:	7823      	ldrb	r3, [r4, #0]
 8006dc0:	2b2e      	cmp	r3, #46	; 0x2e
 8006dc2:	d10c      	bne.n	8006dde <_vfiprintf_r+0x176>
 8006dc4:	7863      	ldrb	r3, [r4, #1]
 8006dc6:	2b2a      	cmp	r3, #42	; 0x2a
 8006dc8:	d135      	bne.n	8006e36 <_vfiprintf_r+0x1ce>
 8006dca:	9b03      	ldr	r3, [sp, #12]
 8006dcc:	1d1a      	adds	r2, r3, #4
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	9203      	str	r2, [sp, #12]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	bfb8      	it	lt
 8006dd6:	f04f 33ff 	movlt.w	r3, #4294967295
 8006dda:	3402      	adds	r4, #2
 8006ddc:	9305      	str	r3, [sp, #20]
 8006dde:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006ec4 <_vfiprintf_r+0x25c>
 8006de2:	7821      	ldrb	r1, [r4, #0]
 8006de4:	2203      	movs	r2, #3
 8006de6:	4650      	mov	r0, sl
 8006de8:	f7f9 fa7a 	bl	80002e0 <memchr>
 8006dec:	b140      	cbz	r0, 8006e00 <_vfiprintf_r+0x198>
 8006dee:	2340      	movs	r3, #64	; 0x40
 8006df0:	eba0 000a 	sub.w	r0, r0, sl
 8006df4:	fa03 f000 	lsl.w	r0, r3, r0
 8006df8:	9b04      	ldr	r3, [sp, #16]
 8006dfa:	4303      	orrs	r3, r0
 8006dfc:	3401      	adds	r4, #1
 8006dfe:	9304      	str	r3, [sp, #16]
 8006e00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e04:	482c      	ldr	r0, [pc, #176]	; (8006eb8 <_vfiprintf_r+0x250>)
 8006e06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e0a:	2206      	movs	r2, #6
 8006e0c:	f7f9 fa68 	bl	80002e0 <memchr>
 8006e10:	2800      	cmp	r0, #0
 8006e12:	d03f      	beq.n	8006e94 <_vfiprintf_r+0x22c>
 8006e14:	4b29      	ldr	r3, [pc, #164]	; (8006ebc <_vfiprintf_r+0x254>)
 8006e16:	bb1b      	cbnz	r3, 8006e60 <_vfiprintf_r+0x1f8>
 8006e18:	9b03      	ldr	r3, [sp, #12]
 8006e1a:	3307      	adds	r3, #7
 8006e1c:	f023 0307 	bic.w	r3, r3, #7
 8006e20:	3308      	adds	r3, #8
 8006e22:	9303      	str	r3, [sp, #12]
 8006e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e26:	443b      	add	r3, r7
 8006e28:	9309      	str	r3, [sp, #36]	; 0x24
 8006e2a:	e767      	b.n	8006cfc <_vfiprintf_r+0x94>
 8006e2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e30:	460c      	mov	r4, r1
 8006e32:	2001      	movs	r0, #1
 8006e34:	e7a5      	b.n	8006d82 <_vfiprintf_r+0x11a>
 8006e36:	2300      	movs	r3, #0
 8006e38:	3401      	adds	r4, #1
 8006e3a:	9305      	str	r3, [sp, #20]
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	f04f 0c0a 	mov.w	ip, #10
 8006e42:	4620      	mov	r0, r4
 8006e44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e48:	3a30      	subs	r2, #48	; 0x30
 8006e4a:	2a09      	cmp	r2, #9
 8006e4c:	d903      	bls.n	8006e56 <_vfiprintf_r+0x1ee>
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d0c5      	beq.n	8006dde <_vfiprintf_r+0x176>
 8006e52:	9105      	str	r1, [sp, #20]
 8006e54:	e7c3      	b.n	8006dde <_vfiprintf_r+0x176>
 8006e56:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e5a:	4604      	mov	r4, r0
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e7f0      	b.n	8006e42 <_vfiprintf_r+0x1da>
 8006e60:	ab03      	add	r3, sp, #12
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	462a      	mov	r2, r5
 8006e66:	4b16      	ldr	r3, [pc, #88]	; (8006ec0 <_vfiprintf_r+0x258>)
 8006e68:	a904      	add	r1, sp, #16
 8006e6a:	4630      	mov	r0, r6
 8006e6c:	f3af 8000 	nop.w
 8006e70:	4607      	mov	r7, r0
 8006e72:	1c78      	adds	r0, r7, #1
 8006e74:	d1d6      	bne.n	8006e24 <_vfiprintf_r+0x1bc>
 8006e76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e78:	07d9      	lsls	r1, r3, #31
 8006e7a:	d405      	bmi.n	8006e88 <_vfiprintf_r+0x220>
 8006e7c:	89ab      	ldrh	r3, [r5, #12]
 8006e7e:	059a      	lsls	r2, r3, #22
 8006e80:	d402      	bmi.n	8006e88 <_vfiprintf_r+0x220>
 8006e82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e84:	f7ff fb94 	bl	80065b0 <__retarget_lock_release_recursive>
 8006e88:	89ab      	ldrh	r3, [r5, #12]
 8006e8a:	065b      	lsls	r3, r3, #25
 8006e8c:	f53f af12 	bmi.w	8006cb4 <_vfiprintf_r+0x4c>
 8006e90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e92:	e711      	b.n	8006cb8 <_vfiprintf_r+0x50>
 8006e94:	ab03      	add	r3, sp, #12
 8006e96:	9300      	str	r3, [sp, #0]
 8006e98:	462a      	mov	r2, r5
 8006e9a:	4b09      	ldr	r3, [pc, #36]	; (8006ec0 <_vfiprintf_r+0x258>)
 8006e9c:	a904      	add	r1, sp, #16
 8006e9e:	4630      	mov	r0, r6
 8006ea0:	f000 f880 	bl	8006fa4 <_printf_i>
 8006ea4:	e7e4      	b.n	8006e70 <_vfiprintf_r+0x208>
 8006ea6:	bf00      	nop
 8006ea8:	080072ec 	.word	0x080072ec
 8006eac:	0800730c 	.word	0x0800730c
 8006eb0:	080072cc 	.word	0x080072cc
 8006eb4:	08007330 	.word	0x08007330
 8006eb8:	0800733a 	.word	0x0800733a
 8006ebc:	00000000 	.word	0x00000000
 8006ec0:	08006c43 	.word	0x08006c43
 8006ec4:	08007336 	.word	0x08007336

08006ec8 <_printf_common>:
 8006ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ecc:	4616      	mov	r6, r2
 8006ece:	4699      	mov	r9, r3
 8006ed0:	688a      	ldr	r2, [r1, #8]
 8006ed2:	690b      	ldr	r3, [r1, #16]
 8006ed4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	bfb8      	it	lt
 8006edc:	4613      	movlt	r3, r2
 8006ede:	6033      	str	r3, [r6, #0]
 8006ee0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ee4:	4607      	mov	r7, r0
 8006ee6:	460c      	mov	r4, r1
 8006ee8:	b10a      	cbz	r2, 8006eee <_printf_common+0x26>
 8006eea:	3301      	adds	r3, #1
 8006eec:	6033      	str	r3, [r6, #0]
 8006eee:	6823      	ldr	r3, [r4, #0]
 8006ef0:	0699      	lsls	r1, r3, #26
 8006ef2:	bf42      	ittt	mi
 8006ef4:	6833      	ldrmi	r3, [r6, #0]
 8006ef6:	3302      	addmi	r3, #2
 8006ef8:	6033      	strmi	r3, [r6, #0]
 8006efa:	6825      	ldr	r5, [r4, #0]
 8006efc:	f015 0506 	ands.w	r5, r5, #6
 8006f00:	d106      	bne.n	8006f10 <_printf_common+0x48>
 8006f02:	f104 0a19 	add.w	sl, r4, #25
 8006f06:	68e3      	ldr	r3, [r4, #12]
 8006f08:	6832      	ldr	r2, [r6, #0]
 8006f0a:	1a9b      	subs	r3, r3, r2
 8006f0c:	42ab      	cmp	r3, r5
 8006f0e:	dc26      	bgt.n	8006f5e <_printf_common+0x96>
 8006f10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f14:	1e13      	subs	r3, r2, #0
 8006f16:	6822      	ldr	r2, [r4, #0]
 8006f18:	bf18      	it	ne
 8006f1a:	2301      	movne	r3, #1
 8006f1c:	0692      	lsls	r2, r2, #26
 8006f1e:	d42b      	bmi.n	8006f78 <_printf_common+0xb0>
 8006f20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f24:	4649      	mov	r1, r9
 8006f26:	4638      	mov	r0, r7
 8006f28:	47c0      	blx	r8
 8006f2a:	3001      	adds	r0, #1
 8006f2c:	d01e      	beq.n	8006f6c <_printf_common+0xa4>
 8006f2e:	6823      	ldr	r3, [r4, #0]
 8006f30:	68e5      	ldr	r5, [r4, #12]
 8006f32:	6832      	ldr	r2, [r6, #0]
 8006f34:	f003 0306 	and.w	r3, r3, #6
 8006f38:	2b04      	cmp	r3, #4
 8006f3a:	bf08      	it	eq
 8006f3c:	1aad      	subeq	r5, r5, r2
 8006f3e:	68a3      	ldr	r3, [r4, #8]
 8006f40:	6922      	ldr	r2, [r4, #16]
 8006f42:	bf0c      	ite	eq
 8006f44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f48:	2500      	movne	r5, #0
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	bfc4      	itt	gt
 8006f4e:	1a9b      	subgt	r3, r3, r2
 8006f50:	18ed      	addgt	r5, r5, r3
 8006f52:	2600      	movs	r6, #0
 8006f54:	341a      	adds	r4, #26
 8006f56:	42b5      	cmp	r5, r6
 8006f58:	d11a      	bne.n	8006f90 <_printf_common+0xc8>
 8006f5a:	2000      	movs	r0, #0
 8006f5c:	e008      	b.n	8006f70 <_printf_common+0xa8>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	4652      	mov	r2, sl
 8006f62:	4649      	mov	r1, r9
 8006f64:	4638      	mov	r0, r7
 8006f66:	47c0      	blx	r8
 8006f68:	3001      	adds	r0, #1
 8006f6a:	d103      	bne.n	8006f74 <_printf_common+0xac>
 8006f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f74:	3501      	adds	r5, #1
 8006f76:	e7c6      	b.n	8006f06 <_printf_common+0x3e>
 8006f78:	18e1      	adds	r1, r4, r3
 8006f7a:	1c5a      	adds	r2, r3, #1
 8006f7c:	2030      	movs	r0, #48	; 0x30
 8006f7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f82:	4422      	add	r2, r4
 8006f84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f8c:	3302      	adds	r3, #2
 8006f8e:	e7c7      	b.n	8006f20 <_printf_common+0x58>
 8006f90:	2301      	movs	r3, #1
 8006f92:	4622      	mov	r2, r4
 8006f94:	4649      	mov	r1, r9
 8006f96:	4638      	mov	r0, r7
 8006f98:	47c0      	blx	r8
 8006f9a:	3001      	adds	r0, #1
 8006f9c:	d0e6      	beq.n	8006f6c <_printf_common+0xa4>
 8006f9e:	3601      	adds	r6, #1
 8006fa0:	e7d9      	b.n	8006f56 <_printf_common+0x8e>
	...

08006fa4 <_printf_i>:
 8006fa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa8:	7e0f      	ldrb	r7, [r1, #24]
 8006faa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006fac:	2f78      	cmp	r7, #120	; 0x78
 8006fae:	4691      	mov	r9, r2
 8006fb0:	4680      	mov	r8, r0
 8006fb2:	460c      	mov	r4, r1
 8006fb4:	469a      	mov	sl, r3
 8006fb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006fba:	d807      	bhi.n	8006fcc <_printf_i+0x28>
 8006fbc:	2f62      	cmp	r7, #98	; 0x62
 8006fbe:	d80a      	bhi.n	8006fd6 <_printf_i+0x32>
 8006fc0:	2f00      	cmp	r7, #0
 8006fc2:	f000 80d8 	beq.w	8007176 <_printf_i+0x1d2>
 8006fc6:	2f58      	cmp	r7, #88	; 0x58
 8006fc8:	f000 80a3 	beq.w	8007112 <_printf_i+0x16e>
 8006fcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006fd4:	e03a      	b.n	800704c <_printf_i+0xa8>
 8006fd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006fda:	2b15      	cmp	r3, #21
 8006fdc:	d8f6      	bhi.n	8006fcc <_printf_i+0x28>
 8006fde:	a101      	add	r1, pc, #4	; (adr r1, 8006fe4 <_printf_i+0x40>)
 8006fe0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fe4:	0800703d 	.word	0x0800703d
 8006fe8:	08007051 	.word	0x08007051
 8006fec:	08006fcd 	.word	0x08006fcd
 8006ff0:	08006fcd 	.word	0x08006fcd
 8006ff4:	08006fcd 	.word	0x08006fcd
 8006ff8:	08006fcd 	.word	0x08006fcd
 8006ffc:	08007051 	.word	0x08007051
 8007000:	08006fcd 	.word	0x08006fcd
 8007004:	08006fcd 	.word	0x08006fcd
 8007008:	08006fcd 	.word	0x08006fcd
 800700c:	08006fcd 	.word	0x08006fcd
 8007010:	0800715d 	.word	0x0800715d
 8007014:	08007081 	.word	0x08007081
 8007018:	0800713f 	.word	0x0800713f
 800701c:	08006fcd 	.word	0x08006fcd
 8007020:	08006fcd 	.word	0x08006fcd
 8007024:	0800717f 	.word	0x0800717f
 8007028:	08006fcd 	.word	0x08006fcd
 800702c:	08007081 	.word	0x08007081
 8007030:	08006fcd 	.word	0x08006fcd
 8007034:	08006fcd 	.word	0x08006fcd
 8007038:	08007147 	.word	0x08007147
 800703c:	682b      	ldr	r3, [r5, #0]
 800703e:	1d1a      	adds	r2, r3, #4
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	602a      	str	r2, [r5, #0]
 8007044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007048:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800704c:	2301      	movs	r3, #1
 800704e:	e0a3      	b.n	8007198 <_printf_i+0x1f4>
 8007050:	6820      	ldr	r0, [r4, #0]
 8007052:	6829      	ldr	r1, [r5, #0]
 8007054:	0606      	lsls	r6, r0, #24
 8007056:	f101 0304 	add.w	r3, r1, #4
 800705a:	d50a      	bpl.n	8007072 <_printf_i+0xce>
 800705c:	680e      	ldr	r6, [r1, #0]
 800705e:	602b      	str	r3, [r5, #0]
 8007060:	2e00      	cmp	r6, #0
 8007062:	da03      	bge.n	800706c <_printf_i+0xc8>
 8007064:	232d      	movs	r3, #45	; 0x2d
 8007066:	4276      	negs	r6, r6
 8007068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800706c:	485e      	ldr	r0, [pc, #376]	; (80071e8 <_printf_i+0x244>)
 800706e:	230a      	movs	r3, #10
 8007070:	e019      	b.n	80070a6 <_printf_i+0x102>
 8007072:	680e      	ldr	r6, [r1, #0]
 8007074:	602b      	str	r3, [r5, #0]
 8007076:	f010 0f40 	tst.w	r0, #64	; 0x40
 800707a:	bf18      	it	ne
 800707c:	b236      	sxthne	r6, r6
 800707e:	e7ef      	b.n	8007060 <_printf_i+0xbc>
 8007080:	682b      	ldr	r3, [r5, #0]
 8007082:	6820      	ldr	r0, [r4, #0]
 8007084:	1d19      	adds	r1, r3, #4
 8007086:	6029      	str	r1, [r5, #0]
 8007088:	0601      	lsls	r1, r0, #24
 800708a:	d501      	bpl.n	8007090 <_printf_i+0xec>
 800708c:	681e      	ldr	r6, [r3, #0]
 800708e:	e002      	b.n	8007096 <_printf_i+0xf2>
 8007090:	0646      	lsls	r6, r0, #25
 8007092:	d5fb      	bpl.n	800708c <_printf_i+0xe8>
 8007094:	881e      	ldrh	r6, [r3, #0]
 8007096:	4854      	ldr	r0, [pc, #336]	; (80071e8 <_printf_i+0x244>)
 8007098:	2f6f      	cmp	r7, #111	; 0x6f
 800709a:	bf0c      	ite	eq
 800709c:	2308      	moveq	r3, #8
 800709e:	230a      	movne	r3, #10
 80070a0:	2100      	movs	r1, #0
 80070a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070a6:	6865      	ldr	r5, [r4, #4]
 80070a8:	60a5      	str	r5, [r4, #8]
 80070aa:	2d00      	cmp	r5, #0
 80070ac:	bfa2      	ittt	ge
 80070ae:	6821      	ldrge	r1, [r4, #0]
 80070b0:	f021 0104 	bicge.w	r1, r1, #4
 80070b4:	6021      	strge	r1, [r4, #0]
 80070b6:	b90e      	cbnz	r6, 80070bc <_printf_i+0x118>
 80070b8:	2d00      	cmp	r5, #0
 80070ba:	d04d      	beq.n	8007158 <_printf_i+0x1b4>
 80070bc:	4615      	mov	r5, r2
 80070be:	fbb6 f1f3 	udiv	r1, r6, r3
 80070c2:	fb03 6711 	mls	r7, r3, r1, r6
 80070c6:	5dc7      	ldrb	r7, [r0, r7]
 80070c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80070cc:	4637      	mov	r7, r6
 80070ce:	42bb      	cmp	r3, r7
 80070d0:	460e      	mov	r6, r1
 80070d2:	d9f4      	bls.n	80070be <_printf_i+0x11a>
 80070d4:	2b08      	cmp	r3, #8
 80070d6:	d10b      	bne.n	80070f0 <_printf_i+0x14c>
 80070d8:	6823      	ldr	r3, [r4, #0]
 80070da:	07de      	lsls	r6, r3, #31
 80070dc:	d508      	bpl.n	80070f0 <_printf_i+0x14c>
 80070de:	6923      	ldr	r3, [r4, #16]
 80070e0:	6861      	ldr	r1, [r4, #4]
 80070e2:	4299      	cmp	r1, r3
 80070e4:	bfde      	ittt	le
 80070e6:	2330      	movle	r3, #48	; 0x30
 80070e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80070ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80070f0:	1b52      	subs	r2, r2, r5
 80070f2:	6122      	str	r2, [r4, #16]
 80070f4:	f8cd a000 	str.w	sl, [sp]
 80070f8:	464b      	mov	r3, r9
 80070fa:	aa03      	add	r2, sp, #12
 80070fc:	4621      	mov	r1, r4
 80070fe:	4640      	mov	r0, r8
 8007100:	f7ff fee2 	bl	8006ec8 <_printf_common>
 8007104:	3001      	adds	r0, #1
 8007106:	d14c      	bne.n	80071a2 <_printf_i+0x1fe>
 8007108:	f04f 30ff 	mov.w	r0, #4294967295
 800710c:	b004      	add	sp, #16
 800710e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007112:	4835      	ldr	r0, [pc, #212]	; (80071e8 <_printf_i+0x244>)
 8007114:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007118:	6829      	ldr	r1, [r5, #0]
 800711a:	6823      	ldr	r3, [r4, #0]
 800711c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007120:	6029      	str	r1, [r5, #0]
 8007122:	061d      	lsls	r5, r3, #24
 8007124:	d514      	bpl.n	8007150 <_printf_i+0x1ac>
 8007126:	07df      	lsls	r7, r3, #31
 8007128:	bf44      	itt	mi
 800712a:	f043 0320 	orrmi.w	r3, r3, #32
 800712e:	6023      	strmi	r3, [r4, #0]
 8007130:	b91e      	cbnz	r6, 800713a <_printf_i+0x196>
 8007132:	6823      	ldr	r3, [r4, #0]
 8007134:	f023 0320 	bic.w	r3, r3, #32
 8007138:	6023      	str	r3, [r4, #0]
 800713a:	2310      	movs	r3, #16
 800713c:	e7b0      	b.n	80070a0 <_printf_i+0xfc>
 800713e:	6823      	ldr	r3, [r4, #0]
 8007140:	f043 0320 	orr.w	r3, r3, #32
 8007144:	6023      	str	r3, [r4, #0]
 8007146:	2378      	movs	r3, #120	; 0x78
 8007148:	4828      	ldr	r0, [pc, #160]	; (80071ec <_printf_i+0x248>)
 800714a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800714e:	e7e3      	b.n	8007118 <_printf_i+0x174>
 8007150:	0659      	lsls	r1, r3, #25
 8007152:	bf48      	it	mi
 8007154:	b2b6      	uxthmi	r6, r6
 8007156:	e7e6      	b.n	8007126 <_printf_i+0x182>
 8007158:	4615      	mov	r5, r2
 800715a:	e7bb      	b.n	80070d4 <_printf_i+0x130>
 800715c:	682b      	ldr	r3, [r5, #0]
 800715e:	6826      	ldr	r6, [r4, #0]
 8007160:	6961      	ldr	r1, [r4, #20]
 8007162:	1d18      	adds	r0, r3, #4
 8007164:	6028      	str	r0, [r5, #0]
 8007166:	0635      	lsls	r5, r6, #24
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	d501      	bpl.n	8007170 <_printf_i+0x1cc>
 800716c:	6019      	str	r1, [r3, #0]
 800716e:	e002      	b.n	8007176 <_printf_i+0x1d2>
 8007170:	0670      	lsls	r0, r6, #25
 8007172:	d5fb      	bpl.n	800716c <_printf_i+0x1c8>
 8007174:	8019      	strh	r1, [r3, #0]
 8007176:	2300      	movs	r3, #0
 8007178:	6123      	str	r3, [r4, #16]
 800717a:	4615      	mov	r5, r2
 800717c:	e7ba      	b.n	80070f4 <_printf_i+0x150>
 800717e:	682b      	ldr	r3, [r5, #0]
 8007180:	1d1a      	adds	r2, r3, #4
 8007182:	602a      	str	r2, [r5, #0]
 8007184:	681d      	ldr	r5, [r3, #0]
 8007186:	6862      	ldr	r2, [r4, #4]
 8007188:	2100      	movs	r1, #0
 800718a:	4628      	mov	r0, r5
 800718c:	f7f9 f8a8 	bl	80002e0 <memchr>
 8007190:	b108      	cbz	r0, 8007196 <_printf_i+0x1f2>
 8007192:	1b40      	subs	r0, r0, r5
 8007194:	6060      	str	r0, [r4, #4]
 8007196:	6863      	ldr	r3, [r4, #4]
 8007198:	6123      	str	r3, [r4, #16]
 800719a:	2300      	movs	r3, #0
 800719c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071a0:	e7a8      	b.n	80070f4 <_printf_i+0x150>
 80071a2:	6923      	ldr	r3, [r4, #16]
 80071a4:	462a      	mov	r2, r5
 80071a6:	4649      	mov	r1, r9
 80071a8:	4640      	mov	r0, r8
 80071aa:	47d0      	blx	sl
 80071ac:	3001      	adds	r0, #1
 80071ae:	d0ab      	beq.n	8007108 <_printf_i+0x164>
 80071b0:	6823      	ldr	r3, [r4, #0]
 80071b2:	079b      	lsls	r3, r3, #30
 80071b4:	d413      	bmi.n	80071de <_printf_i+0x23a>
 80071b6:	68e0      	ldr	r0, [r4, #12]
 80071b8:	9b03      	ldr	r3, [sp, #12]
 80071ba:	4298      	cmp	r0, r3
 80071bc:	bfb8      	it	lt
 80071be:	4618      	movlt	r0, r3
 80071c0:	e7a4      	b.n	800710c <_printf_i+0x168>
 80071c2:	2301      	movs	r3, #1
 80071c4:	4632      	mov	r2, r6
 80071c6:	4649      	mov	r1, r9
 80071c8:	4640      	mov	r0, r8
 80071ca:	47d0      	blx	sl
 80071cc:	3001      	adds	r0, #1
 80071ce:	d09b      	beq.n	8007108 <_printf_i+0x164>
 80071d0:	3501      	adds	r5, #1
 80071d2:	68e3      	ldr	r3, [r4, #12]
 80071d4:	9903      	ldr	r1, [sp, #12]
 80071d6:	1a5b      	subs	r3, r3, r1
 80071d8:	42ab      	cmp	r3, r5
 80071da:	dcf2      	bgt.n	80071c2 <_printf_i+0x21e>
 80071dc:	e7eb      	b.n	80071b6 <_printf_i+0x212>
 80071de:	2500      	movs	r5, #0
 80071e0:	f104 0619 	add.w	r6, r4, #25
 80071e4:	e7f5      	b.n	80071d2 <_printf_i+0x22e>
 80071e6:	bf00      	nop
 80071e8:	08007341 	.word	0x08007341
 80071ec:	08007352 	.word	0x08007352

080071f0 <_read_r>:
 80071f0:	b538      	push	{r3, r4, r5, lr}
 80071f2:	4d07      	ldr	r5, [pc, #28]	; (8007210 <_read_r+0x20>)
 80071f4:	4604      	mov	r4, r0
 80071f6:	4608      	mov	r0, r1
 80071f8:	4611      	mov	r1, r2
 80071fa:	2200      	movs	r2, #0
 80071fc:	602a      	str	r2, [r5, #0]
 80071fe:	461a      	mov	r2, r3
 8007200:	f7f9 feb4 	bl	8000f6c <_read>
 8007204:	1c43      	adds	r3, r0, #1
 8007206:	d102      	bne.n	800720e <_read_r+0x1e>
 8007208:	682b      	ldr	r3, [r5, #0]
 800720a:	b103      	cbz	r3, 800720e <_read_r+0x1e>
 800720c:	6023      	str	r3, [r4, #0]
 800720e:	bd38      	pop	{r3, r4, r5, pc}
 8007210:	240007f0 	.word	0x240007f0

08007214 <_fstat_r>:
 8007214:	b538      	push	{r3, r4, r5, lr}
 8007216:	4d07      	ldr	r5, [pc, #28]	; (8007234 <_fstat_r+0x20>)
 8007218:	2300      	movs	r3, #0
 800721a:	4604      	mov	r4, r0
 800721c:	4608      	mov	r0, r1
 800721e:	4611      	mov	r1, r2
 8007220:	602b      	str	r3, [r5, #0]
 8007222:	f7f9 fee8 	bl	8000ff6 <_fstat>
 8007226:	1c43      	adds	r3, r0, #1
 8007228:	d102      	bne.n	8007230 <_fstat_r+0x1c>
 800722a:	682b      	ldr	r3, [r5, #0]
 800722c:	b103      	cbz	r3, 8007230 <_fstat_r+0x1c>
 800722e:	6023      	str	r3, [r4, #0]
 8007230:	bd38      	pop	{r3, r4, r5, pc}
 8007232:	bf00      	nop
 8007234:	240007f0 	.word	0x240007f0

08007238 <_isatty_r>:
 8007238:	b538      	push	{r3, r4, r5, lr}
 800723a:	4d06      	ldr	r5, [pc, #24]	; (8007254 <_isatty_r+0x1c>)
 800723c:	2300      	movs	r3, #0
 800723e:	4604      	mov	r4, r0
 8007240:	4608      	mov	r0, r1
 8007242:	602b      	str	r3, [r5, #0]
 8007244:	f7f9 fee7 	bl	8001016 <_isatty>
 8007248:	1c43      	adds	r3, r0, #1
 800724a:	d102      	bne.n	8007252 <_isatty_r+0x1a>
 800724c:	682b      	ldr	r3, [r5, #0]
 800724e:	b103      	cbz	r3, 8007252 <_isatty_r+0x1a>
 8007250:	6023      	str	r3, [r4, #0]
 8007252:	bd38      	pop	{r3, r4, r5, pc}
 8007254:	240007f0 	.word	0x240007f0

08007258 <_init>:
 8007258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800725a:	bf00      	nop
 800725c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800725e:	bc08      	pop	{r3}
 8007260:	469e      	mov	lr, r3
 8007262:	4770      	bx	lr

08007264 <_fini>:
 8007264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007266:	bf00      	nop
 8007268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800726a:	bc08      	pop	{r3}
 800726c:	469e      	mov	lr, r3
 800726e:	4770      	bx	lr
